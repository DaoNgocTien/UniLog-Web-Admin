{"version":3,"sources":["assets/img/theme/team-1-800x800.jpg","assets/img/theme/profile-cover.jpg","assets/img/theme/team-4-800x800.jpg","assets/img/brand/argon-react.png","assets/img/brand/argon-react-white.png","components/contents/404NotFound/NotFound.jsx","components/layouts/Layout/LayoutAvatar.jsx","components/layouts/Navbars/NavBar.jsx","components/layouts/Footers/AdminFooter.jsx","redux/constants.js","redux/Url/APISettings.js","redux/Action/LoginAction.js","redux/Action/ServerAction.js","redux/Action/ApplicationAction.js","redux/Action/RepoAction.js","redux/Action/SystemAction.js","redux/Action/LogAction.js","redux/Action/ApplicationInstanceAction.js","redux/Action/EmployeeAction.js","redux/Action/ProfileAction.js","redux/Action/index.js","components/layouts/Sidebar/SidebarResponsive.jsx","components/layouts/Headers/Header.jsx","components/contents/Index.jsx","components/contents/Profile/PasswordChangingModal.jsx","components/contents/Profile/PasswordChangingModalContainer.js","components/layouts/Headers/UserHeader.jsx","components/contents/Profile/Profile.jsx","components/contents/Profile/ProfileContainer.js","components/contents/Login/Register.jsx","components/contents/Login/RegisterContainer.js","components/contents/Login/Login.jsx","components/contents/Login/PasswordResetToken.jsx","components/contents/Login/PasswordReset.jsx","components/contents/views/Logout.jsx","components/contents/Server/Server.jsx","components/contents/Server/ServerContainer.js","components/contents/Server/ServerRegistrationModal.jsx","components/contents/Server/ServerRegistrationModalContainer.js","components/contents/Server/ServerInformationModal.jsx","components/contents/Server/ServerInformationModalContainer.js","components/contents/Employee/Employee.jsx","components/contents/Employee/EmployeeContainer.js","components/contents/Employee/EmployeeRegistrationModal.jsx","components/contents/Employee/EmployeeRegistrationModalContainer.js","components/contents/Employee/ProjectAssignment.jsx","components/contents/Employee/ProjectAssignmentContainer.js","components/contents/Employee/EmployeeInformationModal.jsx","components/contents/Employee/EmployeeInformationModalContainer.js","components/contents/Application/Application.jsx","components/contents/Application/ApplicationContainer.js","components/contents/Application/ApplicationRegistrationModal.jsx","components/contents/Application/ApplicationRegistrationModalContainer.js","components/contents/Repo/Repo.jsx","components/contents/Repo/RepoContainer.js","components/contents/Application/ApplicationInformationModal.jsx","components/contents/Application/ApplicationInformationModalContainer.js","components/contents/ApplicationInstance/ApplicationInstance.jsx","components/contents/ApplicationInstance/ApplicationInstanceContainer.js","components/contents/ApplicationInstance/ApplicationInstanceRegistrationModal.jsx","components/contents/ApplicationInstance/ApplicationInstanceRegistrationModalContainer.js","components/contents/ApplicationInstance/ApplicationInstanceInformationModal.jsx","components/contents/ApplicationInstance/ApplicationInstanceInformationModalContainer.js","components/contents/Log/Log.jsx","components/contents/Log/LogContainer.js","routes.js","components/contents/Log/LogSelection.jsx","components/HOC/TablePresentation.js","components/HOC/TableContainer.js","components/layouts/Admin.jsx","components/layouts/Navbars/AuthNavbar.jsx","components/layouts/Footers/AuthFooter.jsx","components/layouts/Auth.jsx","App.js","redux/Reducer/baseReducer.js","redux/Reducer/loginReducer.js","redux/Reducer/serverReducer.js","redux/Reducer/applicationReducer.js","redux/Reducer/repoReducer.js","redux/Reducer/systemReducer.js","redux/Reducer/logReducer.js","redux/Reducer/applicationInstanceReducer.js","redux/Reducer/employeeReducer.js","redux/Reducer/profileReducer.js","redux/Reducer/index.js","redux/Store/storeGlobal.js","index.js","variables/charts.jsx","assets/img/icons/common/google.svg"],"names":["module","exports","NotFound","className","href","Component","LayoutAvatar","props","nameProps","navProps","Nav","UncontrolledDropdown","nav","DropdownToggle","DropdownMenu","aria-labelledby","right","DropdownItem","divider","Media","alt","src","require","header","tag","to","Link","onClick","e","preventDefault","NavBar","state","Navbar","style","backgroundColor","expand","id","Container","fluid","Form","Footer","Row","Col","xl","color","rel","target","NavItem","NavLink","React","LoginActionTypes","ServerActionTypes","ApplicationActionTypes","RepoActionTypes","SystemActionTypes","LogActionTypes","ApplicationInstanceActionTypes","EmployeeActionTypes","ProfileActionTypes","REQUEST_FETCH_API","GET_PROFILE_LIST","STORE_PROFILE","TOGGLE_CREATE_PROFILE_MODAL","TOGGLE_INFORMATION_MODAL","LOGIN","REQUEST_RESET_PASSWORD","CHANGE_PASSWORD","TOGGLE_PROFILE_COMPONENT","BASE_API_URL","LOGIN_API_URL","ACCOUNT_API_URL","SERVER_API_URL","SERVER_ACCOUNT_URL","APPLICATION_API_URL","APPLICATION_INSTANCE_API_URL","LOG_API_URL","LOG_ACTIVITY_API_URL","REPO_API_URL","SYSTEM_API_URL","SYSTEM_API_DEACTIVE","SYSTEM_INSTANCE_API_URL","SERVER_OS_API_URL","SERVER_TYPE_API_URL","confirmLoginStatusActionCreator","status","type","payload","requestGetDataFetch","storeServerListActionCreator","serverList","storeServerMasterListActionCreator","currentDataList","servermasterList","length","map","server","push","name","storeCurrentSelectedServerActionCreater","getData","dispatch","getState","a","async","Server","fetchStatus","console","log","JSON","stringify","Login","loginInfor","token","fetch","APISettings","method","headers","Authorization","fetchRequest","ok","Error","statusText","localStorage","clear","json","result","createNewServer","os","server_code","createModel","body","toggleCreateModal","toggleInformationModal","storeCurrentSelectedServer","updateServerGeneralInformation","server_master","ip_address","server_url","description","expire_date","Date","now","updateModel","server_detail","updateServerStatus","active","change_status","mode","Accept","updateServerDetail","server_detail_id","disk1","disk2","disk3","volume_disk1","volume_disk2","volume_disk3","server_id","updateServerAccount","username","password","storeApplicationListActionCreator","ApplicationList","storeCurrentSelectedApplicationActionCreater","storeRepoListActionCreator","RepoList","storeSystemListActionCreator","SystemList","storeLogListActionCreator","LogList","storeApplicationInstanceListActionCreator","ApplicationInstanceList","storeCurrentSelectedApplicationInstanceActionCreater","storeEmployeeListActionCreator","EmployeeList","storeCurrentSelectedEmployeeActionCreater","storeProfileActionCreator","profile","login","email","loginModel","setItem","role","logout","GetServerList","ServerActions","getDataDispatch","Application","createNewApplication","start_date","category","origin","priority","storeCurrentSelectedApplication","updateApplicationGeneralInformation","system_id","note","end_date","stage","source_code_url","technologies","updateApplicationStatus","Application_detail","Application_API_URL","updateApplicationDetail","Application_detail_id","Application_id","updateApplicationAccount","Application_ACCOUNT_URL","Repo","createNewRepo","application_id","repo_url","deleteRepo","System","createNewSystem","deleteSystem","Log","link","createNewLog","Log_url","deleteLog","ApplicationInstance","createNewApplicationInstance","app_code","storeCurrentSelectedApplicationInstance","updateApplicationInstanceGeneralInformation","application_version","config_url","release_url","updateApplicationInstanceStatus","APPLICATION_INSTANCE_detail","updateApplicationInstanceDetail","APPLICATION_INSTANCE_detail_id","APPLICATION_INSTANCE_id","updateApplicationInstanceAccount","APPLICATION_INSTANCE_ACCOUNT_URL","Employee","createNewEmployee","confirm_password","is_admin","address","phone","manager_registration_token","alert","storeCurrentSelectedEmployee","updateEmployeeGeneralInformation","updateEmployeeStatus","Employee_detail","updateEmployeeDetail","Employee_detail_id","Employee_id","updateEmployeeAccount","Employee_ACCOUNT_URL","addEmployeeIntoProject","Application_instance_id","requestResetPassword","Profile","Action","toggleProfileComponent","updateProfile","changePassword","current_password","new_password","SidebarResponsive","collapseOpen","toggleCollapse","setState","closeCollapse","createLinks","routes","prop","key","includes","layout","path","NavLinkRRD","activeClassName","icon","activeRoute","bind","routeName","this","location","pathname","indexOf","navbarBrandProps","bgColor","logo","innerLink","outterLink","NavbarBrand","imgAlt","imgSrc","Collapse","navbar","isOpen","xs","border","filter","route","section","defaultProps","enhance","fns","x","reduceRight","y","f","compose","withRouter","connect","ownProps","own","Header","lg","Card","CardBody","CardTitle","Index","activeNav","chartExample1Data","toggleNavs","index","wow","setTimeout","window","Chart","parseOptions","chartOptions","CardHeader","pills","classnames","data-toggle","data","chartExample1","options","getDatasetAtEvent","chartExample2","Button","size","Table","responsive","scope","Progress","max","value","barClassName","memo","fromProps","modal","employee","closeBtn","validatePassword","newPasswordRef","createRef","confirmedPasswordRef","useState","newPasswordValidation","setNewPasswordValidation","confirmedPasswordValidation","setConfirmedPasswordValidation","checkValidation","event","checked","current","Modal","toggle","ModalHeader","close","ModalBody","FormGroup","Label","for","Input","onChange","placeholder","innerRef","defaultValue","valid","invalid","FormFeedback","FormText","ModalFooter","disabled","prevProps","nextProps","propsDefault","currentPassword","confirmPassword","newPassword","PasswordChangingModalContainer","UserHeader","minHeight","backgroundImage","backgroundSize","backgroundPosition","md","asp_net_user_id","asp_net_user","manage_project","validateName","validatePhone","validateAddress","listLog","listApplication","listApplicationInstance","pj","application_instance_id","achivement","application","applicationInstance","nameRef","addressRef","phoneRef","nameValidation","setNameValidation","addressValidation","setAddressValidation","phoneValidation","setPhoneValidation","app","achi","appIns","htmlFor","ProfileContainer","componentDidMount","Register","emailValidation","passwordValidation","isChange","validateEmail","validation","createNewGuest","InputGroup","InputGroupAddon","addonType","InputGroupText","emailInput","required","passwordInput","RegExp","test","RegisterContainer","isLoggedIn","PasswordResetToken","PasswordReset","loginStatus","isLogin","Logout","serverId","serverName","serverIp","createDate","create_time","Badge","uuidv1","ServerContainer","tableData","validateServerCode","validateServerName","validateServerTypeAndOS","serverCodeRef","serverNameRef","serverOsSelectRef","serverTypeSelectRef","serverCodeValidation","setServerCodeValidation","serverNameValidation","setServerNameValidation","serverOsSelectValidation","setServerOsSelectValidation","condition","serverTypeSelect","parseInt","form","serverCode","serverOsSelect","ServerRegistrationModalContainer","serverMasterList","validateIPaddress","validateServerUrl","validateServerDescription","validateExpiredDate","validateDisk1","validateDisk2","validateDisk3","validateDiskVolume1","validateDiskVolume2","validateDiskVolume3","validateAccount","expired_date","update_time","server_account","serverMasterSellectRef","serverIpAddressRef","serverExpiredDateRef","serverCreateDateRef","serverUpdateDateRef","serverUrlRef","serverDescriptionRef","disk1Ref","volume_disk1Ref","disk2Ref","volume_disk2Ref","disk3Ref","volume_disk3Ref","accountRef","passwordRef","confirmPasswordRef","serverIpAddressValidation","setServerIpAddressValidation","serverExpiredDateValidation","setServerExpiredDateValidation","serverUrlValidation","setServerUrlValidation","serverDescriptionValidation","setServerDescriptionValidation","serverAccountPasswordShowUp","setServerAccountPasswordShowUp","serverAccountConfirmPasswordShowUp","setServerAccountConfirmPasswordShowUp","firstDiskName","setFirstDiskName","secondDiskName","setSecondDiskName","thirdDiskName","setThirdDiskName","firstDiskVolume","setFirstDiskVolume","secondDiskVolume","setSecondDiskVolume","thirdDiskVolume","setThirdDiskVolume","serverAccount","setServerAccount","serverPassword","setServerPassword","serverConfirmPassword","setServerConfirmPassword","generalInformationValidation","activeTab","setActiveTab","toggleTab","tab","tabs","TabContent","TabPane","tabId","sm","updateServerInformation","serverIpAddress","serverUrl","serverDescription","serverExpiredDate","toISOString","slice","currentDate","setMinutes","getMinutes","error","ServerInformationModalContainer","currentServerMasterList","find","currentSelectedServer","EmployeeContainer","emailRef","setEmailValidation","EmployeeRegistrationModalContainer","ProjectAssignment","assign","userId","userRole","userProject","checkJoinedProject","project","assignEmployee","ProjectAssignmentContainer","currentSelectedEmployee","manageProject","marginTop","systemList","applicationName","validateStartDate","startDate","endDate","getYear","getMonth","getDate","validateSourceCodeUrl","sourceCodeUrl","validateRepoName","repoName","validateRepoUrl","repoUrl","EmployeeInformationModalContainer","applicationList","applicationInstanceList","application_instance","ApplicationContainer","categorySelectRef","applicationNameRef","prioritySelectRef","startDateRef","originSelectRef","typeSelectRef","statusSelectRef","applicationNameValidation","setApplicationNameValidation","startDateValidation","setStartDateValidation","padding","borderRadius","textAlign","createAplication","ApplicationRegistrationModalContainer","repoList","repo","RepoContainer","currentSelectedApplication","delete","efford","systems_id","team","expiredDateRef","createDateRef","sourceCodeUrlRef","descriptionRef","technologyRef","teamRef","effordRef","stageSelectRef","systemSelectRef","repoNameRef","repoUrlRef","serverSelectRef","expiredDateValidation","setExpiredDateValidation","sourceCodeUrlValidation","setSourceCodeUrlValidation","repoNameValidation","setRepoNameValidation","repoUrlValidation","setRepoUrlValidation","serverSelectValidation","setServerSelectValidation","system","is_done","updateApplicationInformation","createNewRepository","ApplicationInformationModalContainer","ApplicationInstanceContainer","validateAppCode","appCodeRef","applicationSelectRef","appCodeValidation","setAppCodeValidation","create","appCode","ApplicationInstanceRegistrationModalContainer","appInsList","validateVersion","validateDescription","validateConfigUrl","validateReleaseUrl","versionRef","configUrlRef","releaseUrlRef","versionValidation","setVersionValidation","configUrlValidation","setConfigUrlValidation","releaseUrlValidation","setReleaseValidation","descriptionValidation","setDescriptionValidation","updateApplicationInstanceInformation","version","configUrl","releaseUrl","ApplicationInstanceInformationModalContainer","currentSelectedApplicationInstance","LogContainer","storeCurrentSelectedLog","updateLogStatus","component","RegistrationModal","DetailModal","isEndRoute","LogSelection","appInstance","WrappedComponent","TableContainer","Wrapper","Admin","getRoutes","Route","render","getBrandText","i","document","documentElement","scrollTop","scrollingElement","refs","mainContent","ref","brandText","Switch","AdminFooter","AdminNavbar","visible","UncontrolledCollapse","toggler","Auth","classList","add","remove","AuthNavbar","xmlns","preserveAspectRatio","viewBox","points","AuthFooter","App","BrowserRouter","Redirect","exact","from","baseReducer","initialState","reducerDictionary","action","reducer","CONFIRM_LOGIN_STATUS","STORE_LOGIN_INFORMATION","loginReducer","STORE_SERVER_LIST","STORE_SERVER_MASTER_LIST","TOGGLE_CREATE_SERVER_MODAL","STORE_CURRENT_SELECTED_SERVER","CREATE_NEW_SERVER","COUNT","APPLICATION_TEST","serverReducer","count","selectedID","STORE_APPLICATION_LIST","TOGGLE_CREATE_APPLICATION_MODAL","STORE_CURRENT_SELECTED_APPLICATION","CREATE_NEW_APPLICATION","applicationReducer","STORE_REPO_LIST","repoReducer","STORE_SYSTEM_LIST","systemReducer","STORE_LOG_LIST","logReducer","STORE_APPLICATION_INSTANCE_LIST","TOGGLE_CREATE_APPLICATION_INSTANCE_MODAL","STORE_CURRENT_SELECTED_APPLICATION_INSTANCE","applicationInstanceReducer","STORE_EMPLOYEE_LIST","TOGGLE_CREATE_EMPLOYEE_MODAL","STORE_CURRENT_SELECTED_EMPLOYEE","CREATE_NEW_EMPLOYEE","employeeReducer","STORE_CURRENT_SELECTED_PROFILE","CREATE_NEW_PROFILE","profileReducer","currentSelectedProfile","combineReducers","logger","createLogger","storeGlobal","createStore","rootReducer","applyMiddleware","thunkMiddleware","subscribe","ReactDOM","store","getElementById","elements","Rectangle","prototype","draw","left","top","bottom","signX","signY","borderSkipped","ctx","_chart","vm","_view","borderWidth","horizontal","base","height","width","barSize","Math","min","abs","halfStroke","borderLeft","borderRight","borderTop","borderBottom","beginPath","fillStyle","strokeStyle","borderColor","lineWidth","corners","startCorner","cornerAt","corner","moveTo","nextCornerId","radius","lineTo","quadraticCurveTo","fill","stroke","fonts","colors","gray","100","200","300","400","500","600","700","800","900","theme","default","primary","secondary","info","success","danger","warning","black","white","transparent","scales","yAxes","gridLines","zeroLineColor","ticks","callback","tooltips","callbacks","label","item","datasets","datasetIndex","yLabel","content","data1","canvas","labels","data2","defaults","global","maintainAspectRatio","defaultColor","defaultFontColor","defaultFontFamily","defaultFontSize","legend","display","position","usePointStyle","point","line","tension","borderCapStyle","rectangle","arc","enabled","intersect","doughnut","cutoutPercentage","legendCallback","chart","forEach","scaleService","updateScaleDefaults","borderDash","borderDashOffset","drawBorder","drawTicks","zeroLineWidth","zeroLineBorderDash","zeroLineBorderDashOffset","beginAtZero","drawOnChartArea","maxBarThickness","parent"],"mappings":"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","file":"static/js/main.ce237440.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/team-1-800x800.53033970.jpg\";","module.exports = __webpack_public_path__ + \"static/media/profile-cover.e2582654.jpg\";","module.exports = __webpack_public_path__ + \"static/media/team-4-800x800.23007132.jpg\";","module.exports = __webpack_public_path__ + \"static/media/argon-react.f38ddea9.png\";","module.exports = __webpack_public_path__ + \"static/media/argon-react-white.275a2629.png\";","\r\nimport React, { Component } from 'react';\r\n\r\nclass NotFound extends Component {\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div className=\"notfound\">\r\n\t\t\t\t<div className=\"notfound-404\">\r\n\t\t\t\t\t<h1>404</h1>\r\n\t\t\t\t\t<h2>Page not found</h2>\r\n\t\t\t\t</div>\r\n\t\t\t\t<a href=\"/auth/login\">Homepage</a>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default NotFound;","\r\nimport React from 'react';\r\nimport { Link } from \"react-router-dom\";\r\n//  nodejs library to set properties for components\r\n//  import { PropTypes } from \"prop-types\";\r\n\r\n// reactstrap components\r\nimport {\r\n  DropdownMenu,\r\n  DropdownItem,\r\n  UncontrolledDropdown,\r\n  DropdownToggle,\r\n  Media,\r\n  Nav,\r\n} from \"reactstrap\";\r\nconst LayoutAvatar = (props) => {\r\n    let {nameProps = \"\", navProps} = props;\r\n    return (\r\n        <Nav className={navProps}>\r\n            <UncontrolledDropdown nav>\r\n              <DropdownToggle nav className=\"nav-link-icon\">\r\n                <i className=\"ni ni-bell-55\" />\r\n              </DropdownToggle>\r\n              <DropdownMenu\r\n                aria-labelledby=\"navbar-default_dropdown_1\"\r\n                className=\"dropdown-menu-arrow\"\r\n                right\r\n              >\r\n                <DropdownItem>Action</DropdownItem>\r\n                <DropdownItem>Another action</DropdownItem>\r\n                <DropdownItem divider />\r\n                <DropdownItem>Something else here</DropdownItem>\r\n              </DropdownMenu>\r\n            </UncontrolledDropdown>\r\n            <UncontrolledDropdown nav>\r\n              <DropdownToggle nav>\r\n                <Media className=\"align-items-center\">\r\n                  <span className=\"avatar avatar-sm rounded-circle\">\r\n                    <img\r\n                      alt=\"...\"\r\n                      src={require(\"assets/img/theme/team-1-800x800.jpg\")}\r\n                    />\r\n                  </span>\r\n                  <Media className=\"ml-2 d-none d-lg-block\">\r\n                      <span className=\"mb-0 text-sm font-weight-bold text-light\">\r\n                        {nameProps}\r\n                      </span>\r\n                    </Media>\r\n                </Media>\r\n              </DropdownToggle>\r\n              <DropdownMenu className=\"dropdown-menu-arrow\" right>\r\n                <DropdownItem className=\"noti-title\" header tag=\"div\">\r\n                  <h6 className=\"text-overflow m-0\">Welcome!</h6>\r\n                </DropdownItem>\r\n                <DropdownItem to=\"/admin/user-profile\" tag={Link}>\r\n                  <i className=\"ni ni-single-02\" />\r\n                  <span>My profile</span>\r\n                </DropdownItem>\r\n                <DropdownItem to=\"/admin/user-profile\" tag={Link}>\r\n                  <i className=\"ni ni-settings-gear-65\" />\r\n                  <span>Settings</span>\r\n                </DropdownItem>\r\n                <DropdownItem to=\"/admin/user-profile\" tag={Link}>\r\n                  <i className=\"ni ni-calendar-grid-58\" />\r\n                  <span>Activity</span>\r\n                </DropdownItem>\r\n                <DropdownItem to=\"/admin/user-profile\" tag={Link}>\r\n                  <i className=\"ni ni-support-16\" />\r\n                  <span>Support</span>\r\n                </DropdownItem>\r\n                <DropdownItem divider />\r\n                <DropdownItem href=\"#pablo\" onClick={e => e.preventDefault()}>\r\n                  <i className=\"ni ni-user-run\" />\r\n                  <span>Logout</span>\r\n                </DropdownItem>\r\n              </DropdownMenu>\r\n            </UncontrolledDropdown>\r\n          </Nav>\r\n    )\r\n}\r\n\r\nexport default LayoutAvatar;","import React, { Component } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n// reactstrap components\r\nimport {\r\n  Container,\r\n  Form,\r\n  InputGroupText,\r\n  Navbar,\r\n} from \"reactstrap\";\r\n// import LayoutSearchForm from \"./../Layout/LayoutSearchForm.jsx\";\r\nimport LayoutAvatar from \"./../Layout/LayoutAvatar.jsx\";\r\nexport default class NavBar extends Component {\r\n  state = {};\r\n\r\n  render() {\r\n    return (\r\n      <>\r\n        <Navbar\r\n         style={{ backgroundColor: '#800000' }}\r\n          className=\"navbar-top navbar-dark \"\r\n          expand=\"md\"\r\n          id=\"navbar-main\"\r\n        >\r\n          <Container fluid>\r\n            <Form className=\"navbar-search form-inline mr-3 d-none d-md-flex \">\r\n              {/* <InputGroupText>\r\n                <i className=\"fa fa-bars\" aria-hidden=\"true\"></i>\r\n              </InputGroupText> */}\r\n            </Form>\r\n            <Link\r\n              className=\"h4 ml-3 mb-0 text-white text-uppercase d-none d-lg-inline-block\"\r\n              to=\"/\"\r\n            >\r\n              Wisky\r\n            </Link>\r\n            {/* <LayoutSearchForm\r\n              formProps=\"navbar-search form-inline mr-3 d-none d-md-flex ml-lg-auto\"\r\n              inputGroupProps=\"input-group-alternative\"\r\n              inputProps=\"form-control-rounded form-control-prepended text-white\"\r\n            /> */}\r\n            {/* <Form className=\"\">\r\n              <FormGroup className=\"mb-0\">\r\n                <InputGroup className=\"\">\r\n                  <InputGroupAddon addonType=\"append\">\r\n                    <InputGroupText>\r\n                      <i className=\"fa fa-search-plus\" aria-hidden=\"true\"></i>\r\n                    </InputGroupText>\r\n                    <Input type=\"text\" name=\"\" id=\"\" placeholder=\"keyword\" />\r\n                  </InputGroupAddon>\r\n                </InputGroup>\r\n              </FormGroup>\r\n            </Form> */}\r\n            <LayoutAvatar \r\n            navProps=\"align-items-center d-none d-md-flex\"\r\n            nameProps=\"Jessica\"\r\n          />\r\n            \r\n            {/* <Nav className=\"align-items-center d-none d-md-flex\" navbar>\r\n              <UncontrolledDropdown nav>\r\n                <DropdownToggle className=\"pr-0\" nav>\r\n                  <Media className=\"align-items-center\">\r\n                    <span className=\"avatar avatar-sm rounded-circle\">\r\n                      <img\r\n                        alt=\"...\"\r\n                        src={require(\"assets/img/theme/team-4-800x800.jpg\")}\r\n                      />\r\n                    </span>\r\n                    <Media className=\"ml-2 d-none d-lg-block\">\r\n                      <span className=\"mb-0 text-sm font-weight-bold\">\r\n                        Jessica Jones\r\n                      </span>\r\n                    </Media>\r\n                  </Media>\r\n                </DropdownToggle>\r\n                <DropdownMenu className=\"dropdown-menu-arrow mt-5\" right>\r\n                  <DropdownItem className=\"noti-title\" header tag=\"div\">\r\n                    <h6 className=\"text-overflow m-0\">Welcome!</h6>\r\n                  </DropdownItem>\r\n                  <DropdownItem to=\"/admin/user-profile\" tag={Link}>\r\n                    <i className=\"ni ni-single-02\" />\r\n                    <span>My profile</span>\r\n                  </DropdownItem>\r\n                  <DropdownItem to=\"/admin/user-profile\" tag={Link}>\r\n                    <i className=\"ni ni-settings-gear-65\" />\r\n                    <span>Settings</span>\r\n                  </DropdownItem>\r\n                  <DropdownItem to=\"/admin/user-profile\" tag={Link}>\r\n                    <i className=\"ni ni-calendar-grid-58\" />\r\n                    <span>Activity</span>\r\n                  </DropdownItem>\r\n                  <DropdownItem to=\"/admin/user-profile\" tag={Link}>\r\n                    <i className=\"ni ni-support-16\" />\r\n                    <span>Support</span>\r\n                  </DropdownItem>\r\n                  <DropdownItem divider />\r\n                  <DropdownItem href=\"#pablo\" onClick={e => e.preventDefault()}>\r\n                    <i className=\"ni ni-user-run\" />\r\n                    <span>Logout</span>\r\n                  </DropdownItem>\r\n                </DropdownMenu>\r\n              </UncontrolledDropdown>\r\n            </Nav> */}\r\n          </Container>\r\n        </Navbar>\r\n      </>\r\n    );\r\n  }\r\n}\r\n","\n/*eslint-disable*/\nimport React from \"react\";\n\n// reactstrap components\nimport { Container, Row, Col, Nav, NavItem, NavLink } from \"reactstrap\";\n\nclass Footer extends React.Component {\n  render() {\n    return (\n      <footer className=\"footer\">\n        <Row className=\"align-items-center justify-content-xl-between\">\n          <Col xl=\"6\">\n            <div className=\"copyright text-cente4r text-xl-left text-muted\">\n    <h4 color={'#800000'}>© 2018{\" \"}</h4>\n              <a\n                className=\"font-weight-bold ml-1\"\n                href=\"https://www.creative-tim.com?ref=adr-admin-footer\"\n                rel=\"noopener noreferrer\"\n                target=\"_blank\"\n              >\n                 <h4 color={'#800000'}>Creative Tim</h4>\n              </a>\n            </div>\n          </Col>\n\n          <Col xl=\"6\">\n            <Nav className=\"nav-footer justify-content-center justify-content-xl-end\">\n              <NavItem>\n                <NavLink\n                  href=\"https://www.creative-tim.com?ref=adr-admin-footer\"\n                  rel=\"noopener noreferrer\"\n                  target=\"_blank\"\n                >\n                  <h4 color={'#800000'}>Creative Tim</h4> \n                </NavLink>\n              </NavItem>\n\n              <NavItem>\n                <NavLink\n                  href=\"https://www.creative-tim.com/presentation?ref=adr-admin-footer\"\n                  rel=\"noopener noreferrer\"\n                  target=\"_blank\"\n                >\n                   <h4 color={'#800000'}>About Us</h4> \n                </NavLink>\n              </NavItem>\n\n              <NavItem>\n                <NavLink\n                  href=\"http://blog.creative-tim.com?ref=adr-admin-footer\"\n                  rel=\"noopener noreferrer\"\n                  target=\"_blank\"\n                >\n                   <h4 color={'#800000'}>Blog</h4> \n                </NavLink>\n              </NavItem>\n\n              <NavItem>\n                <NavLink\n                  href=\"https://github.com/creativetimofficial/argon-dashboard/blob/master/LICENSE.md?ref=adr-admin-footer\"\n                  rel=\"noopener noreferrer\"\n                  target=\"_blank\"\n                >\n                 <h4 color={'#800000'}>MIT License</h4> \n                </NavLink>\n              </NavItem>\n            </Nav>\n          </Col>\n        </Row>\n      </footer>\n    );\n  }\n}\n\nexport default Footer;\n","export const LoginActionTypes = {\r\n  REQUEST_POSTS: \"REQUEST_POSTS\",\r\n  RECEIVE_USER_INFO: \"RECEIVE_USER_INFO\",\r\n  RECEIVE_LOGIN_AUTHENTICATION: \"RECEIVE_LOGIN_AUTHENTICATION\",\r\n  INVALIDATE_LOGIN_CHECK: \"INVALIDATE_LOGIN_CHECK\",\r\n  CONFIRM_LOGIN_STATUS: \"CONFIRM_LOGIN_STATUS\",\r\n  STORE_LOGIN_INFORMATION: \"STORE_LOGIN_INFORMATION\",\r\n  REQUEST_FETCH_API: \"REQUEST_FETCH_API\"\r\n\r\n};\r\n\r\nexport const ServerActionTypes = {\r\n  REQUEST_FETCH_API: \"REQUEST_FETCH_API\",\r\n  GET_SERVER_LIST: \"GET_SERVER_LIST\",\r\n  STORE_SERVER_LIST: \"STORE_SERVER_LIST\",\r\n\r\n  TOGGLE_CREATE_SERVER_MODAL: \"TOGGLE_CREATE_SERVER_MODAL\",\r\n  TOGGLE_INFORMATION_MODAL: \"TOGGLE_INFORMATION_MODAL\",\r\n\r\n  STORE_CURRENT_SELECTED_SERVER: \"STORE_CURRENT_SELECTED_SERVER\",\r\n  STORE_SERVER_MASTER_LIST: \"STORE_SERVER_MASTER_LIST\",\r\n\r\n\r\n  COUNT: \"COUNT\",\r\n\r\n  APPLICATION_TEST: \"APPLICATION_TEST\",\r\n\r\n  //  CRUD\r\n  CREATE_NEW_SERVER: \"CREATE_NEW_SERVER\",\r\n  UPDATE_SERVER_GENERAL_INFORMATION: \"UPDATE_SERVER_GENERAL_INFORMATION\",\r\n  UPDATE_SERVER_DETAIL: \"UPDATE_SERVER_DETAIL\",\r\n  UPDATE_SERVER_ACCOUNT: \"UPDATE_SERVER_ACCOUNT\",\r\n  UPDATE_SERVER_STATUS: \"UPDATE_SERVER_STATUS\",\r\n\r\n\r\n};\r\n\r\nexport const ApplicationActionTypes = {\r\n  REQUEST_FETCH_API: \"REQUEST_FETCH_API\",\r\n  GET_APPLICATION_LIST: \"GET_APPLICATION_LIST\",\r\n  STORE_APPLICATION_LIST: \"STORE_APPLICATION_LIST\",\r\n\r\n  TOGGLE_CREATE_APPLICATION_MODAL: \"TOGGLE_CREATE_APPLICATION_MODAL\",\r\n  TOGGLE_INFORMATION_MODAL: \"TOGGLE_INFORMATION_MODAL\",\r\n\r\n  STORE_CURRENT_SELECTED_APPLICATION: \"STORE_CURRENT_SELECTED_APPLICATION\",\r\n\r\n  CREATE_NEW_APPLICATION: \"CREATE_NEW_APPLICATION\",\r\n  COUNT: \"COUNT\",\r\n\r\n  //  CRUD\r\n  APPLICATION_TEST: \"APPLICATION_TEST\",\r\n  UPDATE_APPLICATION_INFORMATION: \"UPDATE_APPLICATION_INFORMATION\",\r\n  UPDATE_APPLICATION: \"UPDATE_APPLICATION\",\r\n  UPDATE_APPLICATION_STATUS: \"UPDATE_APPLICATION_STATUS\",\r\n\r\n\r\n};\r\n\r\nexport const RepoActionTypes = {\r\n  REQUEST_FETCH_API: \"REQUEST_FETCH_API\",\r\n  GET_REPO_LIST: \"GET_REPO_LIST\",\r\n  STORE_REPO_LIST: \"STORE_REPO_LIST\",\r\n\r\n  CREATE_NEW_REPO: \"CREATE_NEW_REPO\",\r\n  DELETE_REPO: \"DELETE_REPO\",\r\n}\r\n\r\nexport const SystemActionTypes = {\r\n  REQUEST_FETCH_API: \"REQUEST_FETCH_API\",\r\n  GET_SYSTEM_LIST: \"GET_SYSTEM_LIST\",\r\n  STORE_SYSTEM_LIST: \"STORE_SYSTEM_LIST\",\r\n\r\n  CREATE_NEW_SYSTEM: \"CREATE_NEW_SYSTEM\",\r\n  DELETE_SYSTEM: \"DELETE_SYSTEM\",\r\n}\r\n\r\nexport const LogActionTypes = {\r\n  REQUEST_FETCH_API: \"REQUEST_FETCH_API\",\r\n  GET_LOG_LIST: \"GET_LOG_LIST\",\r\n  STORE_LOG_LIST: \"STORE_LOG_LIST\",\r\n\r\n  CREATE_NEW_LOG: \"CREATE_NEW_LOG\",\r\n  UPDATE_LOG_STATUS: \"UPDATE_LOG_STATUS\",\r\n}\r\n\r\nexport const ApplicationInstanceActionTypes = {\r\n  REQUEST_FETCH_API: \"REQUEST_FETCH_API\",\r\n  GET_APPLICATION_INSTANCE_LIST: \"GET_APPLICATION_INSTANCE_LIST\",\r\n  STORE_APPLICATION_INSTANCE_LIST: \"STORE_APPLICATION_INSTANCE_LIST\",\r\n\r\n  TOGGLE_CREATE_APPLICATION_INSTANCE_MODAL: \"TOGGLE_CREATE_APPLICATION_INSTANCE_MODAL\",\r\n  TOGGLE_INFORMATION_MODAL: \"TOGGLE_INFORMATION_MODAL\",\r\n\r\n  STORE_CURRENT_SELECTED_APPLICATION_INSTANCE: \"STORE_CURRENT_SELECTED_APPLICATION_INSTANCE\",\r\n\r\n  CREATE_NEW_APPLICATION_INSTANCE: \"CREATE_NEW_APPLICATION_INSTANCE\",\r\n\r\n  //  CRUD\r\n  UPDATE_APPLICATION_INSTANCE_INFORMATION: \"UPDATE_APPLICATION_INSTANCE_INFORMATION\",\r\n  UPDATE_APPLICATION_INSTANCE: \"UPDATE_APPLICATION_INSTANCE\",\r\n  UPDATE_APPLICATION_INSTANCE_STATUS: \"UPDATE_APPLICATION_INSTANCE_STATUS\",\r\n\r\n\r\n};\r\n\r\nexport const EmployeeActionTypes = {\r\n  REQUEST_FETCH_API: \"REQUEST_FETCH_API\",\r\n  GET_EMPLOYEE_LIST: \"GET_EMPLOYEE_LIST\",\r\n  STORE_EMPLOYEE_LIST: \"STORE_EMPLOYEE_LIST\",\r\n\r\n  TOGGLE_CREATE_EMPLOYEE_MODAL: \"TOGGLE_CREATE_EMPLOYEE_MODAL\",\r\n  TOGGLE_INFORMATION_MODAL: \"TOGGLE_INFORMATION_MODAL\",\r\n\r\n  STORE_CURRENT_SELECTED_EMPLOYEE: \"STORE_CURRENT_SELECTED_EMPLOYEE\",\r\n\r\n  ASSIGN_EMPLOYEE_INTO_PROJECT: \"ASSIGN_EMPLOYEE_INTO_PROJECT\",\r\n\r\n  //  CRUD\r\n  UPDATE_EMPLOYEE_INFORMATION: \"UPDATE_EMPLOYEE_INFORMATION\",\r\n  CREATE_NEW_EMPLOYEE: \"CREATE_NEW_EMPLOYEE\",\r\n\r\n};\r\n\r\nexport const ProfileActionTypes = {\r\n  REQUEST_FETCH_API: \"REQUEST_FETCH_API\",\r\n  GET_PROFILE_LIST: \"GET_PROFILE_LIST\",\r\n  STORE_PROFILE: \"STORE_PROFILE\",\r\n\r\n  TOGGLE_CREATE_PROFILE_MODAL: \"TOGGLE_CREATE_PROFILE_MODAL\",\r\n  TOGGLE_INFORMATION_MODAL: \"TOGGLE_INFORMATION_MODAL\",\r\n  //  LOGIN \r\n  LOGIN: \"LOGIN\",\r\n  REQUEST_RESET_PASSWORD: \"REQUEST_RESET_PASSWORD\",\r\n  CHANGE_PASSWORD: \"CHANGE_PASSWORD\",\r\n\r\n  //  TOGGLE PROFILE PAGE\r\n  TOGGLE_PROFILE_COMPONENT: \"TOGGLE_PROFILE_COMPONENT\",\r\n\r\n};\r\n","export default {\r\n  //HOST API\r\n  // BASE_API_URL: \"http://apiunilognvs.unicode.edu.vn\",\r\n  // BASE_API_URL: \"http://localhost:51635\",\r\n   BASE_API_URL: \"http://4b5eebf0.ngrok.io\",\r\n\r\n  // LOGIN_API_URL :  \"api/login\",\r\n  LOGIN_API_URL: \"api/accounts/login\",\r\n\r\n  ACCOUNT_API_URL: \"api/accounts\",\r\n\r\n  SERVER_API_URL: \"api/servers\",\r\n\r\n  SERVER_ACCOUNT_URL: \"api/server_accounts\",\r\n\r\n  APPLICATION_API_URL: \"api/applications\",\r\n\r\n  // ENTITY_API_URL :  \"/api/entity\",\r\n\r\n  APPLICATION_INSTANCE_API_URL :  \"api/application_instances\",\r\n\r\n  LOG_API_URL: \"api/logs\",\r\n\r\n  LOG_ACTIVITY_API_URL: \"api/activity_logs\",\r\n\r\n  REPO_API_URL: \"api/repos\",\r\n\r\n  SYSTEM_API_URL: \"api/systems\",\r\n\r\n  SYSTEM_API_DEACTIVE: \"api/systems/deactivation\",\r\n\r\n  SYSTEM_INSTANCE_API_URL: \"api/system_instances\",\r\n\r\n  // COMPANY_API_URL :  \"api/company\",\r\n\r\n  // DEVOPS_API_URL :  \"api/devops\",\r\n\r\n  // USECASE_API_URL :  \"api/usecase\",\r\n  SERVER_OS_API_URL: \"api/enums/server_os\",\r\n\r\n  SERVER_TYPE_API_URL: \"api/enums/server_type\"\r\n};\r\n","import {\r\n  LoginActionTypes\r\n} from \"../constants\";\r\nimport fetch from \"cross-fetch\";\r\nimport APISettings from \"../Url/APISettings\";\r\n\r\n// const requestLoginFetch = requestFetching => {\r\n//   return {\r\n//     type: LoginActionTypes.REQUEST_POSTS,\r\n//     requestFetching: requestFetching\r\n//   };\r\n// };\r\n\r\nconst confirmLoginStatusActionCreator = status => {\r\n  return {\r\n    type: LoginActionTypes.CONFIRM_LOGIN_STATUS,\r\n    payload: status\r\n  }\r\n}\r\n\r\nconst storeLoginInformationActionCreator = info => {\r\n  return {\r\n    type: LoginActionTypes.STORE_LOGIN_INFORMATION,\r\n    payload: info\r\n  }\r\n}\r\n\r\n//  Interactive with reducer section\r\nconst requestGetDataFetch = status => {\r\n  return {\r\n    type: LoginActionTypes.REQUEST_FETCH_API,\r\n    payload: status\r\n  };\r\n};\r\n\r\n\r\n//  login\r\nconst login = ({\r\n  email = \"string\",\r\n  password = \"string\"\r\n}) => {\r\n  return async (dispatch, getState) => {\r\n    try {\r\n      //  inform store we are going to fetch some data\r\n      await dispatch(requestGetDataFetch(true));\r\n\r\n      // if fetching status of login component is true\r\n      if (getState().Login.fetchStatus) {\r\n        let loginModel = {\r\n          email,\r\n          password\r\n        }\r\n\r\n\r\n        //  call API to update general information \r\n        const fetchRequest = await fetch(\r\n          `${APISettings.BASE_API_URL}/${APISettings.ACCOUNT_API_URL}/login`, {\r\n            method: \"post\",\r\n            headers: {\r\n              \"Content-Type\": \"application/json\",\r\n            },\r\n            body: JSON.stringify(loginModel),\r\n          }\r\n        );\r\n        console.log(\r\n          \"Response data after requesting get data: \" +\r\n          JSON.stringify(fetchRequest)\r\n        );\r\n\r\n        // the fetch() API only rejects a promise when\r\n        //  a “network error is encountered, although this usually means permissions issues or similar.”\r\n        //  =>  response have ok for other invalid HTTP response\r\n        if (!fetchRequest.ok) {\r\n          throw Error(fetchRequest.statusText);\r\n        }\r\n        if (fetchRequest.status === 401) {\r\n          localStorage.clear();\r\n          throw Error(fetchRequest.statusText);\r\n        }\r\n\r\n        //response data\r\n        const result = await fetchRequest.json();\r\n\r\n        localStorage.setItem(\"userRole\", result.role);\r\n        localStorage.setItem(\"userEmail\", result.email);\r\n        localStorage.setItem(\"userAuthToken\", result.token);\r\n        localStorage.setItem(\"userId\", result.id);\r\n\r\n        //  inform user is already login\r\n        await dispatch(confirmLoginStatusActionCreator(1));\r\n\r\n        //  store login infomation\r\n        await dispatch(storeLoginInformationActionCreator(result));\r\n      }\r\n    } catch (error) {\r\n      console.log(\"An error occurred in login action \", error);\r\n    } finally {\r\n      //  wherether call API success or fail, inform store fetching status request is done\r\n      dispatch(requestGetDataFetch(false));\r\n    }\r\n  };\r\n};\r\n\r\nconst logout = () => {\r\n  return async (dispatch, getState) => {\r\n    localStorage.clear();\r\n    //  inform user is loggin\r\n    await dispatch(confirmLoginStatusActionCreator(2));\r\n  }\r\n}\r\n// const checkLogin = (state) => {\r\n//   return async (dispatch, getState) => {\r\n//     localStorage.clear();\r\n//     //  inform user is loggin\r\n//     await dispatch(confirmLoginStatusActionCreator(state));\r\n//   }\r\n// }\r\n\r\nexport default {\r\n  login: login,\r\n  logout: logout,\r\n  // checkLogin: checkLogin\r\n};","import {\r\n  ServerActionTypes\r\n} from \"../constants\";\r\nimport fetch from \"cross-fetch\";\r\nimport APISettings from \"../Url/APISettings\";\r\n\r\n// const today = new Date(Date.now());\r\n\r\n\r\n//  Action creator section\r\nconst storeServerListActionCreator = (serverList = []) => {\r\n  return {\r\n    type: ServerActionTypes.STORE_SERVER_LIST,\r\n    payload: serverList\r\n  };\r\n};\r\n\r\nconst storeServerMasterListActionCreator = (currentDataList = []) => {\r\n  //console.log(\"storeServerMasterListActionCreator\", currentDataList);\r\n  let servermasterList = [];\r\n  if (currentDataList.length > 0) {\r\n    //console.log(\"storeServerMasterListActionCreator 2\", currentDataList);\r\n    currentDataList.map(server => {\r\n      return servermasterList.push({\r\n        id: server.id,\r\n        name: server.name\r\n      });\r\n    });\r\n  }\r\n\r\n  return {\r\n    type: ServerActionTypes.STORE_SERVER_MASTER_LIST,\r\n    payload: servermasterList\r\n  };\r\n};\r\n\r\nconst storeCurrentSelectedServerActionCreater = id => {\r\n  return {\r\n    type: ServerActionTypes.STORE_CURRENT_SELECTED_SERVER,\r\n    payload: id\r\n  };\r\n};\r\n\r\n//  Interactive with reducer section\r\nconst requestGetDataFetch = status => {\r\n  return {\r\n    type: ServerActionTypes.REQUEST_FETCH_API,\r\n    payload: status\r\n  };\r\n};\r\n\r\nconst getServerList = () => {\r\n  return async (dispatch, getState) => {\r\n    try {\r\n      //  inform store we are going to fetch some data\r\n      await dispatch(requestGetDataFetch(true));\r\n      // if fetching status of Server component is true\r\n      if (getState().Server.fetchStatus) {\r\n        console.log(\"State: \" + JSON.stringify(getState().Login.loginInfor.token));\r\n\r\n        //  get list server from API\r\n        const fetchRequest = await fetch(\r\n          `${APISettings.BASE_API_URL}/${APISettings.SERVER_API_URL}/?ref_fields=server_detail%2Crepo%2Cserver_account`, {\r\n            method: \"get\",\r\n            headers: {\r\n              \"Content-Type\": \"application/json\",\r\n              Authorization: \"bearer \" + getState().Login.loginInfor.token\r\n            }\r\n          }\r\n        );\r\n        console.log(\r\n          \"Response data after requesting get data: \" +\r\n          JSON.stringify(fetchRequest)\r\n        );\r\n\r\n        // the fetch() API only rejects a promise when\r\n        //  a “network error is encountered, although this usually means permissions issues or similar.”\r\n        //  =>  response have ok for other invalid HTTP response\r\n        if (!fetchRequest.ok) {\r\n          throw Error(fetchRequest.statusText);\r\n        }\r\n        if (fetchRequest.status === 401) {\r\n          localStorage.clear();\r\n          throw Error(fetchRequest.statusText);\r\n        }\r\n        //  response data\r\n        const result = await fetchRequest.json();\r\n        // console.log(\r\n        //   \"Data after requesting get data: \" + JSON.stringify(result)\r\n        // );\r\n\r\n        //  store payload data into store\r\n        await dispatch(storeServerListActionCreator(result));\r\n\r\n        //  store servers regist as server master\r\n        await dispatch(\r\n          storeServerMasterListActionCreator(getState().Server.currentDataList)\r\n        );\r\n      }\r\n    } catch (error) {\r\n      console.log(\"An error occurred in server action \", error);\r\n    } finally {\r\n      //  wherether call API success or fail, inform store fetching status request is done\r\n      dispatch(requestGetDataFetch(false));\r\n    }\r\n  };\r\n};\r\n\r\nconst toggleCreateServerModal = (dispatch, getState) => {\r\n  return dispatch({\r\n    type: ServerActionTypes.TOGGLE_CREATE_SERVER_MODAL\r\n  });\r\n};\r\n\r\nconst toggleServerInformationModal = dispatch => {\r\n  return dispatch({\r\n    type: ServerActionTypes.TOGGLE_INFORMATION_MODAL\r\n  });\r\n};\r\n\r\nconst storeCurrentSelectedServer = id => {\r\n  return async (dispatch, getState) => {\r\n    await dispatch(storeCurrentSelectedServerActionCreater(id));\r\n  };\r\n};\r\n\r\n//  Create section\r\nconst createNewServer = ({\r\n  name = \"string\",\r\n  type = 1,\r\n  os = 1,\r\n  server_code = \"string\"\r\n}) => {\r\n  return async (dispatch, getState) => {\r\n    try {\r\n      //  inform store we are going to fetch some data\r\n      await dispatch(requestGetDataFetch(true));\r\n\r\n      // if fetching status of Server component is true\r\n      if (getState().Server.fetchStatus) {\r\n        let createModel = {\r\n          name,\r\n          type,\r\n          os,\r\n          server_code\r\n        }\r\n\r\n        console.log(createModel)\r\n        //  call API to update general information \r\n        const fetchRequest = await fetch(\r\n          `${APISettings.BASE_API_URL}/${APISettings.SERVER_API_URL}`, {\r\n            method: \"post\",\r\n            headers: {\r\n              \"Content-Type\": \"application/json\",\r\n              Authorization: \"bearer \" + getState().Login.loginInfor.token\r\n            },\r\n            body: JSON.stringify(createModel),\r\n          }\r\n        );\r\n        console.log(\r\n          \"Response data after requesting get data: \" +\r\n          JSON.stringify(fetchRequest)\r\n        );\r\n\r\n        // the fetch() API only rejects a promise when\r\n        //  a “network error is encountered, although this usually means permissions issues or similar.”\r\n        //  =>  response have ok for other invalid HTTP response\r\n        if (!fetchRequest.ok) {\r\n          throw Error(fetchRequest.statusText);\r\n        }\r\n        if (fetchRequest.status === 401) {\r\n          localStorage.clear();\r\n          throw Error(fetchRequest.statusText);\r\n        }\r\n        //  response data\r\n        const result = await fetchRequest.json();\r\n        console.log(\r\n          \"Data after requesting get data: \" + JSON.stringify(result)\r\n        );\r\n\r\n        //  store payloaddata into store\r\n        await dispatch(storeServerListActionCreator(result));\r\n\r\n        //  store servers regist as server master\r\n        await dispatch(\r\n          storeServerMasterListActionCreator(getState().Server.currentDataList)\r\n        );\r\n        // console.log(\r\n        //   \"State after requesting get data: \" +\r\n        //     JSON.stringify(getState().Server)\r\n        // );\r\n      }\r\n    } catch (error) {\r\n      console.log(\"An error occurred in server action \", error);\r\n    } finally {\r\n      //  wherether call API success or fail, inform store fetching status request is done\r\n      dispatch(requestGetDataFetch(false));\r\n      // console.log(\r\n      //   \"State after finish requesting fetch: \" + JSON.stringify(getState().Server)\r\n      // );\r\n    }\r\n  };\r\n};\r\n\r\n//  Update Server General Information\r\nconst updateServerGeneralInformation = ({\r\n  id = 0,\r\n  server_master = 0,\r\n  name = \"string\",\r\n  ip_address = \"string\",\r\n  type = 0,\r\n  os = 0,\r\n  server_url = \"string\",\r\n  description = \"string\",\r\n  expire_date = new Date(Date.now()),\r\n  server_code = \"string\"\r\n}) => {\r\n  return async (dispatch, getState) => {\r\n    try {\r\n      //  inform store we are going to fetch some data\r\n      await dispatch(requestGetDataFetch(true));\r\n\r\n      // if fetching status of Server component is true\r\n      if (getState().Server.fetchStatus) {\r\n        console.log(\"State: \" + JSON.stringify(getState().Login.loginInfor.token));\r\n        let updateModel = {\r\n          id,\r\n          server_master,\r\n          name,\r\n          ip_address,\r\n          type,\r\n          os,\r\n          server_url,\r\n          description,\r\n          expire_date,\r\n          server_code,\r\n          server_detail: null,\r\n        }\r\n\r\n\r\n        //  call API to update general information \r\n        const fetchRequest = await fetch(\r\n          `${APISettings.BASE_API_URL}/${APISettings.SERVER_API_URL}`, {\r\n            method: \"PUT\",\r\n            headers: {\r\n              \"Content-Type\": \"application/json\",\r\n              Authorization: \"bearer \" + getState().Login.loginInfor.token\r\n            },\r\n            body: JSON.stringify(updateModel),\r\n          }\r\n        );\r\n        console.log(\r\n          \"Response data after requesting get data: \" +\r\n          JSON.stringify(fetchRequest)\r\n        );\r\n\r\n        // the fetch() API only rejects a promise when\r\n        //  a “network error is encountered, although this usually means permissions issues or similar.”\r\n        //  =>  response have ok for other invalid HTTP response\r\n        if (!fetchRequest.ok) {\r\n          throw Error(fetchRequest.statusText);\r\n        }\r\n        if (fetchRequest.status === 401) {\r\n          localStorage.clear();\r\n          throw Error(fetchRequest.statusText);\r\n        }\r\n        //  response data\r\n        const result = await fetchRequest.json();\r\n        console.log(\r\n          \"Data after requesting get data: \" + JSON.stringify(result)\r\n        );\r\n\r\n        //  store payloaddata into store\r\n        await dispatch(storeServerListActionCreator(result));\r\n\r\n        //  store servers regist as server master\r\n        await dispatch(\r\n          storeServerMasterListActionCreator(getState().Server.currentDataList)\r\n        );\r\n        // console.log(\r\n        //   \"State after requesting get data: \" +\r\n        //     JSON.stringify(getState().Server)\r\n        // );\r\n      }\r\n    } catch (error) {\r\n      console.log(\"An error occurred in server action \", error);\r\n    } finally {\r\n      //  wherether call API success or fail, inform store fetching status request is done\r\n      dispatch(requestGetDataFetch(false));\r\n      // console.log(\r\n      //   \"State after finish requesting fetch: \" + JSON.stringify(getState().Server)\r\n      // );\r\n    }\r\n  };\r\n};\r\n\r\n//  Update Server Status \r\nconst updateServerStatus = (\r\n  id = 0,\r\n  active = true,\r\n) => {\r\n  return async (dispatch, getState) => {\r\n    try {\r\n      //  inform store we are going to fetch some data\r\n      await dispatch(requestGetDataFetch(true));\r\n\r\n      // if fetching status of Server component is true\r\n      if (getState().Server.fetchStatus) {\r\n        console.log(\"State: \" + JSON.stringify(getState().Login.loginInfor.token));\r\n\r\n        //  update server detail\r\n        let updateModel = {\r\n          id: id,\r\n          active: active,\r\n          change_status: true,\r\n          server_detail: null\r\n        }\r\n        // let updateModel = {\r\n        //   \"client_id\": 0,\r\n        //   \"service_id\": 0\r\n        // }\r\n\r\n        const fetchRequest = await fetch(\r\n          `${APISettings.BASE_API_URL}/${APISettings.SERVER_API_URL}`, {\r\n            mode: \"cors\",\r\n            method: \"patch\",\r\n            headers: {\r\n              Accept: 'application/json',\r\n              \"Content-Type\": \"application/json\",\r\n              Authorization: \"bearer \" + getState().Login.loginInfor.token,\r\n              // \"Access-Control-Allow-Origin\": \"*\"\r\n            },\r\n            body: JSON.stringify(updateModel)\r\n          }\r\n        );\r\n        console.log(\r\n          \"Response data after requesting get data: \" +\r\n          JSON.stringify(fetchRequest)\r\n        );\r\n\r\n        // the fetch() API only rejects a promise when\r\n        //  a “network error is encountered, although this usually means permissions issues or similar.”\r\n        //  =>  response have ok for other invalid HTTP response\r\n        if (!fetchRequest.ok) {\r\n          console.log(JSON.stringify(fetchRequest));\r\n          throw Error(fetchRequest.statusText);\r\n        }\r\n        if (fetchRequest.status === 401) {\r\n          localStorage.clear();\r\n          throw Error(fetchRequest.statusText);\r\n        }\r\n        // const fetchGetRequest = await fetch(\r\n        //   `${APISettings.BASE_API_URL}/${APISettings.SERVER_API_URL}/?ref_fields=server_detail%2Crepo%2Cserver_account`, {\r\n        //     method: \"get\",\r\n        //     headers: {\r\n        //       \"Content-Type\": \"application/json\",\r\n        //       Authorization: \"bearer \" + getState().Login.loginInfor.token\r\n        //     }\r\n        //   }\r\n        // );\r\n\r\n        // // the fetch() API only rejects a promise when\r\n        // //  a “network error is encountered, although this usually means permissions issues or similar.”\r\n        // //  =>  response have ok for other invalid HTTP response\r\n        // if (!fetchGetRequest.ok) {\r\n        //   throw Error(fetchGetRequest.statusText);\r\n        // }\r\n        // if (fetchGetRequest.status === 401) {\r\n        //   localStorage.clear();\r\n        //   throw Error(fetchGetRequest.statusText);\r\n        // }\r\n        // //  response data\r\n        // const getResult = await fetchGetRequest.json();\r\n        // // console.log(\r\n        // //   \"Data after requesting get data: \" + JSON.stringify(result)\r\n        // // );\r\n\r\n        // //  store payload data into store\r\n        // await dispatch(storeServerListActionCreator(getResult));\r\n\r\n        // //  store servers regist as server master\r\n        // await dispatch(\r\n        //   storeServerMasterListActionCreator(getState().Server.currentDataList)\r\n        // );\r\n\r\n      }\r\n    } catch (error) {\r\n      console.log(\"An error occurred in server action \", error);\r\n    } finally {\r\n      //  wherether call API success or fail, inform store fetching status request is done\r\n      dispatch(requestGetDataFetch(false));\r\n      //  recall getting server list after update\r\n    }\r\n  };\r\n}\r\n\r\n//  Update Server Detail \r\nconst updateServerDetail = (\r\n  server_detail_id = 0,\r\n  id = 0,\r\n  disk1 = \"\",\r\n  disk2 = \"\",\r\n  disk3 = \"\",\r\n  volume_disk1 = \"\",\r\n  volume_disk2 = \"\",\r\n  volume_disk3 = \"\"\r\n) => {\r\n  return async (dispatch, getState) => {\r\n    try {\r\n      //  inform store we are going to fetch some data\r\n      await dispatch(requestGetDataFetch(true));\r\n\r\n      // if fetching status of Server component is true\r\n      if (getState().Server.fetchStatus) {\r\n        console.log(\"State: \" + JSON.stringify(getState().Login.loginInfor.token));\r\n\r\n        //  update server detail\r\n        let updateModel = {\r\n          id: id,\r\n          active: true,\r\n          change_status: false,\r\n          server_detail: {\r\n            id: server_detail_id,\r\n            server_id: id,\r\n            disk1: disk1,\r\n            volume_disk1: volume_disk1,\r\n            disk2: disk2,\r\n            volume_disk2: volume_disk2,\r\n            disk3: disk3,\r\n            volume_disk3: volume_disk3,\r\n            active: true\r\n          }\r\n        }\r\n        const fetchRequest = await fetch(\r\n          `${APISettings.BASE_API_URL}/${APISettings.SERVER_API_URL}`, {\r\n            method: \"patch\",\r\n            headers: {\r\n              \"Content-Type\": \"application/json\",\r\n              Authorization: \"bearer \" + getState().Login.loginInfor.token\r\n            },\r\n            body: JSON.stringify(updateModel)\r\n          }\r\n        );\r\n        console.log(\r\n          \"Response data after requesting get data: \" +\r\n          JSON.stringify(fetchRequest)\r\n        );\r\n\r\n        // the fetch() API only rejects a promise when\r\n        //  a “network error is encountered, although this usually means permissions issues or similar.”\r\n        //  =>  response have ok for other invalid HTTP response\r\n        if (!fetchRequest.ok) {\r\n          throw Error(fetchRequest.statusText);\r\n        }\r\n        if (fetchRequest.status === 401) {\r\n          localStorage.clear();\r\n          throw Error(fetchRequest.statusText);\r\n        }\r\n      }\r\n    } catch (error) {\r\n      console.log(\"An error occurred in server action \", error);\r\n    } finally {\r\n      //  wherether call API success or fail, inform store fetching status request is done\r\n      dispatch(requestGetDataFetch(false));\r\n    }\r\n  };\r\n}\r\n\r\n//  Update Server Account \r\nconst updateServerAccount = ({\r\n  server_id = 0,\r\n  username = \"\",\r\n  password = \"\"\r\n}) => {\r\n  return async (dispatch, getState) => {\r\n    try {\r\n      //  inform store we are going to fetch some data\r\n      await dispatch(requestGetDataFetch(true));\r\n\r\n      // if fetching status of Server component is true\r\n      if (getState().Server.fetchStatus) {\r\n        console.log(\"State: \" + JSON.stringify(getState().Login.loginInfor.token));\r\n\r\n        //  update server account\r\n        let updateModel = {\r\n          \"server_id\": server_id,\r\n          \"username\": username,\r\n          \"password\": password\r\n        }\r\n        const fetchRequest = await fetch(\r\n          `${APISettings.BASE_API_URL}/${APISettings.SERVER_ACCOUNT_URL}`, {\r\n            method: \"put\",\r\n            headers: {\r\n              \"Content-Type\": \"application/json\",\r\n              Authorization: \"bearer \" + getState().Login.loginInfor.token\r\n            },\r\n            body: JSON.stringify(updateModel)\r\n          }\r\n        );\r\n        console.log(\r\n          \"Response data after requesting get data: \" +\r\n          JSON.stringify(fetchRequest)\r\n        );\r\n\r\n        // the fetch() API only rejects a promise when\r\n        //  a “network error is encountered, although this usually means permissions issues or similar.”\r\n        //  =>  response have ok for other invalid HTTP response\r\n        if (!fetchRequest.ok) {\r\n          throw Error(fetchRequest.statusText);\r\n        }\r\n        if (fetchRequest.status === 401) {\r\n          localStorage.clear();\r\n          throw Error(fetchRequest.statusText);\r\n        }\r\n      }\r\n    } catch (error) {\r\n      console.log(\"An error occurred in server action \", error);\r\n    } finally {\r\n      //  wherether call API success or fail, inform store fetching status request is done\r\n      dispatch(requestGetDataFetch(false));\r\n    }\r\n  };\r\n}\r\n\r\nexport default {\r\n  getData: getServerList,\r\n  createNewServer: createNewServer,\r\n  toggleCreateModal: toggleCreateServerModal,\r\n  toggleInformationModal: toggleServerInformationModal,\r\n  storeCurrentSelectedServer: storeCurrentSelectedServer,\r\n  updateServerGeneralInformation: updateServerGeneralInformation,\r\n  updateServerStatus: updateServerStatus,\r\n  updateServerDetail: updateServerDetail,\r\n  updateServerAccount: updateServerAccount,\r\n\r\n};","import {\r\n  ApplicationActionTypes, ProfileActionTypes\r\n} from \"../constants\";\r\nimport fetch from \"cross-fetch\";\r\nimport APISettings from \"../Url/APISettings\";\r\n\r\n// const today = new Date(Date.now());\r\n\r\n\r\n//  Action creator section\r\nconst storeApplicationListActionCreator = (ApplicationList = []) => {\r\n  return {\r\n    type: ApplicationActionTypes.STORE_APPLICATION_LIST,\r\n    payload: ApplicationList\r\n  };\r\n};\r\n\r\nconst storeCurrentSelectedApplicationActionCreater = id => {\r\n  return {\r\n    type: ApplicationActionTypes.STORE_CURRENT_SELECTED_APPLICATION,\r\n    payload: id\r\n  };\r\n};\r\n\r\n//  Interactive with reducer section\r\nconst requestGetDataFetch = status => {\r\n  return {\r\n    type: ApplicationActionTypes.REQUEST_FETCH_API,\r\n    payload: status\r\n  };\r\n};\r\n\r\nconst getApplicationList = () => {\r\n  \r\n  return async (dispatch, getState) => {\r\n    try {\r\n      //  inform store we are going to fetch some data\r\n      await dispatch(requestGetDataFetch(true));\r\n      // if fetching status of Application component is true\r\n      if (getState().Application.fetchStatus) {\r\n        console.log(\"State: \" + JSON.stringify(getState().Login.loginInfor.token));\r\n\r\n        //  get list Application from API\r\n        const fetchRequest = await fetch(\r\n          `${APISettings.BASE_API_URL}/${APISettings.APPLICATION_API_URL}?ref_fields=systems%2Crepo`, {\r\n            method: \"get\",\r\n            headers: {\r\n              \"Content-Type\": \"application/json\",\r\n              Authorization: \"bearer \" + getState().Login.loginInfor.token\r\n            }\r\n          }\r\n        );\r\n        console.log(\r\n          \"Response data after requesting get data: \" +\r\n          JSON.stringify(fetchRequest)\r\n        );\r\n\r\n        // the fetch() API only rejects a promise when\r\n        //  a “network error is encountered, although this usually means permissions issues or similar.”\r\n        //  =>  response have ok for other invalid HTTP response\r\n        if (!fetchRequest.ok) {\r\n          throw Error(fetchRequest.statusText);\r\n        }\r\n        if (fetchRequest.status === 401) {\r\n          localStorage.clear();\r\n          throw Error(fetchRequest.statusText);\r\n        }\r\n        //  response data\r\n        const result = await fetchRequest.json();\r\n        // console.log(\r\n        //   \"Data after requesting get data: \" + JSON.stringify(result)\r\n        // );\r\n\r\n        //  store payload data into store\r\n        await dispatch(storeApplicationListActionCreator(result));\r\n\r\n      }\r\n    } catch (error) {\r\n      console.log(\"An error occurred in Application action \", error);\r\n    } finally {\r\n      //  wherether call API success or fail, inform store fetching status request is done\r\n      dispatch(requestGetDataFetch(false));\r\n    }\r\n  };\r\n};\r\n\r\nconst toggleCreateApplicationModal = (dispatch, getState) => {\r\n  return dispatch({\r\n    type: ApplicationActionTypes.TOGGLE_CREATE_APPLICATION_MODAL\r\n  });\r\n};\r\n\r\nconst toggleApplicationInformationModal = dispatch => {\r\n  return dispatch({\r\n    type: ApplicationActionTypes.TOGGLE_INFORMATION_MODAL\r\n  });\r\n};\r\n\r\nconst storeCurrentSelectedApplication = id => {\r\n  return async (dispatch, getState) => {\r\n    await dispatch(storeCurrentSelectedApplicationActionCreater(id));\r\n  };\r\n};\r\n\r\n//  Create section\r\nconst createNewApplication = ({\r\n  start_date = new Date(Date.now()),\r\n  name = \"string\",\r\n  category = 1,\r\n  origin = \"I\",\r\n  type = \"N\",\r\n  priority = 1,\r\n  status = 1\r\n}) => {\r\n  return async (dispatch, getState) => {\r\n    try {\r\n      //  inform store we are going to fetch some data\r\n      await dispatch(requestGetDataFetch(true));\r\n\r\n      // if fetching status of Application component is true\r\n      if (getState().Application.fetchStatus) {\r\n        let createModel = {\r\n          start_date,\r\n          name,\r\n          category,\r\n          origin,\r\n          type,\r\n          priority,\r\n          status\r\n        }\r\n\r\n        console.log(createModel)\r\n        //  call API to update general information \r\n        const fetchRequest = await fetch(\r\n          `${APISettings.BASE_API_URL}/${APISettings.APPLICATION_API_URL}`, {\r\n            method: \"post\",\r\n            headers: {\r\n              \"Content-Type\": \"application/json\",\r\n              Authorization: \"bearer \" + getState().Login.loginInfor.token\r\n            },\r\n            body: JSON.stringify(createModel),\r\n          }\r\n        );\r\n        console.log(\r\n          \"Response data after requesting get data: \" +\r\n          JSON.stringify(fetchRequest)\r\n        );\r\n\r\n        // the fetch() API only rejects a promise when\r\n        //  a “network error is encountered, although this usually means permissions issues or similar.”\r\n        //  =>  response have ok for other invalid HTTP response\r\n        if (!fetchRequest.ok) {\r\n          throw Error(fetchRequest.statusText);\r\n        }\r\n        if (fetchRequest.status === 401) {\r\n          localStorage.clear();\r\n          throw Error(fetchRequest.statusText);\r\n        }\r\n        //  response data\r\n        const result = await fetchRequest.json();\r\n      }\r\n    } catch (error) {\r\n      console.log(\"An error occurred in Application action \", error);\r\n    } finally {\r\n      //  wherether call API success or fail, inform store fetching status request is done\r\n      dispatch(requestGetDataFetch(false));\r\n      // console.log(\r\n      //   \"State after finish requesting fetch: \" + JSON.stringify(getState().Application)\r\n      // );\r\n    }\r\n  };\r\n};\r\n\r\n//  Update Application General Information\r\nconst updateApplicationGeneralInformation = ({\r\n  id = 0,\r\n  system_id = 0,\r\n  name = \"string\",\r\n  description = \"string\",\r\n  note = \"string\",\r\n  start_date = new Date(Date.now()),\r\n  end_date = new Date(Date.now()),\r\n  category = 0,\r\n  stage = 0,\r\n  origin = \"string\",\r\n  type = \"string\",\r\n  source_code_url = \"string\",\r\n  technologies = \"string\",\r\n  priority = 0,\r\n  status = 0\r\n}) => {\r\n  return async (dispatch, getState) => {\r\n    try {\r\n      //  inform store we are going to fetch some data\r\n      await dispatch(requestGetDataFetch(true));\r\n      // if fetching status of Application component is true\r\n      if (getState().Application.fetchStatus) {\r\n        console.log(\"State: \" + JSON.stringify(getState().Login.loginInfor.token));\r\n        let updateModel = {\r\n          id,\r\n          system_id,\r\n          name,\r\n          description,\r\n          note,\r\n          start_date,\r\n          end_date,\r\n          category,\r\n          stage,\r\n          origin,\r\n          type,\r\n          source_code_url,\r\n          technologies,\r\n          priority,\r\n          status\r\n        }\r\n\r\nconsole.log(\"111111 \" +JSON.stringify(updateModel));\r\n        //  call API to update general information \r\n        const fetchRequest = await fetch(\r\n          `${APISettings.BASE_API_URL}/${APISettings.APPLICATION_API_URL}`, {\r\n            method: \"PUT\",\r\n            headers: {\r\n              \"Content-Type\": \"application/json\",\r\n              Authorization: \"bearer \" + getState().Login.loginInfor.token\r\n            },\r\n            body: JSON.stringify(updateModel),\r\n          }\r\n        );\r\n        console.log(\r\n          \"Response data after requesting get data: \" +\r\n          JSON.stringify(fetchRequest)\r\n        );\r\n\r\n        // the fetch() API only rejects a promise when\r\n        //  a “network error is encountered, although this usually means permissions issues or similar.”\r\n        //  =>  response have ok for other invalid HTTP response\r\n        if (!fetchRequest.ok) {\r\n          throw Error(fetchRequest.statusText);\r\n        }\r\n        if (fetchRequest.status === 401) {\r\n          localStorage.clear();\r\n          throw Error(fetchRequest.statusText);\r\n        }\r\n        //  response data\r\n        // const result = await fetchRequest.json();\r\n        // console.log(\r\n        //   \"Data after requesting get data: \" + JSON.stringify(result)\r\n        // );\r\n\r\n        //  store payloaddata into store\r\n        // await dispatch(storeApplicationListActionCreator(result));\r\n        // console.log(\r\n        //   \"State after requesting get data: \" +\r\n        //     JSON.stringify(getState().Application)\r\n        // );\r\n      }\r\n    } catch (error) {\r\n      console.log(\"An error occurred in Application action \", error);\r\n    } finally {\r\n      //  wherether call API success or fail, inform store fetching status request is done\r\n      dispatch(requestGetDataFetch(false));\r\n      // console.log(\r\n      //   \"State after finish requesting fetch: \" + JSON.stringify(getState().Application)\r\n      // );\r\n    }\r\n  };\r\n};\r\n\r\n//  Update Application Status \r\nconst updateApplicationStatus = (\r\n  id = 0,\r\n  active = true,\r\n) => {\r\n  return async (dispatch, getState) => {\r\n    try {\r\n      //  inform store we are going to fetch some data\r\n      await dispatch(requestGetDataFetch(true));\r\n\r\n      // if fetching status of Application component is true\r\n      if (getState().Application.fetchStatus) {\r\n        console.log(\"State: \" + JSON.stringify(getState().Login.loginInfor.token));\r\n\r\n        //  update Application detail\r\n        let updateModel = {\r\n          id: id,\r\n          active: active,\r\n          change_status: true,\r\n          Application_detail: null\r\n        }\r\n        // let updateModel = {\r\n        //   \"client_id\": 0,\r\n        //   \"service_id\": 0\r\n        // }\r\n\r\n        const fetchRequest = await fetch(\r\n          `${APISettings.BASE_API_URL}/${APISettings.Application_API_URL}`, {\r\n            mode: \"cors\",\r\n            method: \"patch\",\r\n            headers: {\r\n              Accept: 'application/json',\r\n              \"Content-Type\": \"application/json\",\r\n              Authorization: \"bearer \" + getState().Login.loginInfor.token,\r\n              // \"Access-Control-Allow-Origin\": \"*\"\r\n            },\r\n            body: JSON.stringify(updateModel)\r\n          }\r\n        );\r\n        console.log(\r\n          \"Response data after requesting get data: \" +\r\n          JSON.stringify(fetchRequest)\r\n        );\r\n\r\n        // the fetch() API only rejects a promise when\r\n        //  a “network error is encountered, although this usually means permissions issues or similar.”\r\n        //  =>  response have ok for other invalid HTTP response\r\n        if (!fetchRequest.ok) {\r\n          console.log(JSON.stringify(fetchRequest));\r\n          throw Error(fetchRequest.statusText);\r\n        }\r\n        if (fetchRequest.status === 401) {\r\n          localStorage.clear();\r\n          throw Error(fetchRequest.statusText);\r\n        }\r\n        // const fetchGetRequest = await fetch(\r\n        //   `${APISettings.BASE_API_URL}/${APISettings.Application_API_URL}/?ref_fields=Application_detail%2Crepo%2CApplication_account`, {\r\n        //     method: \"get\",\r\n        //     headers: {\r\n        //       \"Content-Type\": \"application/json\",\r\n        //       Authorization: \"bearer \" + getState().Login.loginInfor.token\r\n        //     }\r\n        //   }\r\n        // );\r\n\r\n        // // the fetch() API only rejects a promise when\r\n        // //  a “network error is encountered, although this usually means permissions issues or similar.”\r\n        // //  =>  response have ok for other invalid HTTP response\r\n        // if (!fetchGetRequest.ok) {\r\n        //   throw Error(fetchGetRequest.statusText);\r\n        // }\r\n        // if (fetchGetRequest.status === 401) {\r\n        //   localStorage.clear();\r\n        //   throw Error(fetchGetRequest.statusText);\r\n        // }\r\n        // //  response data\r\n        // const getResult = await fetchGetRequest.json();\r\n        // // console.log(\r\n        // //   \"Data after requesting get data: \" + JSON.stringify(result)\r\n        // // );\r\n\r\n        // //  store payload data into store\r\n        // await dispatch(storeApplicationListActionCreator(getResult));\r\n\r\n        // //  store Applications regist as Application master\r\n        // await dispatch(\r\n        //   storeApplicationMasterListActionCreator(getState().Application.currentDataList)\r\n        // );\r\n\r\n      }\r\n    } catch (error) {\r\n      console.log(\"An error occurred in Application action \", error);\r\n    } finally {\r\n      //  wherether call API success or fail, inform store fetching status request is done\r\n      dispatch(requestGetDataFetch(false));\r\n      //  recall getting Application list after update\r\n    }\r\n  };\r\n}\r\n\r\n//  Update Application Detail \r\nconst updateApplicationDetail = (\r\n  Application_detail_id = 0,\r\n  id = 0,\r\n  disk1 = \"\",\r\n  disk2 = \"\",\r\n  disk3 = \"\",\r\n  volume_disk1 = \"\",\r\n  volume_disk2 = \"\",\r\n  volume_disk3 = \"\"\r\n) => {\r\n  return async (dispatch, getState) => {\r\n    try {\r\n      //  inform store we are going to fetch some data\r\n      await dispatch(requestGetDataFetch(true));\r\n\r\n      // if fetching status of Application component is true\r\n      if (getState().Application.fetchStatus) {\r\n        console.log(\"State: \" + JSON.stringify(getState().Login.loginInfor.token));\r\n\r\n        //  update Application detail\r\n        let updateModel = {\r\n          id: id,\r\n          active: true,\r\n          change_status: false,\r\n          Application_detail: {\r\n            id: Application_detail_id,\r\n            Application_id: id,\r\n            disk1: disk1,\r\n            volume_disk1: volume_disk1,\r\n            disk2: disk2,\r\n            volume_disk2: volume_disk2,\r\n            disk3: disk3,\r\n            volume_disk3: volume_disk3,\r\n            active: true\r\n          }\r\n        }\r\n        const fetchRequest = await fetch(\r\n          `${APISettings.BASE_API_URL}/${APISettings.Application_API_URL}`, {\r\n            method: \"patch\",\r\n            headers: {\r\n              \"Content-Type\": \"application/json\",\r\n              Authorization: \"bearer \" + getState().Login.loginInfor.token\r\n            },\r\n            body: JSON.stringify(updateModel)\r\n          }\r\n        );\r\n        console.log(\r\n          \"Response data after requesting get data: \" +\r\n          JSON.stringify(fetchRequest)\r\n        );\r\n\r\n        // the fetch() API only rejects a promise when\r\n        //  a “network error is encountered, although this usually means permissions issues or similar.”\r\n        //  =>  response have ok for other invalid HTTP response\r\n        if (!fetchRequest.ok) {\r\n          throw Error(fetchRequest.statusText);\r\n        }\r\n        if (fetchRequest.status === 401) {\r\n          localStorage.clear();\r\n          throw Error(fetchRequest.statusText);\r\n        }\r\n      }\r\n    } catch (error) {\r\n      console.log(\"An error occurred in Application action \", error);\r\n    } finally {\r\n      //  wherether call API success or fail, inform store fetching status request is done\r\n      dispatch(requestGetDataFetch(false));\r\n    }\r\n  };\r\n}\r\n\r\n//  Update Application Account \r\nconst updateApplicationAccount = ({\r\n  Application_id = 0,\r\n  username = \"\",\r\n  password = \"\"\r\n}) => {\r\n  return async (dispatch, getState) => {\r\n    try {\r\n      //  inform store we are going to fetch some data\r\n      await dispatch(requestGetDataFetch(true));\r\n\r\n      // if fetching status of Application component is true\r\n      if (getState().Application.fetchStatus) {\r\n        console.log(\"State: \" + JSON.stringify(getState().Login.loginInfor.token));\r\n\r\n        //  update Application account\r\n        let updateModel = {\r\n          \"Application_id\": Application_id,\r\n          \"username\": username,\r\n          \"password\": password\r\n        }\r\n        const fetchRequest = await fetch(\r\n          `${APISettings.BASE_API_URL}/${APISettings.Application_ACCOUNT_URL}`, {\r\n            method: \"put\",\r\n            headers: {\r\n              \"Content-Type\": \"application/json\",\r\n              Authorization: \"bearer \" + getState().Login.loginInfor.token\r\n            },\r\n            body: JSON.stringify(updateModel)\r\n          }\r\n        );\r\n        console.log(\r\n          \"Response data after requesting get data: \" +\r\n          JSON.stringify(fetchRequest)\r\n        );\r\n\r\n        // the fetch() API only rejects a promise when\r\n        //  a “network error is encountered, although this usually means permissions issues or similar.”\r\n        //  =>  response have ok for other invalid HTTP response\r\n        if (!fetchRequest.ok) {\r\n          throw Error(fetchRequest.statusText);\r\n        }\r\n        if (fetchRequest.status === 401) {\r\n          localStorage.clear();\r\n          throw Error(fetchRequest.statusText);\r\n        }\r\n      }\r\n    } catch (error) {\r\n      console.log(\"An error occurred in Application action \", error);\r\n    } finally {\r\n      //  wherether call API success or fail, inform store fetching status request is done\r\n      dispatch(requestGetDataFetch(false));\r\n    }\r\n  };\r\n}\r\n\r\nexport default {\r\n  getData: getApplicationList,\r\n  createNewApplication: createNewApplication,\r\n  toggleCreateModal: toggleCreateApplicationModal,\r\n  toggleInformationModal: toggleApplicationInformationModal,\r\n  storeCurrentSelectedApplication: storeCurrentSelectedApplication,\r\n  updateApplicationGeneralInformation: updateApplicationGeneralInformation,\r\n  updateApplicationStatus: updateApplicationStatus,\r\n  updateApplicationDetail: updateApplicationDetail,\r\n  updateApplicationAccount: updateApplicationAccount,\r\n\r\n};","import {\r\n    RepoActionTypes\r\n} from \"../constants\";\r\nimport fetch from \"cross-fetch\";\r\nimport APISettings from \"../Url/APISettings\";\r\n\r\n\r\n//  Action creator section\r\nconst storeRepoListActionCreator = (RepoList = []) => {\r\n    return {\r\n        type: RepoActionTypes.STORE_REPO_LIST,\r\n        payload: RepoList\r\n    };\r\n};\r\n\r\n//  Interactive with reducer section\r\nconst requestGetDataFetch = status => {\r\n    return {\r\n        type: RepoActionTypes.REQUEST_FETCH_API,\r\n        payload: status\r\n    };\r\n};\r\n\r\nconst getRepoList = () => {\r\n    return async (dispatch, getState) => {\r\n        try {\r\n            //  inform store we are going to fetch some data\r\n            await dispatch(requestGetDataFetch(true));\r\n            // if fetching status of Repo component is true\r\n            if (getState().Repo.fetchStatus) {\r\n                console.log(\"State: \" + JSON.stringify(getState().Login.loginInfor.token));\r\n\r\n                //  get list Repo from API\r\n                const fetchRequest = await fetch(\r\n                    `${APISettings.BASE_API_URL}/${APISettings.REPO_API_URL}?ref_fields=server`, {\r\n                        method: \"get\",\r\n                        headers: {\r\n                            \"Content-Type\": \"application/json\",\r\n                            Authorization: \"bearer \" + getState().Login.loginInfor.token\r\n                        }\r\n                    }\r\n                );\r\n                console.log(\r\n                    \"Response data after requesting get data: \" +\r\n                    JSON.stringify(fetchRequest)\r\n                );\r\n\r\n                // the fetch() API only rejects a promise when\r\n                //  a “network error is encountered, although this usually means permissions issues or similar.”\r\n                //  =>  response have ok for other invalid HTTP response\r\n                if (!fetchRequest.ok) {\r\n                    throw Error(fetchRequest.statusText);\r\n                }\r\n                if (fetchRequest.status === 401) {\r\n                    localStorage.clear();\r\n                    throw Error(fetchRequest.statusText);\r\n                }\r\n                //  response data\r\n                const result = await fetchRequest.json();\r\n                // console.log(\r\n                //   \"Data after requesting get data: \" + JSON.stringify(result)\r\n                // );\r\n\r\n                //  store payload data into store\r\n                await dispatch(storeRepoListActionCreator(result));\r\n\r\n            }\r\n        } catch (error) {\r\n            console.log(\"An error occurred in Repo action \", error);\r\n        } finally {\r\n            //  wherether call API success or fail, inform store fetching status request is done\r\n            dispatch(requestGetDataFetch(false));\r\n        }\r\n    };\r\n};\r\n\r\nconst createNewRepo = ({\r\n    server_id = 1,\r\n    name = \"new repository\",\r\n    application_id = 1,\r\n    repo_url = \"google.com.vn\",\r\n    note = \"string\"\r\n}) => {\r\n    return async (dispatch, getState) => {\r\n        try {\r\n            //  inform store we are going to fetch some data\r\n            await dispatch(requestGetDataFetch(true));\r\n\r\n            // if fetching status of Server component is true\r\n            if (getState().Server.fetchStatus) {\r\n                let createModel = {\r\n                    server_id,\r\n                    name,\r\n                    application_id,\r\n                    repo_url,\r\n                    note\r\n                }\r\n                console.log(createModel)\r\n                //  call API to update general information \r\n                const fetchRequest = await fetch(\r\n                    `${APISettings.BASE_API_URL}/${APISettings.REPO_API_URL}`, {\r\n                        method: \"post\",\r\n                        headers: {\r\n                            \"Content-Type\": \"application/json\",\r\n                            Authorization: \"bearer \" + getState().Login.loginInfor.token\r\n                        },\r\n                        body: JSON.stringify(createModel),\r\n                    }\r\n                );\r\n                console.log(\r\n                    \"Response data after requesting get data: \" +\r\n                    JSON.stringify(fetchRequest)\r\n                );\r\n\r\n                // the fetch() API only rejects a promise when\r\n                //  a “network error is encountered, although this usually means permissions issues or similar.”\r\n                //  =>  response have ok for other invalid HTTP response\r\n                if (!fetchRequest.ok) {\r\n                    throw Error(fetchRequest.statusText);\r\n                }\r\n                if (fetchRequest.status === 401) {\r\n                    localStorage.clear();\r\n                    throw Error(fetchRequest.statusText);\r\n                }\r\n                //  response data\r\n                const result = await fetchRequest.json();\r\n                console.log(\r\n                    \"Data after requesting get data: \" + JSON.stringify(result)\r\n                );\r\n\r\n            }\r\n        } catch (error) {\r\n            console.log(\"An error occurred in server action \", error);\r\n        } finally {\r\n            //  wherether call API success or fail, inform store fetching status request is done\r\n            dispatch(requestGetDataFetch(false));\r\n            // console.log(\r\n            //   \"State after finish requesting fetch: \" + JSON.stringify(getState().Server)\r\n            // );\r\n        }\r\n    };\r\n};\r\n\r\nconst deleteRepo = (id = 0) => {\r\n    return async (dispatch, getState) => {\r\n        try {\r\n            //  inform store we are going to fetch some data\r\n            await dispatch(requestGetDataFetch(true));\r\n            // if fetching status of Repo component is true\r\n            if (getState().Repo.fetchStatus) {\r\n                console.log(\"State: \" + JSON.stringify(getState().Login.loginInfor.token));\r\n\r\n                //  get list Repo from API\r\n                const fetchRequest = await fetch(\r\n                    `${APISettings.BASE_API_URL}/${APISettings.REPO_API_URL}`, {\r\n                        method: \"delete\",\r\n                        headers: {\r\n                            \"Content-Type\": \"application/json\",\r\n                            Authorization: \"bearer \" + getState().Login.loginInfor.token\r\n                        }\r\n                    }\r\n                );\r\n                console.log(\r\n                    \"Response data after requesting get data: \" +\r\n                    JSON.stringify(fetchRequest)\r\n                );\r\n\r\n                // the fetch() API only rejects a promise when\r\n                //  a “network error is encountered, although this usually means permissions issues or similar.”\r\n                //  =>  response have ok for other invalid HTTP response\r\n                if (!fetchRequest.ok) {\r\n                    throw Error(fetchRequest.statusText);\r\n                }\r\n                if (fetchRequest.status === 401) {\r\n                    localStorage.clear();\r\n                    throw Error(fetchRequest.statusText);\r\n                }\r\n                //  response data\r\n                const result = await fetchRequest.json();\r\n                // console.log(\r\n                //   \"Data after requesting get data: \" + JSON.stringify(result)\r\n                // );\r\n\r\n                //  store payload data into store\r\n                await dispatch(storeRepoListActionCreator(result));\r\n\r\n            }\r\n        } catch (error) {\r\n            console.log(\"An error occurred in Repo action \", error);\r\n        } finally {\r\n            //  wherether call API success or fail, inform store fetching status request is done\r\n            dispatch(requestGetDataFetch(false));\r\n        }\r\n    };\r\n};\r\n\r\nexport default {\r\n    getData: getRepoList,\r\n    createNewRepo: createNewRepo,\r\n    deleteRepo: deleteRepo,\r\n\r\n};","import {\r\n    SystemActionTypes\r\n} from \"../constants\";\r\nimport fetch from \"cross-fetch\";\r\nimport APISettings from \"../Url/APISettings\";\r\n\r\n\r\n//  Action creator section\r\nconst storeSystemListActionCreator = (SystemList = []) => {\r\n    return {\r\n        type: SystemActionTypes.STORE_SYSTEM_LIST,\r\n        payload: SystemList\r\n    };\r\n};\r\n\r\n//  Interactive with reducer section\r\nconst requestGetDataFetch = status => {\r\n    return {\r\n        type: SystemActionTypes.REQUEST_FETCH_API,\r\n        payload: status\r\n    };\r\n};\r\n\r\nconst getSystemList = () => {\r\n    return async (dispatch, getState) => {\r\n        try {\r\n            //  inform store we are going to fetch some data\r\n            await dispatch(requestGetDataFetch(true));\r\n            // if fetching status of System component is true\r\n            if (getState().System.fetchStatus) {\r\n                console.log(\"State: \" + JSON.stringify(getState().Login.loginInfor.token));\r\n\r\n                //  get list System from API\r\n                const fetchRequest = await fetch(\r\n                    `${APISettings.BASE_API_URL}/${APISettings.SYSTEM_API_URL}`, {\r\n                        method: \"get\",\r\n                        headers: {\r\n                            \"Content-Type\": \"application/json\",\r\n                            Authorization: \"bearer \" + getState().Login.loginInfor.token\r\n                        }\r\n                    }\r\n                );\r\n                console.log(\r\n                    \"Response data after requesting get data: \" +\r\n                    JSON.stringify(fetchRequest)\r\n                );\r\n\r\n                // the fetch() API only rejects a promise when\r\n                //  a “network error is encountered, although this usually means permissions issues or similar.”\r\n                //  =>  response have ok for other invalid HTTP response\r\n                if (!fetchRequest.ok) {\r\n                    throw Error(fetchRequest.statusText);\r\n                }\r\n                if (fetchRequest.status === 401) {\r\n                    localStorage.clear();\r\n                    throw Error(fetchRequest.statusText);\r\n                }\r\n                //  response data\r\n                const result = await fetchRequest.json();\r\n                // console.log(\r\n                //   \"Data after requesting get data: \" + JSON.stringify(result)\r\n                // );\r\n\r\n                //  store payload data into store\r\n                await dispatch(storeSystemListActionCreator(result));\r\n\r\n            }\r\n        } catch (error) {\r\n            console.log(\"An error occurred in System action \", error);\r\n        } finally {\r\n            //  wherether call API success or fail, inform store fetching status request is done\r\n            dispatch(requestGetDataFetch(false));\r\n        }\r\n    };\r\n};\r\n\r\nconst createNewSystem = () => {\r\n    return async (dispatch, getState) => {\r\n        try {\r\n            //  inform store we are going to fetch some data\r\n            await dispatch(requestGetDataFetch(true));\r\n            // if fetching status of System component is true\r\n            if (getState().System.fetchStatus) {\r\n                console.log(\"State: \" + JSON.stringify(getState().Login.loginInfor.token));\r\n\r\n                //  get list System from API\r\n                const fetchRequest = await fetch(\r\n                    `${APISettings.BASE_API_URL}/${APISettings.SYSTEM_API_URL}`, {\r\n                        method: \"get\",\r\n                        headers: {\r\n                            \"Content-Type\": \"application/json\",\r\n                            Authorization: \"bearer \" + getState().Login.loginInfor.token\r\n                        }\r\n                    }\r\n                );\r\n                console.log(\r\n                    \"Response data after requesting get data: \" +\r\n                    JSON.stringify(fetchRequest)\r\n                );\r\n\r\n                // the fetch() API only rejects a promise when\r\n                //  a “network error is encountered, although this usually means permissions issues or similar.”\r\n                //  =>  response have ok for other invalid HTTP response\r\n                if (!fetchRequest.ok) {\r\n                    throw Error(fetchRequest.statusText);\r\n                }\r\n                if (fetchRequest.status === 401) {\r\n                    localStorage.clear();\r\n                    throw Error(fetchRequest.statusText);\r\n                }\r\n                //  response data\r\n                const result = await fetchRequest.json();\r\n                // console.log(\r\n                //   \"Data after requesting get data: \" + JSON.stringify(result)\r\n                // );\r\n\r\n                //  store payload data into store\r\n                await dispatch(storeSystemListActionCreator(result));\r\n\r\n            }\r\n        } catch (error) {\r\n            console.log(\"An error occurred in System action \", error);\r\n        } finally {\r\n            //  wherether call API success or fail, inform store fetching status request is done\r\n            dispatch(requestGetDataFetch(false));\r\n        }\r\n    };\r\n};\r\n\r\nconst deleteSystem = (id = 0) => {\r\n    return async (dispatch, getState) => {\r\n        try {\r\n            //  inform store we are going to fetch some data\r\n            await dispatch(requestGetDataFetch(true));\r\n            // if fetching status of System component is true\r\n            if (getState().System.fetchStatus) {\r\n                console.log(\"State: \" + JSON.stringify(getState().Login.loginInfor.token));\r\n\r\n                //  get list System from API\r\n                const fetchRequest = await fetch(\r\n                    `${APISettings.BASE_API_URL}/${APISettings.SYSTEM_API_URL}`, {\r\n                        method: \"delete\",\r\n                        headers: {\r\n                            \"Content-Type\": \"application/json\",\r\n                            Authorization: \"bearer \" + getState().Login.loginInfor.token\r\n                        }\r\n                    }\r\n                );\r\n                console.log(\r\n                    \"Response data after requesting get data: \" +\r\n                    JSON.stringify(fetchRequest)\r\n                );\r\n\r\n                // the fetch() API only rejects a promise when\r\n                //  a “network error is encountered, although this usually means permissions issues or similar.”\r\n                //  =>  response have ok for other invalid HTTP response\r\n                if (!fetchRequest.ok) {\r\n                    throw Error(fetchRequest.statusText);\r\n                }\r\n                if (fetchRequest.status === 401) {\r\n                    localStorage.clear();\r\n                    throw Error(fetchRequest.statusText);\r\n                }\r\n                //  response data\r\n                const result = await fetchRequest.json();\r\n                // console.log(\r\n                //   \"Data after requesting get data: \" + JSON.stringify(result)\r\n                // );\r\n\r\n                //  store payload data into store\r\n                await dispatch(storeSystemListActionCreator(result));\r\n\r\n            }\r\n        } catch (error) {\r\n            console.log(\"An error occurred in System action \", error);\r\n        } finally {\r\n            //  wherether call API success or fail, inform store fetching status request is done\r\n            dispatch(requestGetDataFetch(false));\r\n        }\r\n    };\r\n};\r\n\r\nexport default {\r\n    getData: getSystemList,\r\n    createNewSystem: createNewSystem,\r\n    deleteSystem: deleteSystem,\r\n\r\n};","import {\r\n    LogActionTypes\r\n} from \"../constants\";\r\nimport fetch from \"cross-fetch\";\r\nimport APISettings from \"../Url/APISettings\";\r\n\r\n\r\n//  Action creator section\r\nconst storeLogListActionCreator = (LogList = []) => {\r\n    return {\r\n        type: LogActionTypes.STORE_LOG_LIST,\r\n        payload: LogList\r\n    };\r\n};\r\n\r\n//  Interactive with reducer section\r\nconst requestGetDataFetch = status => {\r\n    return {\r\n        type: LogActionTypes.REQUEST_FETCH_API,\r\n        payload: status\r\n    };\r\n};\r\n\r\nconst getLogList = (id = 0) => {\r\n    return async (dispatch, getState) => {\r\n        try {\r\n            //  inform store we are going to fetch some data\r\n            await dispatch(requestGetDataFetch(true));\r\n\r\n            // if fetching status of Log component is true\r\n            if (getState().Log.fetchStatus) {\r\n                //  get list Log from API\r\n                const link = id === 0 ?\r\n                    `${APISettings.BASE_API_URL}/${APISettings.LOG_API_URL}` :\r\n                    `${APISettings.BASE_API_URL}/${APISettings.LOG_API_URL}?serverity=${id}`;\r\n                    console.log(\"getLogList \" + link);\r\n                const fetchRequest = await fetch(\r\n                    link, {\r\n                        method: \"get\",\r\n                        headers: {\r\n                            \"Content-Type\": \"application/json\",\r\n                            Authorization: \"bearer \" + getState().Login.loginInfor.token\r\n                        }\r\n                    }\r\n                );\r\n\r\n                console.log(\r\n                    \"Response data after requesting get data: \" +\r\n                    JSON.stringify(fetchRequest)\r\n                );\r\n\r\n                // the fetch() API only rejects a promise when\r\n                //  a “network error is encountered, although this usually means permissions issues or similar.”\r\n                //  =>  response have ok for other invalid HTTP response\r\n                if (!fetchRequest.ok) {\r\n                    throw Error(fetchRequest.statusText);\r\n                }\r\n                if (fetchRequest.status === 401) {\r\n                    localStorage.clear();\r\n                    throw Error(fetchRequest.statusText);\r\n                }\r\n                //  response data\r\n                const result = await fetchRequest.json();\r\n                // console.log(\r\n                //   \"Data after requesting get data: \" + JSON.stringify(result)\r\n                // );\r\n\r\n                //  store payload data into store\r\n                await dispatch(storeLogListActionCreator(result));\r\n\r\n            }\r\n        } catch (error) {\r\n            console.log(\"An error occurred in Log action \", error);\r\n        } finally {\r\n            //  wherether call API success or fail, inform store fetching status request is done\r\n            dispatch(requestGetDataFetch(false));\r\n        }\r\n    };\r\n};\r\n\r\nconst createNewLog = ({\r\n    server_id = 1,\r\n    name = \"new Logsitory\",\r\n    application_id = 1,\r\n    Log_url = \"google.com.vn\",\r\n    note = \"string\"\r\n}) => {\r\n    return async (dispatch, getState) => {\r\n        try {\r\n            //  inform store we are going to fetch some data\r\n            await dispatch(requestGetDataFetch(true));\r\n\r\n            // if fetching status of Server component is true\r\n            if (getState().Server.fetchStatus) {\r\n                let createModel = {\r\n                    server_id,\r\n                    name,\r\n                    application_id,\r\n                    Log_url,\r\n                    note\r\n                }\r\n                console.log(createModel)\r\n                //  call API to update general information \r\n                const fetchRequest = await fetch(\r\n                    `${APISettings.BASE_API_URL}/${APISettings.LOG_API_URL}`, {\r\n                        method: \"post\",\r\n                        headers: {\r\n                            \"Content-Type\": \"application/json\",\r\n                            Authorization: \"bearer \" + getState().Login.loginInfor.token\r\n                        },\r\n                        body: JSON.stringify(createModel),\r\n                    }\r\n                );\r\n                console.log(\r\n                    \"Response data after requesting get data: \" +\r\n                    JSON.stringify(fetchRequest)\r\n                );\r\n\r\n                // the fetch() API only rejects a promise when\r\n                //  a “network error is encountered, although this usually means permissions issues or similar.”\r\n                //  =>  response have ok for other invalid HTTP response\r\n                if (!fetchRequest.ok) {\r\n                    throw Error(fetchRequest.statusText);\r\n                }\r\n                if (fetchRequest.status === 401) {\r\n                    localStorage.clear();\r\n                    throw Error(fetchRequest.statusText);\r\n                }\r\n                //  response data\r\n                const result = await fetchRequest.json();\r\n                console.log(\r\n                    \"Data after requesting get data: \" + JSON.stringify(result)\r\n                );\r\n\r\n            }\r\n        } catch (error) {\r\n            console.log(\"An error occurred in server action \", error);\r\n        } finally {\r\n            //  wherether call API success or fail, inform store fetching status request is done\r\n            dispatch(requestGetDataFetch(false));\r\n            // console.log(\r\n            //   \"State after finish requesting fetch: \" + JSON.stringify(getState().Server)\r\n            // );\r\n        }\r\n    };\r\n};\r\n\r\nconst deleteLog = (id = 0) => {\r\n    return async (dispatch, getState) => {\r\n        try {\r\n            //  inform store we are going to fetch some data\r\n            await dispatch(requestGetDataFetch(true));\r\n            // if fetching status of Log component is true\r\n            if (getState().Log.fetchStatus) {\r\n                console.log(\"State: \" + JSON.stringify(getState().Login.loginInfor.token));\r\n\r\n                //  get list Log from API\r\n                const fetchRequest = await fetch(\r\n                    `${APISettings.BASE_API_URL}/${APISettings.LOG_API_URL}`, {\r\n                        method: \"delete\",\r\n                        headers: {\r\n                            \"Content-Type\": \"application/json\",\r\n                            Authorization: \"bearer \" + getState().Login.loginInfor.token\r\n                        }\r\n                    }\r\n                );\r\n                console.log(\r\n                    \"Response data after requesting get data: \" +\r\n                    JSON.stringify(fetchRequest)\r\n                );\r\n\r\n                // the fetch() API only rejects a promise when\r\n                //  a “network error is encountered, although this usually means permissions issues or similar.”\r\n                //  =>  response have ok for other invalid HTTP response\r\n                if (!fetchRequest.ok) {\r\n                    throw Error(fetchRequest.statusText);\r\n                }\r\n                if (fetchRequest.status === 401) {\r\n                    localStorage.clear();\r\n                    throw Error(fetchRequest.statusText);\r\n                }\r\n                //  response data\r\n                const result = await fetchRequest.json();\r\n                // console.log(\r\n                //   \"Data after requesting get data: \" + JSON.stringify(result)\r\n                // );\r\n\r\n                //  store payload data into store\r\n                await dispatch(storeLogListActionCreator(result));\r\n\r\n            }\r\n        } catch (error) {\r\n            console.log(\"An error occurred in Log action \", error);\r\n        } finally {\r\n            //  wherether call API success or fail, inform store fetching status request is done\r\n            dispatch(requestGetDataFetch(false));\r\n        }\r\n    };\r\n};\r\n\r\nexport default {\r\n    getData: getLogList,\r\n    createNewLog: createNewLog,\r\n    deleteLog: deleteLog,\r\n\r\n};","import {\r\n  ApplicationInstanceActionTypes\r\n} from \"../constants\";\r\nimport fetch from \"cross-fetch\";\r\nimport APISettings from \"../Url/APISettings\";\r\n\r\n// const today = new Date(Date.now());\r\n\r\n\r\n//  Action creator section\r\nconst storeApplicationInstanceListActionCreator = (ApplicationInstanceList = []) => {\r\n  return {\r\n    type: ApplicationInstanceActionTypes.STORE_APPLICATION_INSTANCE_LIST,\r\n    payload: ApplicationInstanceList\r\n  };\r\n};\r\n\r\nconst storeCurrentSelectedApplicationInstanceActionCreater = id => {\r\n  return {\r\n    type: ApplicationInstanceActionTypes.STORE_CURRENT_SELECTED_APPLICATION_INSTANCE,\r\n    payload: id\r\n  };\r\n};\r\n\r\n//  Interactive with reducer section\r\nconst requestGetDataFetch = status => {\r\n  return {\r\n    type: ApplicationInstanceActionTypes.REQUEST_FETCH_API,\r\n    payload: status\r\n  };\r\n};\r\n\r\nconst getApplicationInstanceList = () => {\r\n  return async (dispatch, getState) => {\r\n    try {\r\n      //  inform store we are going to fetch some data\r\n      await dispatch(requestGetDataFetch(true));\r\n      // if fetching status of ApplicationInstance component is true\r\n      if (getState().ApplicationInstance.fetchStatus) {\r\n        console.log(\"State: \" + JSON.stringify(getState().Login.loginInfor.token));\r\n\r\n        //  get list ApplicationInstance from API\r\n        const fetchRequest = await fetch(\r\n          `${APISettings.BASE_API_URL}/${APISettings.APPLICATION_INSTANCE_API_URL}?ref_fields=app`, {\r\n            method: \"get\",\r\n            headers: {\r\n              \"Content-Type\": \"Application/json\",\r\n              Authorization: \"bearer \" + getState().Login.loginInfor.token\r\n            }\r\n          }\r\n        );\r\n        console.log(\r\n          \"Response data after requesting get data: \" +\r\n          JSON.stringify(fetchRequest)\r\n        );\r\n        // the fetch() API only rejects a promise when\r\n        //  a “network error is encountered, although this usually means permissions issues or similar.”\r\n        //  =>  response have ok for other invalid HTTP response\r\n        if (!fetchRequest.ok) {\r\n          throw Error(fetchRequest.statusText);\r\n        }\r\n        if (fetchRequest.status === 401) {\r\n          localStorage.clear();\r\n          throw Error(fetchRequest.statusText);\r\n        }\r\n        //  response data\r\n        const result = await fetchRequest.json();\r\n        // console.log(\r\n        //   \"Data after requesting get data: \" + JSON.stringify(result)\r\n        // );\r\n\r\n        //  store payload data into store\r\n        await dispatch(storeApplicationInstanceListActionCreator(result));\r\n\r\n      }\r\n    } catch (error) {\r\n      console.log(\"An error occurred in ApplicationInstance action \", error);\r\n    } finally {\r\n      //  wherether call API success or fail, inform store fetching status request is done\r\n      dispatch(requestGetDataFetch(false));\r\n    }\r\n  };\r\n};\r\n\r\nconst toggleCreateApplicationInstanceModal = (dispatch, getState) => {\r\n  return dispatch({\r\n    type: ApplicationInstanceActionTypes.TOGGLE_CREATE_APPLICATION_INSTANCE_MODAL\r\n  });\r\n};\r\n\r\nconst toggleApplicationInstanceInformationModal = dispatch => {\r\n  return dispatch({\r\n    type: ApplicationInstanceActionTypes.TOGGLE_INFORMATION_MODAL\r\n  });\r\n};\r\n\r\nconst storeCurrentSelectedApplicationInstance = id => {\r\n  return async (dispatch, getState) => {\r\n    await dispatch(storeCurrentSelectedApplicationInstanceActionCreater(id));\r\n  };\r\n};\r\n\r\n//  Create section\r\nconst createNewApplicationInstance = ({\r\n  app_code = \"string\",\r\n  application_id = 0,\r\n  name = \"string\"\r\n}) => {\r\n  return async (dispatch, getState) => {\r\n    try {\r\n      //  inform store we are going to fetch some data\r\n      await dispatch(requestGetDataFetch(true));\r\n\r\n      // if fetching status of ApplicationInstance component is true\r\n      if (getState().ApplicationInstance.fetchStatus) {\r\n        let createModel = {\r\n          app_code,\r\n          application_id,\r\n          name\r\n        }\r\n\r\n        console.log(createModel)\r\n        //  call API to update general information \r\n        const fetchRequest = await fetch(\r\n          `${APISettings.BASE_API_URL}/${APISettings.APPLICATION_INSTANCE_API_URL}`, {\r\n            method: \"post\",\r\n            headers: {\r\n              \"Content-Type\": \"Application/json\",\r\n              Authorization: \"bearer \" + getState().Login.loginInfor.token\r\n            },\r\n            body: JSON.stringify(createModel),\r\n          }\r\n        );\r\n        console.log(\r\n          \"Response data after requesting get data: \" +\r\n          JSON.stringify(fetchRequest)\r\n        );\r\n\r\n        // the fetch() API only rejects a promise when\r\n        //  a “network error is encountered, although this usually means permissions issues or similar.”\r\n        //  =>  response have ok for other invalid HTTP response\r\n        if (!fetchRequest.ok) {\r\n          throw Error(fetchRequest.statusText);\r\n        }\r\n        if (fetchRequest.status === 401) {\r\n          localStorage.clear();\r\n          throw Error(fetchRequest.statusText);\r\n        }\r\n      }\r\n    } catch (error) {\r\n      console.log(\"An error occurred in ApplicationInstance action \", error);\r\n    } finally {\r\n      //  wherether call API success or fail, inform store fetching status request is done\r\n      dispatch(requestGetDataFetch(false));\r\n      // console.log(\r\n      //   \"State after finish requesting fetch: \" + JSON.stringify(getState().ApplicationInstance)\r\n      // );\r\n    }\r\n  };\r\n};\r\n\r\n//  Update ApplicationInstance General Information\r\nconst updateApplicationInstanceGeneralInformation = ({\r\n  id = 0,\r\n  application_version = 0,\r\n  config_url = \"string\",\r\n  description = \"string\",\r\n  name = \"string\",\r\n  release_url = \"string\",\r\n  app_code = \"string\"\r\n}) => {\r\n  return async (dispatch, getState) => {\r\n    try {\r\n      //  inform store we are going to fetch some data\r\n      await dispatch(requestGetDataFetch(true));\r\n      // if fetching status of ApplicationInstance component is true\r\n      if (getState().ApplicationInstance.fetchStatus) {\r\n        console.log(\"State: \" + JSON.stringify(getState().Login.loginInfor.token));\r\n        let updateModel = {\r\n          id,\r\n          application_version,\r\n          config_url,\r\n          description,\r\n          name,\r\n          release_url,\r\n          app_code\r\n        }\r\n\r\n        console.log(\"111111 \" + JSON.stringify(updateModel));\r\n        //  call API to update general information \r\n        const fetchRequest = await fetch(\r\n          `${APISettings.BASE_API_URL}/${APISettings.APPLICATION_INSTANCE_API_URL}`, {\r\n            method: \"PUT\",\r\n            headers: {\r\n              \"Content-Type\": \"Application/json\",\r\n              Authorization: \"bearer \" + getState().Login.loginInfor.token\r\n            },\r\n            body: JSON.stringify(updateModel),\r\n          }\r\n        );\r\n        console.log(\r\n          \"Response data after requesting get data: \" +\r\n          JSON.stringify(fetchRequest)\r\n        );\r\n\r\n        // the fetch() API only rejects a promise when\r\n        //  a “network error is encountered, although this usually means permissions issues or similar.”\r\n        //  =>  response have ok for other invalid HTTP response\r\n        if (!fetchRequest.ok) {\r\n          throw Error(fetchRequest.statusText);\r\n        }\r\n        if (fetchRequest.status === 401) {\r\n          localStorage.clear();\r\n          throw Error(fetchRequest.statusText);\r\n        }\r\n        //  response data\r\n        // const result = await fetchRequest.json();\r\n        // console.log(\r\n        //   \"Data after requesting get data: \" + JSON.stringify(result)\r\n        // );\r\n\r\n        //  store payloaddata into store\r\n        // await dispatch(storeApplicationInstanceListActionCreator(result));\r\n        // console.log(\r\n        //   \"State after requesting get data: \" +\r\n        //     JSON.stringify(getState().ApplicationInstance)\r\n        // );\r\n      }\r\n    } catch (error) {\r\n      console.log(\"An error occurred in ApplicationInstance action \", error);\r\n    } finally {\r\n      //  wherether call API success or fail, inform store fetching status request is done\r\n      dispatch(requestGetDataFetch(false));\r\n      // console.log(\r\n      //   \"State after finish requesting fetch: \" + JSON.stringify(getState().ApplicationInstance)\r\n      // );\r\n    }\r\n  };\r\n};\r\n\r\n//  Update ApplicationInstance Status \r\nconst updateApplicationInstanceStatus = (\r\n  id = 0,\r\n  active = true,\r\n) => {\r\n  return async (dispatch, getState) => {\r\n    try {\r\n      //  inform store we are going to fetch some data\r\n      await dispatch(requestGetDataFetch(true));\r\n\r\n      // if fetching status of ApplicationInstance component is true\r\n      if (getState().ApplicationInstance.fetchStatus) {\r\n        console.log(\"State: \" + JSON.stringify(getState().Login.loginInfor.token));\r\n\r\n        //  update ApplicationInstance detail\r\n        let updateModel = {\r\n          id: id,\r\n          active: active,\r\n          change_status: true,\r\n          APPLICATION_INSTANCE_detail: null\r\n        }\r\n        // let updateModel = {\r\n        //   \"client_id\": 0,\r\n        //   \"service_id\": 0\r\n        // }\r\n\r\n        const fetchRequest = await fetch(\r\n          `${APISettings.BASE_API_URL}/${APISettings.APPLICATION_INSTANCE_API_URL}`, {\r\n            mode: \"cors\",\r\n            method: \"patch\",\r\n            headers: {\r\n              Accept: 'Application/json',\r\n              \"Content-Type\": \"Application/json\",\r\n              Authorization: \"bearer \" + getState().Login.loginInfor.token,\r\n              // \"Access-Control-Allow-Origin\": \"*\"\r\n            },\r\n            body: JSON.stringify(updateModel)\r\n          }\r\n        );\r\n        console.log(\r\n          \"Response data after requesting get data: \" +\r\n          JSON.stringify(fetchRequest)\r\n        );\r\n\r\n        // the fetch() API only rejects a promise when\r\n        //  a “network error is encountered, although this usually means permissions issues or similar.”\r\n        //  =>  response have ok for other invalid HTTP response\r\n        if (!fetchRequest.ok) {\r\n          console.log(JSON.stringify(fetchRequest));\r\n          throw Error(fetchRequest.statusText);\r\n        }\r\n        if (fetchRequest.status === 401) {\r\n          localStorage.clear();\r\n          throw Error(fetchRequest.statusText);\r\n        }\r\n        // const fetchGetRequest = await fetch(\r\n        //   `${APISettings.BASE_API_URL}/${APISettings.APPLICATION_INSTANCE_API_URL}/?ref_fields=APPLICATION_INSTANCE_detail%2Crepo%2CAPPLICATION_INSTANCE_account`, {\r\n        //     method: \"get\",\r\n        //     headers: {\r\n        //       \"Content-Type\": \"Application/json\",\r\n        //       Authorization: \"bearer \" + getState().Login.loginInfor.token\r\n        //     }\r\n        //   }\r\n        // );\r\n\r\n        // // the fetch() API only rejects a promise when\r\n        // //  a “network error is encountered, although this usually means permissions issues or similar.”\r\n        // //  =>  response have ok for other invalid HTTP response\r\n        // if (!fetchGetRequest.ok) {\r\n        //   throw Error(fetchGetRequest.statusText);\r\n        // }\r\n        // if (fetchGetRequest.status === 401) {\r\n        //   localStorage.clear();\r\n        //   throw Error(fetchGetRequest.statusText);\r\n        // }\r\n        // //  response data\r\n        // const getResult = await fetchGetRequest.json();\r\n        // // console.log(\r\n        // //   \"Data after requesting get data: \" + JSON.stringify(result)\r\n        // // );\r\n\r\n        // //  store payload data into store\r\n        // await dispatch(storeApplicationInstanceListActionCreator(getResult));\r\n\r\n        // //  store ApplicationInstances regist as ApplicationInstance master\r\n        // await dispatch(\r\n        //   storeApplicationInstanceMasterListActionCreator(getState().ApplicationInstance.currentDataList)\r\n        // );\r\n\r\n      }\r\n    } catch (error) {\r\n      console.log(\"An error occurred in ApplicationInstance action \", error);\r\n    } finally {\r\n      //  wherether call API success or fail, inform store fetching status request is done\r\n      dispatch(requestGetDataFetch(false));\r\n      //  recall getting ApplicationInstance list after update\r\n    }\r\n  };\r\n}\r\n\r\n//  Update ApplicationInstance Detail \r\nconst updateApplicationInstanceDetail = (\r\n  APPLICATION_INSTANCE_detail_id = 0,\r\n  id = 0,\r\n  disk1 = \"\",\r\n  disk2 = \"\",\r\n  disk3 = \"\",\r\n  volume_disk1 = \"\",\r\n  volume_disk2 = \"\",\r\n  volume_disk3 = \"\"\r\n) => {\r\n  return async (dispatch, getState) => {\r\n    try {\r\n      //  inform store we are going to fetch some data\r\n      await dispatch(requestGetDataFetch(true));\r\n\r\n      // if fetching status of ApplicationInstance component is true\r\n      if (getState().ApplicationInstance.fetchStatus) {\r\n        console.log(\"State: \" + JSON.stringify(getState().Login.loginInfor.token));\r\n\r\n        //  update ApplicationInstance detail\r\n        let updateModel = {\r\n          id: id,\r\n          active: true,\r\n          change_status: false,\r\n          APPLICATION_INSTANCE_detail: {\r\n            id: APPLICATION_INSTANCE_detail_id,\r\n            APPLICATION_INSTANCE_id: id,\r\n            disk1: disk1,\r\n            volume_disk1: volume_disk1,\r\n            disk2: disk2,\r\n            volume_disk2: volume_disk2,\r\n            disk3: disk3,\r\n            volume_disk3: volume_disk3,\r\n            active: true\r\n          }\r\n        }\r\n        const fetchRequest = await fetch(\r\n          `${APISettings.BASE_API_URL}/${APISettings.APPLICATION_INSTANCE_API_URL}`, {\r\n            method: \"patch\",\r\n            headers: {\r\n              \"Content-Type\": \"Application/json\",\r\n              Authorization: \"bearer \" + getState().Login.loginInfor.token\r\n            },\r\n            body: JSON.stringify(updateModel)\r\n          }\r\n        );\r\n        console.log(\r\n          \"Response data after requesting get data: \" +\r\n          JSON.stringify(fetchRequest)\r\n        );\r\n\r\n        // the fetch() API only rejects a promise when\r\n        //  a “network error is encountered, although this usually means permissions issues or similar.”\r\n        //  =>  response have ok for other invalid HTTP response\r\n        if (!fetchRequest.ok) {\r\n          throw Error(fetchRequest.statusText);\r\n        }\r\n        if (fetchRequest.status === 401) {\r\n          localStorage.clear();\r\n          throw Error(fetchRequest.statusText);\r\n        }\r\n      }\r\n    } catch (error) {\r\n      console.log(\"An error occurred in ApplicationInstance action \", error);\r\n    } finally {\r\n      //  wherether call API success or fail, inform store fetching status request is done\r\n      dispatch(requestGetDataFetch(false));\r\n    }\r\n  };\r\n}\r\n\r\n//  Update ApplicationInstance Account \r\nconst updateApplicationInstanceAccount = ({\r\n  APPLICATION_INSTANCE_id = 0,\r\n  username = \"\",\r\n  password = \"\"\r\n}) => {\r\n  return async (dispatch, getState) => {\r\n    try {\r\n      //  inform store we are going to fetch some data\r\n      await dispatch(requestGetDataFetch(true));\r\n\r\n      // if fetching status of ApplicationInstance component is true\r\n      if (getState().ApplicationInstance.fetchStatus) {\r\n        console.log(\"State: \" + JSON.stringify(getState().Login.loginInfor.token));\r\n\r\n        //  update ApplicationInstance account\r\n        let updateModel = {\r\n          \"APPLICATION_INSTANCE_id\": APPLICATION_INSTANCE_id,\r\n          \"username\": username,\r\n          \"password\": password\r\n        }\r\n        const fetchRequest = await fetch(\r\n          `${APISettings.BASE_API_URL}/${APISettings.APPLICATION_INSTANCE_ACCOUNT_URL}`, {\r\n            method: \"put\",\r\n            headers: {\r\n              \"Content-Type\": \"Application/json\",\r\n              Authorization: \"bearer \" + getState().Login.loginInfor.token\r\n            },\r\n            body: JSON.stringify(updateModel)\r\n          }\r\n        );\r\n        console.log(\r\n          \"Response data after requesting get data: \" +\r\n          JSON.stringify(fetchRequest)\r\n        );\r\n\r\n        // the fetch() API only rejects a promise when\r\n        //  a “network error is encountered, although this usually means permissions issues or similar.”\r\n        //  =>  response have ok for other invalid HTTP response\r\n        if (!fetchRequest.ok) {\r\n          throw Error(fetchRequest.statusText);\r\n        }\r\n        if (fetchRequest.status === 401) {\r\n          localStorage.clear();\r\n          throw Error(fetchRequest.statusText);\r\n        }\r\n      }\r\n    } catch (error) {\r\n      console.log(\"An error occurred in ApplicationInstance action \", error);\r\n    } finally {\r\n      //  wherether call API success or fail, inform store fetching status request is done\r\n      dispatch(requestGetDataFetch(false));\r\n    }\r\n  };\r\n}\r\n\r\nexport default {\r\n  getData: getApplicationInstanceList,\r\n  createNewApplicationInstance: createNewApplicationInstance,\r\n  toggleCreateModal: toggleCreateApplicationInstanceModal,\r\n  toggleInformationModal: toggleApplicationInstanceInformationModal,\r\n  storeCurrentSelectedApplicationInstance: storeCurrentSelectedApplicationInstance,\r\n  updateApplicationInstanceGeneralInformation: updateApplicationInstanceGeneralInformation,\r\n  updateApplicationInstanceStatus: updateApplicationInstanceStatus,\r\n  updateApplicationInstanceDetail: updateApplicationInstanceDetail,\r\n  updateApplicationInstanceAccount: updateApplicationInstanceAccount,\r\n\r\n};","import {\r\n    EmployeeActionTypes\r\n} from \"../constants\";\r\nimport fetch from \"cross-fetch\";\r\nimport APISettings from \"../Url/APISettings\";\r\n\r\n// const today = new Date(Date.now());\r\n\r\n\r\n//  Action creator section\r\nconst storeEmployeeListActionCreator = (EmployeeList = []) => {\r\n    return {\r\n        type: EmployeeActionTypes.STORE_EMPLOYEE_LIST,\r\n        payload: EmployeeList\r\n    };\r\n};\r\n\r\nconst storeCurrentSelectedEmployeeActionCreater = id => {\r\n    return {\r\n        type: EmployeeActionTypes.STORE_CURRENT_SELECTED_EMPLOYEE,\r\n        payload: id\r\n    };\r\n};\r\n\r\n//  Interactive with reducer section\r\nconst requestGetDataFetch = status => {\r\n    return {\r\n        type: EmployeeActionTypes.REQUEST_FETCH_API,\r\n        payload: status\r\n    };\r\n};\r\n\r\nconst getEmployeeList = () => {\r\n    return async (dispatch, getState) => {\r\n        try {\r\n            //  inform store we are going to fetch some data\r\n            await dispatch(requestGetDataFetch(true));\r\n            // if fetching status of Employee component is true\r\n            if (getState().Employee.fetchStatus) {\r\n                console.log(\"State: \" + JSON.stringify(getState().Login.loginInfor.token));\r\n\r\n                //  get list Employee from API\r\n                const fetchRequest = await fetch(\r\n                    `${APISettings.BASE_API_URL}/${APISettings.ACCOUNT_API_URL}?ref_fields=asp_net_user%2Cmanage_project`, {\r\n                        method: \"get\",\r\n                        headers: {\r\n                            \"Content-Type\": \"Employee/json\",\r\n                            Authorization: \"bearer \" + getState().Login.loginInfor.token\r\n                        }\r\n                    }\r\n                );\r\n                console.log(\r\n                    \"Response data after requesting get data: \" +\r\n                    JSON.stringify(fetchRequest)\r\n                );\r\n\r\n                // the fetch() API only rejects a promise when\r\n                //  a “network error is encountered, although this usually means permissions issues or similar.”\r\n                //  =>  response have ok for other invalid HTTP response\r\n                if (!fetchRequest.ok) {\r\n                    throw Error(fetchRequest.statusText);\r\n                }\r\n                if (fetchRequest.status === 401) {\r\n                    localStorage.clear();\r\n                    throw Error(fetchRequest.statusText);\r\n                }\r\n                //  response data\r\n                const result = await fetchRequest.json();\r\n                // console.log(\r\n                //   \"Data after requesting get data: \" + JSON.stringify(result)\r\n                // );\r\n\r\n                //  store payload data into store\r\n                await dispatch(storeEmployeeListActionCreator(result));\r\n\r\n            }\r\n        } catch (error) {\r\n            console.log(\"An error occurred in Employee action \", error);\r\n        } finally {\r\n            //  wherether call API success or fail, inform store fetching status request is done\r\n            dispatch(requestGetDataFetch(false));\r\n        }\r\n    };\r\n};\r\n\r\nconst toggleCreateEmployeeModal = (dispatch, getState) => {\r\n    return dispatch({\r\n        type: EmployeeActionTypes.TOGGLE_CREATE_EMPLOYEE_MODAL\r\n    });\r\n};\r\n\r\nconst toggleEmployeeInformationModal = dispatch => {\r\n    return dispatch({\r\n        type: EmployeeActionTypes.TOGGLE_INFORMATION_MODAL\r\n    });\r\n};\r\n\r\nconst storeCurrentSelectedEmployee = id => {\r\n    return async (dispatch, getState) => {\r\n        await dispatch(storeCurrentSelectedEmployeeActionCreater(id));\r\n    };\r\n};\r\n\r\n//  Create section\r\nconst createNewEmployee = ({\r\n    password = \"string\",\r\n    confirm_password = \"string\",\r\n    is_admin = false,\r\n    email = \"string.com.vn\",\r\n    address = \"string\",\r\n    name = \"string\",\r\n    phone = \"099999999\",\r\n    manager_registration_token = \"string\",\r\n    role = 5\r\n}) => {\r\n    return async (dispatch, getState) => {\r\n        try {\r\n            //  inform store we are going to fetch some data\r\n            await dispatch(requestGetDataFetch(true));\r\n\r\n            // if fetching status of Employee component is true\r\n            if (getState().Employee.fetchStatus) {\r\n                let createModel = {\r\n                    password,\r\n                    confirm_password,\r\n                    is_admin: false,\r\n                    email,\r\n                    address,\r\n                    name,\r\n                    phone,\r\n                    manager_registration_token: getState().Login.loginInfor.role && getState().Login.loginInfor.role === 1 ? \"token_v2_7/2019\" : \"string\",\r\n                    role: getState().Login.loginInfor.role && getState().Login.loginInfor.role === 2 ? 3 : 5\r\n                }\r\n\r\n                console.log(\"createNewEmployee \" + JSON.stringify(createModel));\r\n                //  call API to update general information \r\n                const fetchRequest = await fetch(\r\n                    `${APISettings.BASE_API_URL}/${APISettings.ACCOUNT_API_URL}/register`, {\r\n                        method: \"post\",\r\n                        headers: {\r\n                            \"Content-Type\": \"Application/json\",\r\n                            Authorization: \"bearer \" + getState().Login.loginInfor.token\r\n                        },\r\n                        body: JSON.stringify(createModel),\r\n                    }\r\n                );\r\n                console.log(\r\n                    \"Response data after requesting get data: \" +\r\n                    JSON.stringify(fetchRequest)\r\n                );\r\n\r\n                // the fetch() API only rejects a promise when\r\n                //  a “network error is encountered, although this usually means permissions issues or similar.”\r\n                //  =>  response have ok for other invalid HTTP response\r\n                if (!fetchRequest.ok) {\r\n                    throw Error(fetchRequest.statusText);\r\n                }\r\n                if (fetchRequest.status === 401) {\r\n                    localStorage.clear();\r\n                    throw Error(fetchRequest.statusText);\r\n                }\r\n                alert(\"Create successfully\");\r\n            }\r\n        } catch (error) {\r\n\r\n            alert(\"Wrong input\");\r\n            console.log(\"An error occurred in Employee action \", error);\r\n        } finally {\r\n            //  wherether call API success or fail, inform store fetching status request is done\r\n            dispatch(requestGetDataFetch(false));\r\n            // console.log(\r\n            //   \"State after finish requesting fetch: \" + JSON.stringify(getState().Employee)\r\n            // );\r\n        }\r\n    };\r\n};\r\n\r\n//  Request reseting pasword\r\nconst requestResetPassword = (\r\n    email = \"string.com.vn\"\r\n) => {\r\n    return async (dispatch, getState) => {\r\n        try {\r\n            //  inform store we are going to fetch some data\r\n            await dispatch(requestGetDataFetch(true));\r\n\r\n            // if fetching status of Employee component is true\r\n            if (getState().Employee.fetchStatus) {\r\n\r\n                console.log(\"requestResetPassword \" + email);\r\n                //  call API to update general information \r\n                const fetchRequest = await fetch(\r\n                    `${APISettings.BASE_API_URL}/${APISettings.ACCOUNT_API_URL}/reset?email=${email}`, {\r\n                        method: \"post\",\r\n                        headers: {\r\n                            \"Content-Type\": \"Application/json\",\r\n                        },\r\n                    }\r\n                );\r\n                console.log(\r\n                    \"Response data after requesting get data: \" +\r\n                    JSON.stringify(fetchRequest)\r\n                );\r\n\r\n                // the fetch() API only rejects a promise when\r\n                //  a “network error is encountered, although this usually means permissions issues or similar.”\r\n                //  =>  response have ok for other invalid HTTP response\r\n                if (!fetchRequest.ok) {\r\n                    throw Error(fetchRequest.statusText);\r\n                }\r\n                if (fetchRequest.status === 401) {\r\n                    localStorage.clear();\r\n                    throw Error(fetchRequest.statusText);\r\n                }\r\n                alert(\"Request successfully\");\r\n            }\r\n        } catch (error) {\r\n\r\n            alert(\"Wrong email\");\r\n            console.log(\"An error occurred in Employee action \", error);\r\n        } finally {\r\n            //  wherether call API success or fail, inform store fetching status request is done\r\n            dispatch(requestGetDataFetch(false));\r\n            // console.log(\r\n            //   \"State after finish requesting fetch: \" + JSON.stringify(getState().Employee)\r\n            // );\r\n        }\r\n    };\r\n};\r\n\r\n//  Update Employee General Information\r\nconst updateEmployeeGeneralInformation = ({\r\n    id = 0,\r\n    system_id = 0,\r\n    name = \"string\",\r\n    description = \"string\",\r\n    note = \"string\",\r\n    start_date = new Date(Date.now()),\r\n    end_date = new Date(Date.now()),\r\n    category = 0,\r\n    stage = 0,\r\n    origin = \"string\",\r\n    type = \"string\",\r\n    source_code_url = \"string\",\r\n    technologies = \"string\",\r\n    priority = 0,\r\n    status = 0\r\n}) => {\r\n    return async (dispatch, getState) => {\r\n        try {\r\n            //  inform store we are going to fetch some data\r\n            await dispatch(requestGetDataFetch(true));\r\n            // if fetching status of Employee component is true\r\n            if (getState().Employee.fetchStatus) {\r\n                console.log(\"State: \" + JSON.stringify(getState().Login.loginInfor.token));\r\n                let updateModel = {\r\n                    id,\r\n                    system_id,\r\n                    name,\r\n                    description,\r\n                    note,\r\n                    start_date,\r\n                    end_date,\r\n                    category,\r\n                    stage,\r\n                    origin,\r\n                    type,\r\n                    source_code_url,\r\n                    technologies,\r\n                    priority,\r\n                    status\r\n                }\r\n\r\n                console.log(\"111111 \" + JSON.stringify(updateModel));\r\n                //  call API to update general information \r\n                const fetchRequest = await fetch(\r\n                    `${APISettings.BASE_API_URL}/${APISettings.ACCOUNT_API_URL}`, {\r\n                        method: \"PUT\",\r\n                        headers: {\r\n                            \"Content-Type\": \"Employee/json\",\r\n                            Authorization: \"bearer \" + getState().Login.loginInfor.token\r\n                        },\r\n                        body: JSON.stringify(updateModel),\r\n                    }\r\n                );\r\n                console.log(\r\n                    \"Response data after requesting get data: \" +\r\n                    JSON.stringify(fetchRequest)\r\n                );\r\n\r\n                // the fetch() API only rejects a promise when\r\n                //  a “network error is encountered, although this usually means permissions issues or similar.”\r\n                //  =>  response have ok for other invalid HTTP response\r\n                if (!fetchRequest.ok) {\r\n                    throw Error(fetchRequest.statusText);\r\n                }\r\n                if (fetchRequest.status === 401) {\r\n                    localStorage.clear();\r\n                    throw Error(fetchRequest.statusText);\r\n                }\r\n                //  response data\r\n                // const result = await fetchRequest.json();\r\n                // console.log(\r\n                //   \"Data after requesting get data: \" + JSON.stringify(result)\r\n                // );\r\n\r\n                //  store payloaddata into store\r\n                // await dispatch(storeEmployeeListActionCreator(result));\r\n                // console.log(\r\n                //   \"State after requesting get data: \" +\r\n                //     JSON.stringify(getState().Employee)\r\n                // );\r\n            }\r\n        } catch (error) {\r\n            console.log(\"An error occurred in Employee action \", error);\r\n        } finally {\r\n            //  wherether call API success or fail, inform store fetching status request is done\r\n            dispatch(requestGetDataFetch(false));\r\n            // console.log(\r\n            //   \"State after finish requesting fetch: \" + JSON.stringify(getState().Employee)\r\n            // );\r\n        }\r\n    };\r\n};\r\n\r\n//  Project assignment\r\nconst addEmployeeIntoProject = ({\r\n    id = 0,\r\n    application_id = 0,\r\n    Application_instance_id = 0\r\n}) => {\r\n    return async (dispatch, getState) => {\r\n        try {\r\n            //  inform store we are going to fetch some data\r\n            await dispatch(requestGetDataFetch(true));\r\n            // if fetching status of Employee component is true\r\n            if (getState().Employee.fetchStatus) {\r\n                let createModel = {\r\n                    id,\r\n                    application_id,\r\n                    Application_instance_id\r\n                }\r\n                console.log(\"addEmployeeIntoProject \" + JSON.stringify(createModel));\r\n\r\n                //  call API to update general information \r\n                const fetchRequest = await fetch(\r\n                    `${APISettings.BASE_API_URL}/${APISettings.ACCOUNT_API_URL}/employee_assignment`, {\r\n                        method: \"patch\",\r\n                        headers: {\r\n                            \"Content-Type\": \"Application/json\",\r\n                            Authorization: \"bearer \" + getState().Login.loginInfor.token\r\n                        },\r\n                        body: JSON.stringify(createModel),\r\n                    }\r\n                );\r\n                console.log(\r\n                    \"Response data after requesting get data: \" +\r\n                    JSON.stringify(fetchRequest)\r\n                );\r\n\r\n                // the fetch() API only rejects a promise when\r\n                //  a “network error is encountered, although this usually means permissions issues or similar.”\r\n                //  =>  response have ok for other invalid HTTP response\r\n                if (!fetchRequest.ok) {\r\n                    throw Error(fetchRequest.statusText);\r\n                }\r\n                if (fetchRequest.status === 401) {\r\n                    localStorage.clear();\r\n                    throw Error(fetchRequest.statusText);\r\n                }\r\n\r\n            }\r\n        } catch (error) {\r\n\r\n            console.log(\"An error occurred in Employee action \", error);\r\n        } finally {\r\n            //  wherether call API success or fail, inform store fetching status request is done\r\n            dispatch(requestGetDataFetch(false));\r\n            // console.log(\r\n            //   \"State after finish requesting fetch: \" + JSON.stringify(getState().Employee)\r\n            // );\r\n        }\r\n    };\r\n};\r\n\r\n//  Update Employee Status \r\nconst updateEmployeeStatus = (\r\n    id = 0,\r\n    active = true,\r\n) => {\r\n    return async (dispatch, getState) => {\r\n        try {\r\n            //  inform store we are going to fetch some data\r\n            await dispatch(requestGetDataFetch(true));\r\n\r\n            // if fetching status of Employee component is true\r\n            if (getState().Employee.fetchStatus) {\r\n                console.log(\"State: \" + JSON.stringify(getState().Login.loginInfor.token));\r\n\r\n                //  update Employee detail\r\n                let updateModel = {\r\n                    id: id,\r\n                    active: active,\r\n                    change_status: true,\r\n                    Employee_detail: null\r\n                }\r\n                // let updateModel = {\r\n                //   \"client_id\": 0,\r\n                //   \"service_id\": 0\r\n                // }\r\n\r\n                const fetchRequest = await fetch(\r\n                    `${APISettings.BASE_API_URL}/${APISettings.ACCOUNT_API_URL}`, {\r\n                        mode: \"cors\",\r\n                        method: \"patch\",\r\n                        headers: {\r\n                            Accept: 'Employee/json',\r\n                            \"Content-Type\": \"Employee/json\",\r\n                            Authorization: \"bearer \" + getState().Login.loginInfor.token,\r\n                            // \"Access-Control-Allow-Origin\": \"*\"\r\n                        },\r\n                        body: JSON.stringify(updateModel)\r\n                    }\r\n                );\r\n                console.log(\r\n                    \"Response data after requesting get data: \" +\r\n                    JSON.stringify(fetchRequest)\r\n                );\r\n\r\n                // the fetch() API only rejects a promise when\r\n                //  a “network error is encountered, although this usually means permissions issues or similar.”\r\n                //  =>  response have ok for other invalid HTTP response\r\n                if (!fetchRequest.ok) {\r\n                    console.log(JSON.stringify(fetchRequest));\r\n                    throw Error(fetchRequest.statusText);\r\n                }\r\n                if (fetchRequest.status === 401) {\r\n                    localStorage.clear();\r\n                    throw Error(fetchRequest.statusText);\r\n                }\r\n                // const fetchGetRequest = await fetch(\r\n                //   `${APISettings.BASE_API_URL}/${APISettings.ACCOUNT_API_URL}/?ref_fields=Employee_detail%2Crepo%2CEmployee_account`, {\r\n                //     method: \"get\",\r\n                //     headers: {\r\n                //       \"Content-Type\": \"Employee/json\",\r\n                //       Authorization: \"bearer \" + getState().Login.loginInfor.token\r\n                //     }\r\n                //   }\r\n                // );\r\n\r\n                // // the fetch() API only rejects a promise when\r\n                // //  a “network error is encountered, although this usually means permissions issues or similar.”\r\n                // //  =>  response have ok for other invalid HTTP response\r\n                // if (!fetchGetRequest.ok) {\r\n                //   throw Error(fetchGetRequest.statusText);\r\n                // }\r\n                // if (fetchGetRequest.status === 401) {\r\n                //   localStorage.clear();\r\n                //   throw Error(fetchGetRequest.statusText);\r\n                // }\r\n                // //  response data\r\n                // const getResult = await fetchGetRequest.json();\r\n                // // console.log(\r\n                // //   \"Data after requesting get data: \" + JSON.stringify(result)\r\n                // // );\r\n\r\n                // //  store payload data into store\r\n                // await dispatch(storeEmployeeListActionCreator(getResult));\r\n\r\n                // //  store Employees regist as Employee master\r\n                // await dispatch(\r\n                //   storeEmployeeMasterListActionCreator(getState().Employee.currentDataList)\r\n                // );\r\n\r\n            }\r\n        } catch (error) {\r\n            console.log(\"An error occurred in Employee action \", error);\r\n        } finally {\r\n            //  wherether call API success or fail, inform store fetching status request is done\r\n            dispatch(requestGetDataFetch(false));\r\n            //  recall getting Employee list after update\r\n        }\r\n    };\r\n}\r\n\r\n//  Update Employee Detail \r\nconst updateEmployeeDetail = (\r\n    Employee_detail_id = 0,\r\n    id = 0,\r\n    disk1 = \"\",\r\n    disk2 = \"\",\r\n    disk3 = \"\",\r\n    volume_disk1 = \"\",\r\n    volume_disk2 = \"\",\r\n    volume_disk3 = \"\"\r\n) => {\r\n    return async (dispatch, getState) => {\r\n        try {\r\n            //  inform store we are going to fetch some data\r\n            await dispatch(requestGetDataFetch(true));\r\n\r\n            // if fetching status of Employee component is true\r\n            if (getState().Employee.fetchStatus) {\r\n                console.log(\"State: \" + JSON.stringify(getState().Login.loginInfor.token));\r\n\r\n                //  update Employee detail\r\n                let updateModel = {\r\n                    id: id,\r\n                    active: true,\r\n                    change_status: false,\r\n                    Employee_detail: {\r\n                        id: Employee_detail_id,\r\n                        Employee_id: id,\r\n                        disk1: disk1,\r\n                        volume_disk1: volume_disk1,\r\n                        disk2: disk2,\r\n                        volume_disk2: volume_disk2,\r\n                        disk3: disk3,\r\n                        volume_disk3: volume_disk3,\r\n                        active: true\r\n                    }\r\n                }\r\n                const fetchRequest = await fetch(\r\n                    `${APISettings.BASE_API_URL}/${APISettings.ACCOUNT_API_URL}`, {\r\n                        method: \"patch\",\r\n                        headers: {\r\n                            \"Content-Type\": \"Employee/json\",\r\n                            Authorization: \"bearer \" + getState().Login.loginInfor.token\r\n                        },\r\n                        body: JSON.stringify(updateModel)\r\n                    }\r\n                );\r\n                console.log(\r\n                    \"Response data after requesting get data: \" +\r\n                    JSON.stringify(fetchRequest)\r\n                );\r\n\r\n                // the fetch() API only rejects a promise when\r\n                //  a “network error is encountered, although this usually means permissions issues or similar.”\r\n                //  =>  response have ok for other invalid HTTP response\r\n                if (!fetchRequest.ok) {\r\n                    throw Error(fetchRequest.statusText);\r\n                }\r\n                if (fetchRequest.status === 401) {\r\n                    localStorage.clear();\r\n                    throw Error(fetchRequest.statusText);\r\n                }\r\n            }\r\n        } catch (error) {\r\n            console.log(\"An error occurred in Employee action \", error);\r\n        } finally {\r\n            //  wherether call API success or fail, inform store fetching status request is done\r\n            dispatch(requestGetDataFetch(false));\r\n        }\r\n    };\r\n}\r\n\r\n//  Update Employee Account \r\nconst updateEmployeeAccount = ({\r\n    Employee_id = 0,\r\n    username = \"\",\r\n    password = \"\"\r\n}) => {\r\n    return async (dispatch, getState) => {\r\n        try {\r\n            //  inform store we are going to fetch some data\r\n            await dispatch(requestGetDataFetch(true));\r\n\r\n            // if fetching status of Employee component is true\r\n            if (getState().Employee.fetchStatus) {\r\n                console.log(\"State: \" + JSON.stringify(getState().Login.loginInfor.token));\r\n\r\n                //  update Employee account\r\n                let updateModel = {\r\n                    \"Employee_id\": Employee_id,\r\n                    \"username\": username,\r\n                    \"password\": password\r\n                }\r\n                const fetchRequest = await fetch(\r\n                    `${APISettings.BASE_API_URL}/${APISettings.Employee_ACCOUNT_URL}`, {\r\n                        method: \"put\",\r\n                        headers: {\r\n                            \"Content-Type\": \"Employee/json\",\r\n                            Authorization: \"bearer \" + getState().Login.loginInfor.token\r\n                        },\r\n                        body: JSON.stringify(updateModel)\r\n                    }\r\n                );\r\n                console.log(\r\n                    \"Response data after requesting get data: \" +\r\n                    JSON.stringify(fetchRequest)\r\n                );\r\n\r\n                // the fetch() API only rejects a promise when\r\n                //  a “network error is encountered, although this usually means permissions issues or similar.”\r\n                //  =>  response have ok for other invalid HTTP response\r\n                if (!fetchRequest.ok) {\r\n                    throw Error(fetchRequest.statusText);\r\n                }\r\n                if (fetchRequest.status === 401) {\r\n                    localStorage.clear();\r\n                    throw Error(fetchRequest.statusText);\r\n                }\r\n            }\r\n        } catch (error) {\r\n            console.log(\"An error occurred in Employee action \", error);\r\n        } finally {\r\n            //  wherether call API success or fail, inform store fetching status request is done\r\n            dispatch(requestGetDataFetch(false));\r\n        }\r\n    };\r\n}\r\n\r\nexport default {\r\n    getData: getEmployeeList,\r\n    createNewEmployee: createNewEmployee,\r\n    toggleCreateModal: toggleCreateEmployeeModal,\r\n    toggleInformationModal: toggleEmployeeInformationModal,\r\n    storeCurrentSelectedEmployee: storeCurrentSelectedEmployee,\r\n    updateEmployeeGeneralInformation: updateEmployeeGeneralInformation,\r\n    updateEmployeeStatus: updateEmployeeStatus,\r\n    updateEmployeeDetail: updateEmployeeDetail,\r\n    updateEmployeeAccount: updateEmployeeAccount,\r\n    addEmployeeIntoProject: addEmployeeIntoProject,\r\n    requestResetPassword: requestResetPassword,\r\n\r\n};","import {\r\n  ApplicationActionTypes\r\n} from \"../constants\";\r\nimport {\r\n  ProfileActionTypes, LoginActionTypes\r\n} from \"../constants.js\";\r\nimport Action from \"../Action/index.js\";\r\nimport fetch from \"cross-fetch\";\r\nimport APISettings from \"../Url/APISettings\";\r\n\r\n// const today = new Date(Date.now());\r\n\r\n\r\n//  Action creator section\r\nconst storeProfileActionCreator = (profile) => {\r\n  return {\r\n    type: ProfileActionTypes.STORE_PROFILE,\r\n    payload: profile\r\n  };\r\n};\r\n\r\nconst toggleProfileComponentActionCreator = () => {\r\n  return {\r\n    type: ProfileActionTypes.TOGGLE_PROFILE_COMPONENT,\r\n  };\r\n}\r\n\r\n//  Interactive with reducer section\r\nconst requestGetDataFetch = status => {\r\n  return {\r\n    type: ProfileActionTypes.TOGGLE_PROFILE_COMPONENT,\r\n    payload: status\r\n  };\r\n};\r\n\r\nconst toggleProfileComponent = () => {\r\n\r\n  return async (dispatch, getState) => {\r\n\r\n    //  inform store we are going to fetch some data\r\n    await dispatch(toggleProfileComponentActionCreator());\r\n\r\n\r\n  };\r\n}\r\n\r\n//  Update Profile General Information\r\nconst updateProfile = ({\r\n  id = 0,\r\n  email = \"string\",\r\n  address = \"string\",\r\n  name = \"string\",\r\n  phone = \"string\"\r\n}) => {\r\n  return async (dispatch, getState) => {\r\n    try {\r\n      //  inform store we are going to fetch some data\r\n      await dispatch(requestGetDataFetch(true));\r\n\r\n      // if fetching status of Profile component is true\r\n      if (getState().Profile.fetchStatus) {\r\n        console.log(\"State: \" + JSON.stringify(getState().Login.loginInfor.token));\r\n        let updateModel = {\r\n          id,\r\n          email,\r\n          address,\r\n          name,\r\n          phone\r\n        }\r\n\r\n\r\n        //  call API to update general information \r\n        const fetchRequest = await fetch(\r\n          `${APISettings.BASE_API_URL}/${APISettings.ACCOUNT_API_URL}`, {\r\n            method: \"PUT\",\r\n            headers: {\r\n              \"Content-Type\": \"application/json\",\r\n              Authorization: \"bearer \" + getState().Login.loginInfor.token\r\n            },\r\n            body: JSON.stringify(updateModel),\r\n          }\r\n        );\r\n        console.log(\r\n          \"Response data after requesting get data: \" +\r\n          JSON.stringify(fetchRequest)\r\n        );\r\n\r\n        // the fetch() API only rejects a promise when\r\n        //  a “network error is encountered, although this usually means permissions issues or similar.”\r\n        //  =>  response have ok for other invalid HTTP response\r\n        if (!fetchRequest.ok) {\r\n          throw Error(fetchRequest.statusText);\r\n        }\r\n        if (fetchRequest.status === 401) {\r\n          localStorage.clear();\r\n          throw Error(fetchRequest.statusText);\r\n        }\r\n        //  response data\r\n        const result = await fetchRequest.json();\r\n        console.log(\r\n          \"Data after requesting get data: \" + JSON.stringify(result)\r\n        );\r\n      }\r\n    } catch (error) {\r\n      console.log(\"An error occurred in Profile action \", error);\r\n    } finally {\r\n      //  wherether call API success or fail, inform store fetching status request is done\r\n      dispatch(requestGetDataFetch(false));\r\n      // console.log(\r\n      //   \"State after finish requesting fetch: \" + JSON.stringify(getState().Profile)\r\n      // );\r\n    }\r\n  };\r\n};\r\n\r\n// Password section\r\nconst changePassword = ({\r\n  email = \"string\",\r\n  current_password = \"\",\r\n  new_password = \"string\",\r\n  confirm_password = \"string\",\r\n  token = \"\"\r\n}) => {\r\n  return async (dispatch, getState) => {\r\n    try {\r\n      //  inform store we are going to fetch some data\r\n      await dispatch(requestGetDataFetch(true));\r\n\r\n      // if fetching status of Profile component is true\r\n      if (getState().Profile.fetchStatus) {\r\n        console.log(\"State: \" + JSON.stringify(getState().Login.loginInfor.token));\r\n        let updateModel = {\r\n          email,\r\n          current_password,\r\n          new_password,\r\n          confirm_password,\r\n          token\r\n        }\r\n\r\n        //  call API to update general information \r\n        const fetchRequest = await fetch(\r\n          `${APISettings.BASE_API_URL}/${APISettings.ACCOUNT_API_URL}/password_changing`, {\r\n            method: \"patch\",\r\n            headers: {\r\n              \"Content-Type\": \"application/json\",\r\n              Authorization: \"bearer \" + getState().Login.loginInfor.token\r\n            },\r\n            body: JSON.stringify(updateModel),\r\n          }\r\n        );\r\n        console.log(\r\n          \"Response data after requesting get data: \" +\r\n          JSON.stringify(fetchRequest)\r\n        );\r\n\r\n        // the fetch() API only rejects a promise when\r\n        //  a “network error is encountered, although this usually means permissions issues or similar.”\r\n        //  =>  response have ok for other invalid HTTP response\r\n        if (!fetchRequest.ok) {\r\n          throw Error(fetchRequest.statusText);\r\n        }\r\n        if (fetchRequest.status === 401) {\r\n          localStorage.clear();\r\n          throw Error(fetchRequest.statusText);\r\n        }\r\n        if (fetchRequest.status === 400) {\r\n          alert(\"Confirmed password is not match or user has been removed\");\r\n          throw Error(fetchRequest.statusText);\r\n        }\r\n        alert(\"Password has been changed successfully\");\r\n        //  response data\r\n        const result = await fetchRequest.json();\r\n        console.log(\r\n          \"Data after requesting get data: \" + JSON.stringify(result)\r\n        );\r\n      }\r\n    } catch (error) {\r\n      console.log(\"An error occurred in Profile action \", error);\r\n    } finally {\r\n      //  wherether call API success or fail, inform store fetching status request is done\r\n      dispatch(requestGetDataFetch(false));\r\n      // console.log(\r\n      //   \"State after finish requesting fetch: \" + JSON.stringify(getState().Profile)\r\n      // );\r\n    }\r\n  };\r\n};\r\n\r\nconst getProfile = (id = 0, token = \"\") => {\r\n  return async (dispatch, getState) => {\r\n    try {\r\n      //  inform store we are going to fetch some data\r\n      await dispatch(requestGetDataFetch(true));\r\n      // if fetching status of Employee component is true\r\n      if (getState().Employee.fetchStatus) {\r\n        console.log(\"State: \" + JSON.stringify(getState().Login.loginInfor.token));\r\n        console.log(\"State: \" + JSON.stringify(token));\r\n\r\n        //  get list Employee from API\r\n        const fetchRequest = await fetch(\r\n          `${APISettings.BASE_API_URL}/${APISettings.ACCOUNT_API_URL}?ids=${id}&ref_fields=asp_net_user%2Cmanage_project`, {\r\n            method: \"get\",\r\n            headers: {\r\n              \"Content-Type\": \"Employee/json\",\r\n              Authorization: \"bearer \" + token ? token : getState().Login.loginInfor.token\r\n            }\r\n          }\r\n        );\r\n        console.log(\r\n          \"Response data after requesting get data: \" +\r\n          JSON.stringify(fetchRequest)\r\n        );\r\n\r\n        // the fetch() API only rejects a promise when\r\n        //  a “network error is encountered, although this usually means permissions issues or similar.”\r\n        //  =>  response have ok for other invalid HTTP response\r\n        if (!fetchRequest.ok) {\r\n          throw Error(fetchRequest.statusText);\r\n        }\r\n        if (fetchRequest.status === 401) {\r\n          Action.Login.logout();\r\n          localStorage.clear();\r\n          throw Error(fetchRequest.statusText);\r\n        }\r\n        //  response data\r\n        const result = await fetchRequest.json();\r\n        // console.log(\r\n        //   \"Data after requesting get data: \" + JSON.stringify(result)\r\n        // );\r\n\r\n        //  store payload data into store\r\n        await dispatch(storeProfileActionCreator(result[0]));\r\n      }\r\n    } catch (error) {\r\n      console.log(\"An error occurred in Employee action \", error);\r\n    } finally {\r\n      //  wherether call API success or fail, inform store fetching status request is done\r\n      dispatch(requestGetDataFetch(false));\r\n    }\r\n  };\r\n};\r\n\r\n\r\nconst toggleProfileInformationModal = dispatch => {\r\n  return dispatch({\r\n    type: ProfileActionTypes.TOGGLE_INFORMATION_MODAL\r\n  });\r\n};\r\nexport default {\r\n  getData: getProfile,\r\n  toggleProfileComponent: toggleProfileComponent,\r\n  updateProfile: updateProfile,\r\n\r\n  toggleInformationModal: toggleProfileInformationModal,\r\n  changePassword: changePassword\r\n};","import LoginAction from \"./LoginAction\";\r\nimport ServerActions from \"./ServerAction\";\r\nimport ApplicationAction from \"./ApplicationAction\";\r\nimport RepoAction from \"./RepoAction\";\r\nimport SystemAction from \"./SystemAction\";\r\nimport LogAction from \"./LogAction\";\r\nimport ApplicationInstanceAction from \"./ApplicationInstanceAction\";\r\nimport EmployeeAction from \"./EmployeeAction.js\";\r\nimport ProfileAction from \"./ProfileAction.js\";\r\n\r\nexport default {\r\n  Login: LoginAction,\r\n  GetServerList: ServerActions.getDataDispatch,\r\n  Server: ServerActions,\r\n  Application: ApplicationAction,\r\n  Repo: RepoAction,\r\n  System: SystemAction,\r\n  Log: LogAction,\r\n  ApplicationInstance: ApplicationInstanceAction,\r\n  Employee: EmployeeAction,\r\n  Profile: ProfileAction,\r\n};","/*eslint-disable*/\r\nimport React from \"react\";\r\nimport { NavLink as NavLinkRRD, Link } from \"react-router-dom\";\r\n// nodejs library to set properties for components\r\nimport { PropTypes } from \"prop-types\";\r\n\r\n// reactstrap components\r\nimport {\r\n  Collapse,\r\n  NavbarBrand,\r\n  Navbar,\r\n  NavItem,\r\n  NavLink,\r\n  Nav,\r\n  Container,\r\n  Row,\r\n  Col\r\n} from \"reactstrap\";\r\nimport LayoutSearchForm from \"./../Layout/LayoutSearchForm.jsx\";\r\nimport LayoutAvatar from \"./../Layout/LayoutAvatar.jsx\";\r\n\r\n//  redux component\r\n//  set up redux\r\nimport { connect } from \"react-redux\";\r\nimport { withRouter } from \"react-router-dom\";\r\nimport Action from \"../../../redux/Action/index.js\";\r\n\r\n//  compose function:\r\n//  - (...fns): array all function need to compose\r\n//  - x: collection / input value\r\n//  - reduceRight: array loop function, from right to left (last -> last - 1 -> last - 2 -> ...)\r\n//  =>  (y, f) => f(y), x === (previousValue, currentFunction) => currentFunction(previousValue), x\r\n//  =>  take last function in collectionFunction fns, use innitial value x, return value (y)\r\n//  =>  [a, b, c] => reduceRight((y, f) => f(y), x) === a(b(c))\r\nconst compose = (...fns) => x => fns.reduceRight((y, f) => f(y), x);\r\n\r\nvar ps;\r\n\r\nclass SidebarResponsive extends React.Component {\r\n  state = {\r\n    collapseOpen: false\r\n  };\r\n  constructor(props) {\r\n    super(props);\r\n    this.activeRoute.bind(this);\r\n  }\r\n  // verifies if routeName is the one active (in browser input)\r\n  activeRoute(routeName) {\r\n    return this.props.location.pathname.indexOf(routeName) > -1 ? \"active\" : \"\";\r\n  }\r\n  // toggles collapse between opened and closed (true/false)\r\n  toggleCollapse = () => {\r\n    this.setState({\r\n      collapseOpen: !this.state.collapseOpen\r\n    });\r\n  };\r\n  // closes the collapse\r\n  closeCollapse = () => {\r\n    this.setState({\r\n      collapseOpen: false\r\n    });\r\n  };\r\n  // creates the links that appear in the left menu / SidebarResponsive\r\n  createLinks = routes => {\r\n    return routes.map((prop, key) => {\r\n      return (\r\n        \r\n        this.props.role == 1 && (prop.role).includes(\"/admin\") ?\r\n        \r\n          <NavItem key={key}>\r\n            <NavLink\r\n              to={prop.layout + prop.path}\r\n              tag={NavLinkRRD}\r\n              onClick={this.closeCollapse}\r\n              activeClassName=\"active\"\r\n            >\r\n              <i className={prop.icon} />\r\n              {/* <h4 className=\" text-white\">{prop.name}</h4> */}\r\n              <font color={'#FFA07A'}>{prop.name}</font>\r\n            </NavLink>\r\n          </NavItem>\r\n          : null\r\n\r\n      );\r\n    });\r\n  };\r\n  render() {\r\n    const { bgColor, routes, logo } = this.props;\r\n    let navbarBrandProps;\r\n    if (logo && logo.innerLink) {\r\n      navbarBrandProps = {\r\n        to: logo.innerLink,\r\n        tag: Link\r\n      };\r\n    } else if (logo && logo.outterLink) {\r\n      navbarBrandProps = {\r\n        href: logo.outterLink,\r\n        target: \"_blank\"\r\n      };\r\n    }\r\n    return (\r\n\r\n      <Navbar\r\n        style={{ backgroundColor: '#800000' }}\r\n        className=\"navbar-vertical fixed-left navbar-light \"\r\n        expand=\"md\"\r\n        id=\"sidenav-main\"\r\n      >\r\n        <Container fluid>\r\n          {/* Toggler */}\r\n          <button\r\n            className=\"navbar-toggler\"\r\n            type=\"button\"\r\n            onClick={this.toggleCollapse}\r\n          >\r\n            <span className=\"navbar-toggler-icon\" />\r\n          </button>\r\n          {/* Brand */}\r\n          {logo ? (\r\n            <NavbarBrand className=\"pt-0\" {...navbarBrandProps}>\r\n              <img\r\n                alt={logo.imgAlt}\r\n                className=\"navbar-brand-img\"\r\n                src={logo.imgSrc}\r\n              />\r\n            </NavbarBrand>\r\n          ) : null}\r\n          {/* User */}\r\n          {/* <Nav className=\"align-items-center d-md-none\">\r\n            <UncontrolledDropdown nav>\r\n              <DropdownToggle nav className=\"nav-link-icon\">\r\n                <i className=\"ni ni-bell-55\" />\r\n              </DropdownToggle>\r\n              <DropdownMenu\r\n                aria-labelledby=\"navbar-default_dropdown_1\"\r\n                className=\"dropdown-menu-arrow\"\r\n                right\r\n              >\r\n                <DropdownItem>Action</DropdownItem>\r\n                <DropdownItem>Another action</DropdownItem>\r\n                <DropdownItem divider />\r\n                <DropdownItem>Something else here</DropdownItem>\r\n              </DropdownMenu>\r\n            </UncontrolledDropdown>\r\n            <UncontrolledDropdown nav>\r\n              <DropdownToggle nav>\r\n                <Media className=\"align-items-center\">\r\n                  <span className=\"avatar avatar-sm rounded-circle\">\r\n                    <img\r\n                      alt=\"...\"\r\n                      src={require(\"assets/img/theme/team-1-800x800.jpg\")}\r\n                    />\r\n                  </span>\r\n                </Media>\r\n              </DropdownToggle>\r\n              <DropdownMenu className=\"dropdown-menu-arrow\" right>\r\n                <DropdownItem className=\"noti-title\" header tag=\"div\">\r\n                  <h6 className=\"text-overflow m-0\">Welcome!</h6>\r\n                </DropdownItem>\r\n                <DropdownItem to=\"/admin/user-profile\" tag={Link}>\r\n                  <i className=\"ni ni-single-02\" />\r\n                  <span>My profile</span>\r\n                </DropdownItem>\r\n                <DropdownItem to=\"/admin/user-profile\" tag={Link}>\r\n                  <i className=\"ni ni-settings-gear-65\" />\r\n                  <span>Settings</span>\r\n                </DropdownItem>\r\n                <DropdownItem to=\"/admin/user-profile\" tag={Link}>\r\n                  <i className=\"ni ni-calendar-grid-58\" />\r\n                  <span>Activity</span>\r\n                </DropdownItem>\r\n                <DropdownItem to=\"/admin/user-profile\" tag={Link}>\r\n                  <i className=\"ni ni-support-16\" />\r\n                  <span>Support</span>\r\n                </DropdownItem>\r\n                <DropdownItem divider />\r\n                <DropdownItem href=\"#pablo\" onClick={e => e.preventDefault()}>\r\n                  <i className=\"ni ni-user-run\" />\r\n                  <span>Logout</span>\r\n                </DropdownItem>\r\n              </DropdownMenu>\r\n            </UncontrolledDropdown>\r\n          </Nav> */}\r\n          <LayoutAvatar\r\n            navProps=\"align-items-center d-md-none\"\r\n          />\r\n          {/* <Nav className=\"align-items-center d-md-none\">\r\n            <UncontrolledDropdown nav>\r\n              <DropdownToggle nav className=\"nav-link-icon\">\r\n                <i className=\"ni ni-bell-55\" />\r\n              </DropdownToggle>\r\n              <DropdownMenu\r\n                aria-labelledby=\"navbar-default_dropdown_1\"\r\n                className=\"dropdown-menu-arrow\"\r\n                right\r\n              >\r\n                <DropdownItem>Action</DropdownItem>\r\n                <DropdownItem>Another action</DropdownItem>\r\n                <DropdownItem divider />\r\n                <DropdownItem>Something else here</DropdownItem>\r\n              </DropdownMenu>\r\n            </UncontrolledDropdown>\r\n              <UncontrolledDropdown nav>\r\n                <DropdownToggle className=\"pr-0\" nav>\r\n                  <Media className=\"align-items-center\">\r\n                    <span className=\"avatar avatar-sm rounded-circle\">\r\n                      <img\r\n                        alt=\"...\"\r\n                        src={require(\"assets/img/theme/team-4-800x800.jpg\")}\r\n                      />\r\n                    </span>\r\n                    <Media className=\"ml-2 d-none d-lg-block\">\r\n                      <span className=\"mb-0 text-sm font-weight-bold\">\r\n                        \r\n                      </span>\r\n                    </Media>\r\n                  </Media>\r\n                </DropdownToggle>\r\n                <DropdownMenu className=\"dropdown-menu-arrow mt-5\" right>\r\n                  <DropdownItem className=\"noti-title\" header tag=\"div\">\r\n                    <h6 className=\"text-overflow m-0\">Welcome!</h6>\r\n                  </DropdownItem>\r\n                  <DropdownItem to=\"/admin/user-profile\" tag={Link}>\r\n                    <i className=\"ni ni-single-02\" />\r\n                    <span>My profile</span>\r\n                  </DropdownItem>\r\n                  <DropdownItem to=\"/admin/user-profile\" tag={Link}>\r\n                    <i className=\"ni ni-settings-gear-65\" />\r\n                    <span>Settings</span>\r\n                  </DropdownItem>\r\n                  <DropdownItem to=\"/admin/user-profile\" tag={Link}>\r\n                    <i className=\"ni ni-calendar-grid-58\" />\r\n                    <span>Activity</span>\r\n                  </DropdownItem>\r\n                  <DropdownItem to=\"/admin/user-profile\" tag={Link}>\r\n                    <i className=\"ni ni-support-16\" />\r\n                    <span>Support</span>\r\n                  </DropdownItem>\r\n                  <DropdownItem divider />\r\n                  <DropdownItem href=\"#pablo\" onClick={e => e.preventDefault()}>\r\n                    <i className=\"ni ni-user-run\" />\r\n                    <span>Logout</span>\r\n                  </DropdownItem>\r\n                </DropdownMenu>\r\n              </UncontrolledDropdown>\r\n            </Nav>  */}\r\n          {/* Collapse */}\r\n          <Collapse navbar isOpen={this.state.collapseOpen}>\r\n            {/* Collapse header */}\r\n            <div className=\"navbar-collapse-header d-md-none\">\r\n              <Row>\r\n                {logo ? (\r\n                  <Col className=\"collapse-brand\" xs=\"6\">\r\n                    {logo.innerLink ? (\r\n                      <Link to={logo.innerLink}>\r\n                        <img alt={logo.imgAlt} src={logo.imgSrc} />\r\n                      </Link>\r\n                    ) : (\r\n                        <a href={logo.outterLink}>\r\n                          <img alt={logo.imgAlt} src={logo.imgSrc} />\r\n                        </a>\r\n                      )}\r\n                  </Col>\r\n                ) : null}\r\n                <Col className=\"collapse-close\" xs=\"6\">\r\n                  <button\r\n                    className=\"navbar-toggler\"\r\n                    type=\"button\"\r\n                    onClick={this.toggleCollapse}\r\n                  >\r\n                    <span />\r\n                    <span />\r\n                  </button>\r\n                </Col>\r\n              </Row>\r\n            </div>\r\n            {/* Form */}\r\n            {/* <LayoutSearchForm\r\n              formProps=\"mt-4 mb-3 d-md-none\"\r\n              inputGroupProps=\"input-group-rounded input-group-merge\"\r\n              inputProps=\"form-control-rounded form-control-prepended text-dark\"\r\n            /> */}\r\n            {/* <Form className=\"mt-4 mb-3 d-md-none\">\r\n              <InputGroup className=\"input-group-rounded input-group-merge\">\r\n                <Input\r\n                  aria-label=\"Search\"\r\n                  className=\"form-control-rounded form-control-prepended input-group-alternative\"\r\n                  placeholder=\"Search\"\r\n                  type=\"search\"\r\n                />\r\n                <InputGroupAddon addonType=\"prepend\">\r\n                  <InputGroupText>\r\n                    <i className=\"fa fa-search-plus\" aria-hidden=\"true\"></i>\r\n                  </InputGroupText>\r\n                </InputGroupAddon>\r\n              </InputGroup>\r\n            </Form>*/}\r\n\r\n            <hr className=\"my-3\" />\r\n            {/* Navigation */}\r\n            <hr style={{ width: '80%' }, { border: \"1px solid white\" }} />\r\n            <Nav navbar>{this.createLinks(routes.filter(route => route.section === \"dynamic\"))}</Nav>\r\n            <hr style={{ width: '80%' }, { border: \"1px solid white\" }} />\r\n            <Nav navbar>{this.createLinks(routes.filter(route => route.section === \"static\"))}</Nav>\r\n            <hr style={{ width: '80%' }, { border: \"1px solid white\" }} />\r\n            <Nav navbar>{this.createLinks(routes.filter(route => route.section === \"profile\"))}</Nav>\r\n            <hr style={{ width: '80%' }, { border: \"1px solid white\" }} />\r\n\r\n            {/* <h6 className=\"navbar-heading text-muted\">Documentation</h6>\r\n            \r\n            <Nav className=\"mb-md-3\" navbar>\r\n              <NavItem>\r\n                <NavLink href=\"https://demos.creative-tim.com/argon-dashboard-react/documentation/overview?ref=adr-admin-SidebarResponsive\">\r\n                  <i className=\"ni ni-spaceship\" />\r\n                  Getting started\r\n                </NavLink>\r\n              </NavItem>\r\n              <NavItem>\r\n                <NavLink href=\"https://demos.creative-tim.com/argon-dashboard-react/documentation/colors?ref=adr-admin-SidebarResponsive\">\r\n                  <i className=\"ni ni-palette\" />\r\n                  Foundation\r\n                </NavLink>\r\n              </NavItem>\r\n              <NavItem>\r\n                <NavLink href=\"https://demos.creative-tim.com/argon-dashboard-react/documentation/alerts?ref=adr-admin-SidebarResponsive\">\r\n                  <i className=\"ni ni-ui-04\" />\r\n                  Components\r\n                </NavLink>\r\n              </NavItem>\r\n            </Nav> */}\r\n          </Collapse>\r\n        </Container>\r\n      </Navbar>\r\n    );\r\n  }\r\n}\r\n\r\nSidebarResponsive.defaultProps = {\r\n  routes: [{}]\r\n};\r\n\r\nSidebarResponsive.propTypes = {\r\n  // links that will be displayed inside the component\r\n  routes: PropTypes.arrayOf(PropTypes.object),\r\n  logo: PropTypes.shape({\r\n    // innerLink is for links that will direct the user within the app\r\n    // it will be rendered as <Link to=\"...\">...</Link> tag\r\n    innerLink: PropTypes.string,\r\n    // outterLink is for links that will direct the user outside the app\r\n    // it will be rendered as simple <a href=\"...\">...</a> tag\r\n    outterLink: PropTypes.string,\r\n    // the image src of the logo\r\n    imgSrc: PropTypes.string.isRequired,\r\n    // the alt for the img\r\n    imgAlt: PropTypes.string.isRequired\r\n  })\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch, ownProps) => ({\r\n  dispatch\r\n});\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n  return {\r\n    role: state.Login.loginInfor.role,\r\n    own: ownProps\r\n  };\r\n};\r\n\r\n//  compose all redux HOC\r\nconst enhance = compose(\r\n  withRouter,\r\n  connect(mapStateToProps, mapDispatchToProps, null)\r\n);\r\n\r\nexport default enhance(SidebarResponsive);\r\n","\nimport React from \"react\";\n\n// reactstrap components\nimport { Card, CardBody, CardTitle, Container, Row, Col } from \"reactstrap\";\n\nclass Header extends React.Component {\n  render() {\n    return (\n      <>\n        <div className=\"header bg-gradient-info pb-8 pt-5 pt-md-8\">\n          <Container fluid>\n            <div className=\"header-body\">\n              {/* Card stats */}\n              <Row>\n                <Col lg=\"6\" xl=\"3\">\n                  <Card className=\"card-stats mb-4 mb-xl-0\">\n                    <CardBody>\n                      <Row>\n                        <div className=\"col\">\n                          <CardTitle\n                            tag=\"h5\"\n                            className=\"text-uppercase text-muted mb-0\"\n                          >\n                            Traffic\n                          </CardTitle>\n                          <span className=\"h2 font-weight-bold mb-0\">\n                            350,897\n                          </span>\n                        </div>\n                        <Col className=\"col-auto\">\n                          <div className=\"icon icon-shape bg-danger text-white rounded-circle shadow\">\n                            <i className=\"fas fa-chart-bar\" />\n                          </div>\n                        </Col>\n                      </Row>\n                      <p className=\"mt-3 mb-0 text-muted text-sm\">\n                        <span className=\"text-success mr-2\">\n                          <i className=\"fa fa-arrow-up\" /> 3.48%\n                        </span>{\" \"}\n                        <span className=\"text-nowrap\">Since last month</span>\n                      </p>\n                    </CardBody>\n                  </Card>\n                </Col>\n                <Col lg=\"6\" xl=\"3\">\n                  <Card className=\"card-stats mb-4 mb-xl-0\">\n                    <CardBody>\n                      <Row>\n                        <div className=\"col\">\n                          <CardTitle\n                            tag=\"h5\"\n                            className=\"text-uppercase text-muted mb-0\"\n                          >\n                            New users\n                          </CardTitle>\n                          <span className=\"h2 font-weight-bold mb-0\">\n                            2,356\n                          </span>\n                        </div>\n                        <Col className=\"col-auto\">\n                          <div className=\"icon icon-shape bg-warning text-white rounded-circle shadow\">\n                            <i className=\"fas fa-chart-pie\" />\n                          </div>\n                        </Col>\n                      </Row>\n                      <p className=\"mt-3 mb-0 text-muted text-sm\">\n                        <span className=\"text-danger mr-2\">\n                          <i className=\"fas fa-arrow-down\" /> 3.48%\n                        </span>{\" \"}\n                        <span className=\"text-nowrap\">Since last week</span>\n                      </p>\n                    </CardBody>\n                  </Card>\n                </Col>\n                <Col lg=\"6\" xl=\"3\">\n                  <Card className=\"card-stats mb-4 mb-xl-0\">\n                    <CardBody>\n                      <Row>\n                        <div className=\"col\">\n                          <CardTitle\n                            tag=\"h5\"\n                            className=\"text-uppercase text-muted mb-0\"\n                          >\n                            Sales\n                          </CardTitle>\n                          <span className=\"h2 font-weight-bold mb-0\">924</span>\n                        </div>\n                        <Col className=\"col-auto\">\n                          <div className=\"icon icon-shape bg-yellow text-white rounded-circle shadow\">\n                            <i className=\"fas fa-users\" />\n                          </div>\n                        </Col>\n                      </Row>\n                      <p className=\"mt-3 mb-0 text-muted text-sm\">\n                        <span className=\"text-warning mr-2\">\n                          <i className=\"fas fa-arrow-down\" /> 1.10%\n                        </span>{\" \"}\n                        <span className=\"text-nowrap\">Since yesterday</span>\n                      </p>\n                    </CardBody>\n                  </Card>\n                </Col>\n                <Col lg=\"6\" xl=\"3\">\n                  <Card className=\"card-stats mb-4 mb-xl-0\">\n                    <CardBody>\n                      <Row>\n                        <div className=\"col\">\n                          <CardTitle\n                            tag=\"h5\"\n                            className=\"text-uppercase text-muted mb-0\"\n                          >\n                            Performance\n                          </CardTitle>\n                          <span className=\"h2 font-weight-bold mb-0\">\n                            49,65%\n                          </span>\n                        </div>\n                        <Col className=\"col-auto\">\n                          <div className=\"icon icon-shape bg-info text-white rounded-circle shadow\">\n                            <i className=\"fas fa-percent\" />\n                          </div>\n                        </Col>\n                      </Row>\n                      <p className=\"mt-3 mb-0 text-muted text-sm\">\n                        <span className=\"text-success mr-2\">\n                          <i className=\"fas fa-arrow-up\" /> 12%\n                        </span>{\" \"}\n                        <span className=\"text-nowrap\">Since last month</span>\n                      </p>\n                    </CardBody>\n                  </Card>\n                </Col>\n              </Row>\n            </div>\n          </Container>\n        </div>\n      </>\n    );\n  }\n}\n\nexport default Header;\n","import React from \"react\";\n// node.js library that concatenates classes (strings)\nimport classnames from \"classnames\";\n// javascipt plugin for creating charts\nimport Chart from \"chart.js\";\n// react plugin used to create charts\nimport { Line, Bar } from \"react-chartjs-2\";\n// reactstrap components\nimport {\n  Button,\n  Card,\n  CardHeader,\n  CardBody,\n  NavItem,\n  NavLink,\n  Nav,\n  Progress,\n  Table,\n  Container,\n  Row,\n  Col\n} from \"reactstrap\";\n\n// core components\nimport {\n  chartOptions,\n  parseOptions,\n  chartExample1,\n  chartExample2\n} from \"variables/charts.jsx\";\n\nimport Header from \"./../layouts/Headers/Header.jsx\";\n\nclass Index extends React.Component {\n  state = {\n    activeNav: 1,\n    chartExample1Data: \"data1\"\n  };\n  toggleNavs = (e, index) => {\n    e.preventDefault();\n    this.setState({\n      activeNav: index,\n      chartExample1Data:\n        this.state.chartExample1Data === \"data1\" ? \"data2\" : \"data1\"\n    });\n    let wow = () => {\n      console.log(this.state);\n    };\n    wow.bind(this);\n    setTimeout(() => wow(), 1000);\n    // this.chartReference.update();\n  };\n  componentWillMount() {\n    if (window.Chart) {\n      parseOptions(Chart, chartOptions());\n    }\n  }\n  render() {\n    return (\n      <>\n        <Header />\n        {/* Page content */}\n        <Container className=\"mt--7\" fluid>\n          <Row>\n            <Col className=\"mb-5 mb-xl-0\" xl=\"8\">\n              <Card className=\"bg-gradient-default shadow\">\n                <CardHeader className=\"bg-transparent\">\n                  <Row className=\"align-items-center\">\n                    <div className=\"col\">\n                      <h6 className=\"text-uppercase text-light ls-1 mb-1\">\n                        Overview\n                      </h6>\n                      <h2 className=\"text-white mb-0\">Sales value</h2>\n                    </div>\n                    <div className=\"col\">\n                      <Nav className=\"justify-content-end\" pills>\n                        <NavItem>\n                          <NavLink\n                            className={classnames(\"py-2 px-3\", {\n                              active: this.state.activeNav === 1\n                            })}\n                            href=\"#pablo\"\n                            onClick={e => this.toggleNavs(e, 1)}\n                          >\n                            <span className=\"d-none d-md-block\">Month</span>\n                            <span className=\"d-md-none\">M</span>\n                          </NavLink>\n                        </NavItem>\n                        <NavItem>\n                          <NavLink\n                            className={classnames(\"py-2 px-3\", {\n                              active: this.state.activeNav === 2\n                            })}\n                            data-toggle=\"tab\"\n                            href=\"#pablo\"\n                            onClick={e => this.toggleNavs(e, 2)}\n                          >\n                            <span className=\"d-none d-md-block\">Week</span>\n                            <span className=\"d-md-none\">W</span>\n                          </NavLink>\n                        </NavItem>\n                      </Nav>\n                    </div>\n                  </Row>\n                </CardHeader>\n                <CardBody>\n                  {/* Chart */}\n                  <div className=\"chart\">\n                    <Line\n                      data={chartExample1[this.state.chartExample1Data]}\n                      options={chartExample1.options}\n                      getDatasetAtEvent={e => console.log(e)}\n                    />\n                  </div>\n                </CardBody>\n              </Card>\n            </Col>\n            <Col xl=\"4\">\n              <Card className=\"shadow\">\n                <CardHeader className=\"bg-transparent\">\n                  <Row className=\"align-items-center\">\n                    <div className=\"col\">\n                      <h6 className=\"text-uppercase text-muted ls-1 mb-1\">\n                        Performance\n                      </h6>\n                      <h2 className=\"mb-0\">Total orders</h2>\n                    </div>\n                  </Row>\n                </CardHeader>\n                <CardBody>\n                  {/* Chart */}\n                  <div className=\"chart\">\n                    <Bar\n                      data={chartExample2.data}\n                      options={chartExample2.options}\n                    />\n                  </div>\n                </CardBody>\n              </Card>\n            </Col>\n          </Row>\n          <Row className=\"mt-5\">\n            <Col className=\"mb-5 mb-xl-0\" xl=\"8\">\n              <Card className=\"shadow\">\n                <CardHeader className=\"border-0\">\n                  <Row className=\"align-items-center\">\n                    <div className=\"col\">\n                      <h3 className=\"mb-0\">Page visits</h3>\n                    </div>\n                    <div className=\"col text-right\">\n                      <Button\n                        color=\"primary\"\n                        href=\"#pablo\"\n                        onClick={e => e.preventDefault()}\n                        size=\"sm\"\n                      >\n                        See all\n                      </Button>\n                    </div>\n                  </Row>\n                </CardHeader>\n                <Table className=\"align-items-center table-flush\" responsive>\n                  <thead className=\"thead-light\">\n                    <tr>\n                      <th scope=\"col\">Page name</th>\n                      <th scope=\"col\">Visitors</th>\n                      <th scope=\"col\">Unique users</th>\n                      <th scope=\"col\">Bounce rate</th>\n                    </tr>\n                  </thead>\n                  <tbody>\n                    <tr>\n                      <th scope=\"row\">/argon/</th>\n                      <td>4,569</td>\n                      <td>340</td>\n                      <td>\n                        <i className=\"fas fa-arrow-up text-success mr-3\" />{\" \"}\n                        46,53%\n                      </td>\n                    </tr>\n                    <tr>\n                      <th scope=\"row\">/argon/index.html</th>\n                      <td>3,985</td>\n                      <td>319</td>\n                      <td>\n                        <i className=\"fas fa-arrow-down text-warning mr-3\" />{\" \"}\n                        46,53%\n                      </td>\n                    </tr>\n                    <tr>\n                      <th scope=\"row\">/argon/charts.html</th>\n                      <td>3,513</td>\n                      <td>294</td>\n                      <td>\n                        <i className=\"fas fa-arrow-down text-warning mr-3\" />{\" \"}\n                        36,49%\n                      </td>\n                    </tr>\n                    <tr>\n                      <th scope=\"row\">/argon/tables.html</th>\n                      <td>2,050</td>\n                      <td>147</td>\n                      <td>\n                        <i className=\"fas fa-arrow-up text-success mr-3\" />{\" \"}\n                        50,87%\n                      </td>\n                    </tr>\n                    <tr>\n                      <th scope=\"row\">/argon/profile.html</th>\n                      <td>1,795</td>\n                      <td>190</td>\n                      <td>\n                        <i className=\"fas fa-arrow-down text-danger mr-3\" />{\" \"}\n                        46,53%\n                      </td>\n                    </tr>\n                  </tbody>\n                </Table>\n              </Card>\n            </Col>\n            <Col xl=\"4\">\n              <Card className=\"shadow\">\n                <CardHeader className=\"border-0\">\n                  <Row className=\"align-items-center\">\n                    <div className=\"col\">\n                      <h3 className=\"mb-0\">Social traffic</h3>\n                    </div>\n                    <div className=\"col text-right\">\n                      <Button\n                        color=\"primary\"\n                        href=\"#pablo\"\n                        onClick={e => e.preventDefault()}\n                        size=\"sm\"\n                      >\n                        See all\n                      </Button>\n                    </div>\n                  </Row>\n                </CardHeader>\n                <Table className=\"align-items-center table-flush\" responsive>\n                  <thead className=\"thead-light\">\n                    <tr>\n                      <th scope=\"col\">Referral</th>\n                      <th scope=\"col\">Visitors</th>\n                      <th scope=\"col\" />\n                    </tr>\n                  </thead>\n                  <tbody>\n                    <tr>\n                      <th scope=\"row\">Facebook</th>\n                      <td>1,480</td>\n                      <td>\n                        <div className=\"d-flex align-items-center\">\n                          <span className=\"mr-2\">60%</span>\n                          <div>\n                            <Progress\n                              max=\"100\"\n                              value=\"60\"\n                              barClassName=\"bg-gradient-danger\"\n                            />\n                          </div>\n                        </div>\n                      </td>\n                    </tr>\n                    <tr>\n                      <th scope=\"row\">Facebook</th>\n                      <td>5,480</td>\n                      <td>\n                        <div className=\"d-flex align-items-center\">\n                          <span className=\"mr-2\">70%</span>\n                          <div>\n                            <Progress\n                              max=\"100\"\n                              value=\"70\"\n                              barClassName=\"bg-gradient-success\"\n                            />\n                          </div>\n                        </div>\n                      </td>\n                    </tr>\n                    <tr>\n                      <th scope=\"row\">Google</th>\n                      <td>4,807</td>\n                      <td>\n                        <div className=\"d-flex align-items-center\">\n                          <span className=\"mr-2\">80%</span>\n                          <div>\n                            <Progress max=\"100\" value=\"80\" />\n                          </div>\n                        </div>\n                      </td>\n                    </tr>\n                    <tr>\n                      <th scope=\"row\">Instagram</th>\n                      <td>3,678</td>\n                      <td>\n                        <div className=\"d-flex align-items-center\">\n                          <span className=\"mr-2\">75%</span>\n                          <div>\n                            <Progress\n                              max=\"100\"\n                              value=\"75\"\n                              barClassName=\"bg-gradient-info\"\n                            />\n                          </div>\n                        </div>\n                      </td>\n                    </tr>\n                    <tr>\n                      <th scope=\"row\">twitter</th>\n                      <td>2,645</td>\n                      <td>\n                        <div className=\"d-flex align-items-center\">\n                          <span className=\"mr-2\">30%</span>\n                          <div>\n                            <Progress\n                              max=\"100\"\n                              value=\"30\"\n                              barClassName=\"bg-gradient-warning\"\n                            />\n                          </div>\n                        </div>\n                      </td>\n                    </tr>\n                  </tbody>\n                </Table>\n              </Card>\n            </Col>\n          </Row>\n        </Container>\n      </>\n    );\n  }\n}\n\nexport default Index;\n","//  reactstrap component\r\nimport {\r\n  Button,\r\n  Modal,\r\n  ModalHeader,\r\n  ModalBody,\r\n  ModalFooter,\r\n  Col,\r\n  Row,\r\n  Form,\r\n  FormGroup,\r\n  Label,\r\n  Input,\r\n  FormFeedback,\r\n  FormText,\r\n\r\n  //  React tab\r\n  TabContent,\r\n  TabPane,\r\n  Nav,\r\n  NavItem,\r\n  NavLink,\r\n  Card,\r\n  //Button\r\n} from \"reactstrap\";\r\nimport classnames from \"classnames\";\r\n//  pure component: memo\r\nimport React, { memo, useState } from \"react\";\r\nimport { createRef } from \"react\";\r\n\r\nconst uuidv1 = require(\"uuid/v1\");\r\n\r\nconst PasswordChangingModal = ({ fromProps }) => {\r\n  let {\r\n    modal,\r\n    toggleInformationModal,\r\n    employee,\r\n    validatePassword,\r\n  } = fromProps;\r\n\r\n  //  close button\r\n  const closeBtn = (\r\n    <button className=\"close\" onClick={toggleInformationModal}>\r\n      &times;\r\n    </button>\r\n  );\r\n\r\n  //  ref to general information\r\n  const currentPasswordRef = React.createRef();\r\n  const newPasswordRef = React.createRef();\r\n  const confirmedPasswordRef = React.createRef();\r\n\r\n  //  Validation state\r\n  const [currentPasswordValidation, setCurrentPasswordValidation] = useState(null);\r\n  const [newPasswordValidation, setNewPasswordValidation] = useState(null);\r\n  const [confirmedPasswordValidation, setConfirmedPasswordValidation] = useState(null);\r\n\r\n  //  validate value from each input and store value into state\r\n  const checkValidation = async event => {\r\n    const name = event.target.name;\r\n    const value =\r\n      event.target.type === \"checkbox\"\r\n        ? event.target.checked\r\n        : event.target.value;\r\n\r\n    switch (name) {\r\n      // case \"currentPassword\":\r\n      //   console.log(value + \" \" + newPasswordRef.current.value + \" \" + confirmedPasswordRef.current.value);\r\n      //   setCurrentPasswordValidation(value.length >= 6 && value.length < 256 && value !== newPasswordRef.current.value);\r\n      //   break;\r\n      case \"newPassword\":\r\n        console.log(value + \" \" + confirmedPasswordRef.current.value);\r\n        setNewPasswordValidation(value.length >= 6 && value.length < 256 && value === confirmedPasswordRef.current.value);\r\n        setConfirmedPasswordValidation(confirmedPasswordRef.current.value.length >= 6 && confirmedPasswordRef.current.value.length < 256 && value === confirmedPasswordRef.current.value);\r\n        break;\r\n      case \"confirmedPassword\":\r\n        console.log(newPasswordRef.current.value + \" \" + value);\r\n        setNewPasswordValidation(newPasswordRef.current.value.length >= 6 && newPasswordRef.current.value.length < 256 && value === newPasswordRef.current.value);\r\n        setConfirmedPasswordValidation(value.length >= 6 && value.length < 256 && value === newPasswordRef.current.value);\r\n        break;\r\n\r\n      default:\r\n        break;\r\n    }\r\n  };\r\n\r\n  //  check validation\r\n  const validation = () => {\r\n    return (\r\n      // currentPasswordValidation &&\r\n      newPasswordValidation &&\r\n      confirmedPasswordValidation\r\n    );\r\n  };\r\n\r\n  //  update password\r\n  const changePassword = event => {\r\n    event.preventDefault();\r\n    const password = {\r\n      \"id\": employee.id,\r\n      \"email\": employee.email,\r\n      \"current_password\": \"\",\r\n      \"new_password\": newPasswordRef.current.value,\r\n      \"confirm_password\": confirmedPasswordRef.current.value,\r\n      \"token\": \"\"\r\n    }\r\n    console.log(JSON.stringify(password));\r\n    fromProps.changePassword(password);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Modal\r\n        isOpen={modal}\r\n        toggle={toggleInformationModal}\r\n        // modalTransition={{ timeout: 1000 }}\r\n        // backdropTransition={{ timeout: 1500 }}\r\n        className={`modal-dialog modal-lg modal-dialog-centered modal-dialog-scrollable`}\r\n      >\r\n        <ModalHeader toggle={() => this.toggle()} close={closeBtn}>\r\n          CHANGE PASSWORD\r\n        </ModalHeader>\r\n        <ModalBody>\r\n          <Form>\r\n            {/* <FormGroup>\r\n              <Label for=\"currentPassword\">Current Password</Label>\r\n              <Input\r\n                onChange={event => checkValidation(event)}\r\n                type=\"password\"\r\n                name=\"currentPassword\"\r\n                id=\"currentPassword\"\r\n                placeholder=\"Please fill the password\"\r\n                innerRef={currentPasswordRef}\r\n                valid={currentPasswordValidation}\r\n                invalid={\r\n                  currentPasswordValidation == null\r\n                    ? false\r\n                    : !currentPasswordValidation\r\n                }\r\n              />\r\n              <FormFeedback>Please check again</FormFeedback>\r\n              <FormText>Required, min 6 character</FormText>\r\n            </FormGroup> */}\r\n\r\n            <FormGroup>\r\n              <Label for=\"newPassword\">New Password</Label>\r\n              <Input\r\n                onChange={event => checkValidation(event)}\r\n                type=\"password\"\r\n                name=\"newPassword\"\r\n                id=\"newPassword\"\r\n                placeholder=\"Please fill the password\"\r\n                innerRef={newPasswordRef}\r\n                defaultValue={employee.email}\r\n                valid={newPasswordValidation}\r\n                invalid={\r\n                  newPasswordValidation == null\r\n                    ? false\r\n                    : !newPasswordValidation\r\n                }\r\n              />\r\n              <FormFeedback>Please check again</FormFeedback>\r\n              <FormText>Required, min 6 character</FormText>\r\n            </FormGroup>\r\n\r\n            <FormGroup>\r\n              <Label for=\"confirmedPassword\">Confirmed Password</Label>\r\n              <Input\r\n                onChange={event => checkValidation(event)}\r\n                type=\"password\"\r\n                name=\"confirmedPassword\"\r\n                id=\"confirmedPassword\"\r\n                placeholder=\"Please fill the password\"\r\n                innerRef={confirmedPasswordRef}\r\n                defaultValue={employee.email}\r\n                valid={confirmedPasswordValidation}\r\n                invalid={\r\n                  confirmedPasswordValidation == null\r\n                    ? false\r\n                    : !confirmedPasswordValidation\r\n                }\r\n              />\r\n              <FormFeedback>Please check againh</FormFeedback>\r\n              <FormText>Required, min 6 character</FormText>\r\n            </FormGroup>\r\n\r\n          </Form>\r\n\r\n        </ModalBody>\r\n        <ModalFooter>\r\n          <Button\r\n            disabled={!validation()}\r\n            color=\"primary\"\r\n            onClick={e => changePassword(e)}\r\n          >\r\n            Change Password\r\n                  </Button>\r\n          {\" \"}\r\n          <Button color=\"secondary\" onClick={toggleInformationModal}>\r\n            Cancel\r\n          </Button>\r\n        </ModalFooter>\r\n      </Modal>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst arePropsEqual = (prevProps, nextProps) => {\r\n  return prevProps === nextProps;\r\n};\r\n// Wrap component using `React.memo()` and pass `arePropsEqual`\r\nexport default memo(PasswordChangingModal, arePropsEqual);\r\n","import React, {\r\n  Component\r\n} from \"react\";\r\n//  set up proptype\r\nimport PropTypes from \"prop-types\";\r\n//  reacttrap component\r\n// import {\r\n//   Button,\r\n//   Modal,\r\n//   ModalHeader,\r\n//   ModalBody,\r\n//   ModalFooter,\r\n//   Col,\r\n//   Row,\r\n//   Form,\r\n//   FormGroup,\r\n//   Label,\r\n//   Input,\r\n//   FormFeedback,\r\n//   FormText\r\n// } from \"reactstrap\";\r\n\r\n//  redux component\r\n//  set up redux\r\nimport {\r\n  connect\r\n} from \"react-redux\";\r\nimport {\r\n  withRouter\r\n} from \"react-router-dom\";\r\nimport Action from \"../../../redux/Action/index.js\";\r\n//  presentation component\r\nimport PasswordChangingModal from \"./PasswordChangingModal.jsx\";\r\n// const uuidv1 = require(\"uuid/v1\");\r\n//  compose function:\r\n//  - (...fns): array all function need to compose\r\n//  - x: collection / input value\r\n//  - reduceRight: array loop function, from right to left (last -> last - 1 -> last - 2 -> ...)\r\n//  =>  (y, f) => f(y), x === (previousValue, currentFunction) => currentFunction(previousValue), x\r\n//  =>  take last function in collectionFunction fns, use innitial value x, return value (y)\r\n//  =>  [a, b, c] => reduceRight((y, f) => f(y), x) === a(b(c))\r\nconst compose = (...fns) => x => fns.reduceRight((y, f) => f(y), x);\r\n\r\n//  Validation section\r\n//   Profile Description \r\nconst validatePassword = ({\r\n  currentPassword = \"\",\r\n  confirmPassword = \"\",\r\n  newPassword = \"\"\r\n}) => {\r\n  return currentPassword.length <= 256 &&\r\n    newPassword.length >= 6 &&\r\n    confirmPassword === newPassword &&\r\n    currentPassword !== newPassword &&\r\n    currentPassword !== confirmPassword\r\n    ;\r\n};\r\n\r\n//  propType\r\nconst propsProTypes = {\r\n  modal: PropTypes.bool,\r\n\r\n  //  validation func\r\n  validatePassword: PropTypes.func,\r\n\r\n};\r\n\r\nconst propsDefault = {\r\n  modal: false,\r\n  validatePassword: validatePassword,\r\n\r\n};\r\n\r\nclass PasswordChangingModalContainer extends Component {\r\n  static propTypes = propsProTypes;\r\n  static defaultProps = propsDefault;\r\n\r\n  render() {\r\n    return ( <\r\n      PasswordChangingModal fromProps = {\r\n        this.props\r\n      }\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n  return {\r\n    modal: state.Profile.toggleInformationModal,\r\n    own: ownProps,\r\n    employee: state.Profile.currentDataList,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch, ownProps) => ({\r\n  //  toogle information modal\r\n  toggleInformationModal: () => {\r\n    dispatch(Action.Profile.toggleInformationModal);\r\n  },\r\n\r\n  //  update Profile general information\r\n  changePassword: async password => {\r\n    // event.preventDefault();\r\n    if (password.email) {\r\n      console.log(\"changePassword \" + JSON.stringify(password));\r\n      await dispatch(Action.Profile.changePassword(password));\r\n      await dispatch(Action.Profile.getData(password.id));\r\n    }\r\n  },\r\n\r\n  dispatch\r\n});\r\n\r\n//  compose all redux HOC\r\nconst enhance = compose(\r\n  withRouter,\r\n  connect(mapStateToProps, mapDispatchToProps, null)\r\n);\r\n\r\nexport default enhance(PasswordChangingModalContainer);","import React, {\n  Component\n} from \"react\";\n//  set up proptype\nimport PropTypes from \"prop-types\";\n//  redux component\n//  set up redux\nimport {\n  connect\n} from \"react-redux\";\nimport {\n  withRouter\n} from \"react-router-dom\";\nimport Action from \"../../../redux/Action/index.js\";\n\n// reactstrap components\nimport { Button, Container, Row, Col } from \"reactstrap\";\nimport PasswordChangingModalContainer from \"./../../contents/Profile/PasswordChangingModalContainer.js\";\n// const uuidv1 = require(\"uuid/v1\");\n//  compose function:\n//  - (...fns): array all function need to compose\n//  - x: collection / input value\n//  - reduceRight: array loop function, from right to left (last -> last - 1 -> last - 2 -> ...)\n//  =>  (y, f) => f(y), x === (previousValue, currentFunction) => currentFunction(previousValue), x\n//  =>  take last function in collectionFunction fns, use innitial value x, return value (y)\n//  =>  [a, b, c] => reduceRight((y, f) => f(y), x) === a(b(c))\nconst compose = (...fns) => x => fns.reduceRight((y, f) => f(y), x);\n\n// //  propType\n// const propsProTypes = {\n//   index: PropTypes.number,\n//   data: PropTypes.array\n// };\n\n// const propsDefault = {\n//   index: 1,\n//   data: []\n// };\n\nclass UserHeader extends Component {\n  render() {\n    return (\n      <>\n        <div\n          className=\"header pb-8 pt-5 pt-lg-8 d-flex align-items-center\"\n          style={{\n            minHeight: \"600px\",\n            backgroundImage:\n              \"url(\" + require(\"assets/img/theme/profile-cover.jpg\") + \")\",\n            backgroundSize: \"cover\",\n            backgroundPosition: \"center top\"\n          }}\n        >\n          {/* Mask */}\n          <span className=\"mask bg-gradient-default opacity-8\" />\n          {/* Header container */}\n          <Container className=\"d-flex align-items-center\" fluid>\n            <Row>\n              <Col lg=\"7\" md=\"10\">\n                <h1 className=\"display-2 text-white\">Hello Jesse</h1>\n                <p className=\"text-white mt-0 mb-5\">\n                  This is your profile page. You can see the progress you've\n                  made with your work and manage your projects or assigned tasks\n                </p>\n                {/* <Button\n                  color=\"info\"\n                  href=\"#pablo\"\n                  onClick={e => this.props.getData()}\n                >\n                  Edit profile\n                </Button> */}\n                <Button\n                  color=\"info\"\n                  href=\"#pablo\"\n                  onClick={e => (this.props.toggleInformationModal())}\n                >\n                  Change password\n                      </Button>\n              </Col>\n            </Row>\n            \n          </Container>\n        </div>\n      </>\n    );\n  }\n}\nconst mapStateToProps = (state, ownProps) => {\n  return {\n    data: state.Employee.currentDataList,\n    own: ownProps\n  };\n};\n\nconst mapDispatchToProps = (dispatch, ownProps) => ({\n  getData: async () => {\n    await dispatch(Action.Profile.toggleProfileComponent());\n  },\n  toggleInformationModal: () => {\n    dispatch(Action.Profile.toggleInformationModal);\n  },\n\n  dispatch\n});\n\n//  compose all redux HOC\nconst enhance = compose(\n  withRouter,\n  connect(mapStateToProps, mapDispatchToProps, null)\n);\n\nexport default enhance(UserHeader);\n","// reactstrap components\nimport {\n  Button,\n  Card,\n  CardHeader,\n  CardBody,\n  FormGroup,\n  Form,\n  Input,\n  Container,\n  Row,\n  Col,\n  Modal,\n  ModalHeader,\n  ModalBody,\n  ModalFooter,\n  Label,\n  FormFeedback,\n  FormText\n} from \"reactstrap\";\n//  reactstrap component\nimport {\n\n} from \"reactstrap\";\n\n//  pure component: memo\nimport React, { memo, useState } from \"react\";\n\nconst uuidv1 = require(\"uuid/v1\");\nconst Profile = ({ fromProps }) => {\n  let {\n    employee: {\n      id,\n      active,\n      address,\n      asp_net_user_id,\n      email,\n      name,\n      phone,\n      role,\n      asp_net_user,\n      manage_project = [] },\n\n    validateName,\n    validatePhone,\n    validateAddress,\n\n    listLog = [],\n    listApplication = [],\n    listApplicationInstance = []\n\n  } = fromProps;\n  console.log(\"listlist \" + JSON.stringify(manage_project.filter(pj => pj.application_instance_id !== 22)));\n  const achivement = {\n    application: manage_project.filter(pj => pj.application_instance_id === 22),\n    applicationInstance: manage_project.filter(pj => pj.application_id === 22),\n    log: listLog.length\n\n  }\n\n  //  Ref section\n  //  Information\n  const nameRef = React.createRef();\n  const addressRef = React.createRef();\n  const phoneRef = React.createRef();\n\n  //  State for validation\n  const [nameValidation, setNameValidation] = useState(true);\n  const [addressValidation, setAddressValidation] = useState(true);\n  const [phoneValidation, setPhoneValidation] = useState(true);\n\n  //  Update state for validation from each input\n  const checkValidation = async event => {\n    const name = event.target.name;\n    const value =\n      event.target.type === \"checkbox\"\n        ? event.target.checked\n        : event.target.value;\n\n    switch (name) {\n      case \"name\":\n        console.log(value);\n        setNameValidation(validateName({ [name]: value }));\n        break;\n\n      case \"address\":\n        console.log(value);\n        setAddressValidation(validateAddress({ [name]: value }));\n        break;\n\n      case \"phone\":\n        console.log(value);\n        setPhoneValidation(validatePhone({ [name]: value }));\n        break;\n\n      default:\n        break;\n    }\n  };\n\n  //  validation \n  const validateUpdate = () => {\n    return nameValidation &&\n      addressValidation &&\n      phoneValidation\n\n      ;\n  }\n\n  //  update section\n  const updateProfile = e => {\n    e.preventDefault();\n    let updateModel = {\n      id: id,\n      email: email,\n      address: addressRef.current.value,\n      name: nameRef.current.value,\n      phone: phoneRef.current.value\n    }\n    fromProps.updateProfile(updateModel);\n  }\n\n  return (\n    <>\n      {/* Page content */}\n      <Container className=\"mt--7\" fluid>\n        <Row>\n          <Col className=\"order-xl-2 mb-5 mb-xl-0\" xl=\"4\">\n            <Card className=\"card-profile shadow\">\n              <Row className=\"justify-content-center\">\n                <Col className=\"order-lg-2\" lg=\"3\">\n                  <div className=\"card-profile-image\">\n                    <a\n                    // href=\"#pablo\" onClick={e => e.preventDefault()}\n                    >\n                      <img\n                        alt=\"...\"\n                        className=\"rounded-circle\"\n                        src={require(\"assets/img/theme/team-4-800x800.jpg\")}\n                      />\n                    </a>\n                  </div>\n                </Col>\n              </Row>\n              <CardHeader className=\"text-center border-0 pt-8 pt-md-4 pb-0 pb-md-4\">\n                <div className=\"d-flex justify-content-between\">\n                  <Button\n                    className=\"mr-4\"\n                    color=\"info\"\n                    href=\"#pablo\"\n                    onClick={e => e.preventDefault()}\n                    size=\"sm\"\n                    disabled\n                  >\n                    {/* Connect */}\n                  </Button>\n                  <Button\n                    className=\"float-right\"\n                    color=\"default\"\n                    href=\"#pablo\"\n                    onClick={e => e.preventDefault()}\n                    size=\"sm\"\n                    disabled\n                  >\n                    {/* Message */}\n                  </Button>\n                </div>\n              </CardHeader>\n              <CardBody className=\"pt-0 pt-md-4\">\n                <Row>\n                  <div className=\"col\">\n                    <div className=\"card-profile-stats d-flex justify-content-center mt-md-5\">\n                      <div>\n                        <span className=\"heading\">{achivement.application.length}</span>\n                        <span className=\"description\">Application</span>\n                      </div>\n                      <div>\n                        <span className=\"heading\">{achivement.applicationInstance.length}</span>\n                        <span className=\"description\">Application Instance</span>\n                      </div>\n                      <div>\n                        <span className=\"heading\">{achivement.log}</span>\n                        <span className=\"description\">Error Solve</span>\n                      </div>\n                    </div>\n                  </div>\n                </Row>\n                <div className=\"text-center\">\n                  <h3>\n                    {name}\n                    <span className=\"font-weight-light\">, 27</span>\n                  </h3>\n                  <div className=\"h5 font-weight-300\">\n                    <i className=\"ni location_pin mr-2\" />\n                      Vietname\n                      </div>\n                  <hr />\n                  <h3>APPLICATION</h3>\n                  {listApplication.map(app => {\n                    return achivement.application.map(achi => {\n                      return achi.application_id === app.id ?\n                        <div className=\"h5 mt-4\">\n                          <i className=\"ni business_briefcase-24 mr-2\" />\n                          <font color={\"blue\"}>{app.name}</font>\n                        </div> : null;\n                    })\n                  })}\n                  <hr />\n                  <h3>APPLICATION INSTANCE</h3>\n                  {listApplicationInstance.map(appIns => {\n                    return achivement.applicationInstance.map(achi => {\n                      return achi.application_instance_id === appIns.id ?\n                        <div className=\"h5 mt-4\">\n                          <i className=\"ni business_briefcase-24 mr-2\" />\n                          <font color={\"green\"}>{appIns.name}</font>\n                        </div> : null;\n                    })\n                  })}\n                  {/* <hr className=\"my-4\" />\n\n                  <a href=\"#pablo\" onClick={e => e.preventDefault()}>\n                    Change Password\n                    </a> */}\n                </div>\n              </CardBody>\n            </Card>\n          </Col>\n\n          <Col className=\"order-xl-1\" xl=\"8\">\n            <Form>\n              <Card className=\"bg-secondary shadow\">\n                <CardHeader className=\"bg-white border-0\">\n                  <Row className=\"align-items-center\">\n                    <Col xs=\"8\">\n                      <h3 className=\"mb-0\">My account</h3>\n                    </Col>\n                    <Col className=\"text-right\" xs=\"4\">\n                      <Button\n                        color=\"primary\"\n                        href=\"#pablo\"\n                        onClick={e => updateProfile(e)}\n                        size=\"sm\"\n                        disabled={!validateUpdate()}\n                      >\n                        Update\n                      </Button>\n                    </Col>                    \n                  </Row>\n                </CardHeader>\n                <CardBody>\n\n                  <h6 className=\"heading-small text-muted mb-4\">\n                    User information\n                    </h6>\n                  <div className=\"pl-lg-4\">\n                    <Row>\n                      <Col lg=\"6\">\n                        <FormGroup>\n                          <label\n                            className=\"form-control-label\"\n                            htmlFor=\"input-username\"\n                          >\n                            Userame\n                            </label>\n                          <Input\n                            onChange={event => checkValidation(event)}\n                            className=\"form-control-alternative\"\n                            id=\"input-username\"\n                            placeholder=\"Username\"\n                            innerRef={nameRef}\n                            defaultValue={name}\n                            type=\"text\"\n                          />\n                        </FormGroup>\n                      </Col>\n                      <Col lg=\"6\">\n                        <FormGroup>\n                          <label\n                            className=\"form-control-label\"\n                            htmlFor=\"input-email\"\n                          >\n                            Role\n                            </label>\n                          <Input\n                            className=\"form-control-alternative\"\n                            onChange={event => checkValidation(event)}\n                            id=\"input-email\"\n                            placeholder=\"jesse@example.com\"\n                            defaultValue={role === 1 ? \"Adminstrator\" : role === 2 ? \"Manager\" : role === 5 ? \"Guest\" : \"Developer\"}\n                            type=\"text\"\n                            disabled\n                          />\n                        </FormGroup>\n                      </Col>\n                    </Row>\n                    {/* <Row>\n                        <Col lg=\"6\">\n                          <FormGroup>\n                            <label\n                              className=\"form-control-label\"\n                              htmlFor=\"input-first-name\"\n                            >\n                              First name\n                            </label>\n                            <Input\n                              className=\"form-control-alternative\"\n                              defaultValue=\"Lucky\"\n                              id=\"input-first-name\"\n                              placeholder=\"First name\"\n                              type=\"text\"\n                            />\n                          </FormGroup>\n                        </Col>\n                        <Col lg=\"6\">\n                          <FormGroup>\n                            <label\n                              className=\"form-control-label\"\n                              htmlFor=\"input-last-name\"\n                            >\n                              Last name\n                            </label>\n                            <Input\n                              className=\"form-control-alternative\"\n                              defaultValue=\"Jesse\"\n                              id=\"input-last-name\"\n                              placeholder=\"Last name\"\n                              type=\"text\"\n                            />\n                          </FormGroup>\n                        </Col>\n                      </Row> */}\n                  </div>\n                  <hr className=\"my-4\" />\n                  {/* Address */}\n                  <h6 className=\"heading-small text-muted mb-4\">\n                    Contact information\n                    </h6>\n                  <div className=\"pl-lg-4\">\n                    <Row>\n                      <Col md=\"12\">\n                        <FormGroup>\n                          <label\n                            className=\"form-control-label\"\n                            htmlFor=\"input-address\"\n                          >\n                            Address\n                            </label>\n                          <Input\n                            className=\"form-control-alternative\"\n                            onChange={event => checkValidation(event)}\n                            id=\"input-address\"\n                            placeholder=\"Home Address\"\n                            innerRef={addressRef}\n                            defaultValue={address}\n                            type=\"text\"\n                          />\n                        </FormGroup>\n                      </Col>\n                    </Row>\n                    <Row>\n                      <Col md=\"12\">\n                        <FormGroup>\n                          <label\n                            className=\"form-control-label\"\n                            htmlFor=\"input-address\"\n                          >\n                            Email\n                            </label>\n                          <Input\n                            className=\"form-control-alternative\"\n                            onChange={event => checkValidation(event)}\n                            id=\"input-address\"\n                            placeholder=\"Home Address\"\n                            defaultValue={email}\n                            type=\"email\"\n                            disabled\n                          />\n                        </FormGroup>\n                      </Col>\n                    </Row>\n                    <Row>\n                      <Col md=\"12\">\n                        <FormGroup>\n                          <label\n                            className=\"form-control-label\"\n                            htmlFor=\"input-address\"\n                          >\n                            Phone number\n                            </label>\n                          <Input\n                            className=\"form-control-alternative\"\n                            onChange={event => checkValidation(event)}\n                            innerRef={phoneRef}\n                            id=\"input-address\"\n                            placeholder=\"Home Address\"\n                            defaultValue={phone}\n                            type=\"number\"\n                          />\n                        </FormGroup>\n                      </Col>\n                    </Row>\n                    {/* <Row>\n                        <Col lg=\"4\">\n                          <FormGroup>\n                            <label\n                              className=\"form-control-label\"\n                              htmlFor=\"input-city\"\n                            >\n                              City\n                            </label>\n                            <Input\n                              className=\"form-control-alternative\"\n                              defaultValue=\"New York\"\n                              id=\"input-city\"\n                              placeholder=\"City\"\n                              type=\"text\"\n                            />\n                          </FormGroup>\n                        </Col>\n                        <Col lg=\"4\">\n                          <FormGroup>\n                            <label\n                              className=\"form-control-label\"\n                              htmlFor=\"input-country\"\n                            >\n                              Country\n                            </label>\n                            <Input\n                              className=\"form-control-alternative\"\n                              defaultValue=\"United States\"\n                              id=\"input-country\"\n                              placeholder=\"Country\"\n                              type=\"text\"\n                            />\n                          </FormGroup>\n                        </Col>\n                        <Col lg=\"4\">\n                          <FormGroup>\n                            <label\n                              className=\"form-control-label\"\n                              htmlFor=\"input-country\"\n                            >\n                              Postal code\n                            </label>\n                            <Input\n                              className=\"form-control-alternative\"\n                              id=\"input-postal-code\"\n                              placeholder=\"Postal code\"\n                              type=\"number\"\n                            />\n                          </FormGroup>\n                        </Col>\n                      </Row> */}\n                  </div>\n                  {/* <hr className=\"my-4\" />\n                  <h6 className=\"heading-small text-muted mb-4\">About me</h6>\n                  <div className=\"pl-lg-4\">\n                    <FormGroup>\n                      <label>About Me</label>\n                      <Input\n                        className=\"form-control-alternative\"\n                        placeholder=\"A few words about you ...\"\n                        rows=\"4\"\n                        defaultValue=\"A beautiful Dashboard for Bootstrap 4. It is Free and Open Source.\"\n                        type=\"textarea\"\n                      />\n                    </FormGroup>\n                  </div> */}\n\n                </CardBody>\n              </Card>\n            </Form>\n          </Col>\n        </Row>\n      </Container>\n\n    </>\n  );\n}\n\n\nconst arePropsEqual = (prevProps, nextProps) => {\n  return prevProps === nextProps;\n};\n// Wrap component using `React.memo()` and pass `arePropsEqual`\nexport default memo(Profile, arePropsEqual);\n\n","// reactstrap components\r\nimport {\r\n    Button,\r\n    Card,\r\n    CardHeader,\r\n    CardBody,\r\n    FormGroup,\r\n    Form,\r\n    Input,\r\n    Container,\r\n    Row,\r\n    Col\r\n} from \"reactstrap\";\r\n// core components\r\nimport UserHeader from \"./../../layouts/Headers/UserHeader.jsx\";\r\nimport React, {\r\n    Component\r\n} from \"react\";\r\n//  set up proptype\r\nimport PropTypes from \"prop-types\";\r\n//  redux component\r\n//  set up redux\r\nimport {\r\n    connect\r\n} from \"react-redux\";\r\nimport {\r\n    withRouter\r\n} from \"react-router-dom\";\r\nimport Action from \"../../../redux/Action/index.js\";\r\nimport Profile from \"./Profile.jsx\";\r\nimport PasswordChangingModalContainer from \"./PasswordChangingModalContainer.js\";\r\n\r\n// const uuidv1 = require(\"uuid/v1\");\r\n//  compose function:\r\n//  - (...fns): array all function need to compose\r\n//  - x: collection / input value\r\n//  - reduceRight: array loop function, from right to left (last -> last - 1 -> last - 2 -> ...)\r\n//  =>  (y, f) => f(y), x === (previousValue, currentFunction) => currentFunction(previousValue), x\r\n//  =>  take last function in collectionFunction fns, use innitial value x, return value (y)\r\n//  =>  [a, b, c] => reduceRight((y, f) => f(y), x) === a(b(c))\r\nconst compose = (...fns) => x => fns.reduceRight((y, f) => f(y), x);\r\n\r\n//  Employee Name validation\r\nconst validateName = ({\r\n    name\r\n}) => {\r\n    return name ? name.length <= 300 && name.length > 5 : false;\r\n};\r\n//  Employee Name validation\r\nconst validateAddress = ({\r\n    address\r\n}) => {\r\n    return address ? address.length <= 300 && address.length >= 0 : false;\r\n};\r\n//  Employee Name validation\r\nconst validatePhone = ({\r\n    phone\r\n}) => {\r\n    return phone ? phone.length <= 300 && phone.length >= 0 : false;\r\n};\r\n\r\n//  propType\r\nconst propsProTypes = {\r\n\r\n    //  validation func\r\n    validateName: PropTypes.func,\r\n    validateAddress: PropTypes.func,\r\n    validatePhone: PropTypes.func,\r\n};\r\n\r\nconst propsDefault = {\r\n\r\n    validateName: validateName,\r\n    validateAddress: validateAddress,\r\n    validatePhone: validatePhone\r\n};\r\n\r\nclass ProfileContainer extends Component {\r\n    static propTypes = propsProTypes;\r\n    static defaultProps = propsDefault;\r\n\r\n    componentDidMount = async () => {\r\n        await this.props.getData(this.props.id);\r\n\r\n    }\r\n    render() {\r\n\r\n        let {\r\n            toggle,\r\n        } = this.props;\r\n\r\n        return ( \r\n            <>\r\n            <\r\n            UserHeader / >\r\n            <PasswordChangingModalContainer />\r\n            <\r\n            Profile fromProps = {\r\n                this.props\r\n            }\r\n            />  \r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n    return {\r\n        id: state.Login.loginInfor.id,\r\n        own: ownProps,\r\n        // toggle: state.Profile.toggleProfileComponent,\r\n        employee: state.Profile.currentDataList,\r\n        listLog: state.Log.currentDataList,\r\n        listApplication: state.Application.currentDataList,\r\n        listApplicationInstance: state.ApplicationInstance.currentDataList,\r\n\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch, ownProps) => ({\r\n    getData: async (id) => {\r\n        await dispatch(Action.Profile.getData(id));\r\n        await dispatch(Action.Log.getData(id));\r\n        await dispatch(Action.Application.getData(id));\r\n        await dispatch(Action.ApplicationInstance.getData(id));\r\n    },\r\n    updateProfile: async profile => {\r\n        await dispatch(Action.Profile.updateProfile(profile));\r\n        await dispatch(Action.Employee.getData());\r\n    },\r\n\r\n    dispatch\r\n});\r\n\r\n//  compose all redux HOC\r\nconst enhance = compose(\r\n    withRouter,\r\n    connect(mapStateToProps, mapDispatchToProps, null)\r\n);\r\n\r\nexport default enhance(ProfileContainer);","/*!\n\n=========================================================\n* Argon Dashboard React - v1.0.0\n=========================================================\n\n* Product Page: https://www.creative-tim.com/product/argon-dashboard-react\n* Copyright 2019 Creative Tim (https://www.creative-tim.com)\n* Licensed under MIT (https://github.com/creativetimofficial/argon-dashboard-react/blob/master/LICENSE.md)\n\n* Coded by Creative Tim\n\n=========================================================\n\n* The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\n*/\nimport React from \"react\";\n\n//  react router\nimport { Link } from \"react-router-dom\";\n// reactstrap components\nimport {\n  Button,\n  Card,\n  CardHeader,\n  CardBody,\n  FormGroup,\n  Form,\n  FormText,\n  FormFeedback,\n  Input,\n  InputGroupAddon,\n  InputGroupText,\n  InputGroup,\n  Row,\n  Col, \n  NavLink\n} from \"reactstrap\";\n//  set up proptype\nimport PropTypes from \"prop-types\";\n//  propType\nconst propsProTypes = {\n  //  create new guest func\n  createNewApplication: PropTypes.func,\n\n  //  validation func\n  validatePassword: PropTypes.func,\n  validateEmail: PropTypes.func,\n};\n\nconst propsDefault = {\n  createNewApplication: () => { },\n\n  validatePassword: () => false,\n  validateEmail: () => false,\n};\n\nclass Register extends React.Component {\n  static propTypes = propsProTypes;\n  static defaultProps = propsDefault;\n  state = {\n    emailValidation: null,\n    passwordValidation: null,\n    password: \"\",\n    email: \"\"\n  };\n\n  //  validate value from each input and store value into state\n  isChange = async event => {\n    const name = event.target.name;\n    const value =\n      event.target.type === \"checkbox\"\n        ? event.target.checked\n        : event.target.value;\n    switch (name) {\n      case \"password\":\n        this.setState({\n          ...this.state,\n          [name]: value,\n          passwordValidation: this.props.fromProps.validatePassword({ [name]: value })\n        });\n        console.log(name + \" \" + value);\n        break;\n\n      case \"email\":\n        this.setState({\n          ...this.state,\n          [name]: value,\n          emailValidation: this.props.fromProps.validateEmail({ [name]: value })\n        });\n        console.log(name + \" \" + value);\n        break;\n\n      default:\n        break;\n    }\n\n\n  };\n\n  //  check validation\n  validation = () => {\n    console.log(this.state.passwordValidation);\n    console.log(this.state.emailValidation);\n    return (\n      (this.state.passwordValidation == null ? false : this.state.passwordValidation) &&\n      (this.state.emailValidation == null\n        ? false\n        : this.state.emailValidation)\n    );\n  };\n\n  //  create new employee\n  createNewGuest = event => {\n    event.preventDefault();\n    const application = {\n      password: this.state.password,\n      confirm_password: this.state.password,\n      is_admin: false,\n      email: this.state.email,\n      address: \"\",\n      name: this.state.email,\n      phone: \"\",\n      manager_registration_token: \"string\",\n      role: 5\n    };\n    this.props.fromProps.createNewEmployee(application);\n  };\n  render() {\n    return (\n      <>\n        <Col lg=\"5\" md=\"7\">\n          <Card className=\"bg-secondary shadow border-0\">\n            <CardHeader className=\"bg-transparent pb-5\">\n              <div className=\"text-muted text-center mt-2 mb-4\">\n                <small>Sign up with</small>\n              </div>\n              <div className=\"text-center\">\n                {/* <Button\n                  className=\"btn-neutral btn-icon mr-4\"\n                  color=\"default\"\n                  href=\"#pablo\"\n                  onClick={e => e.preventDefault()}\n                >\n                  <span className=\"btn-inner--icon\">\n                    <img\n                      alt=\"...\"\n                      src={require(\"assets/img/icons/common/github.svg\")}\n                    />\n                  </span>\n                  <span className=\"btn-inner--text\">Github</span>\n                </Button> */}\n                <Button\n                  className=\"btn-neutral btn-icon\"\n                  color=\"default\"\n                  href=\"#pablo\"\n                  onClick={e => e.preventDefault()}\n                >\n                  <span className=\"btn-inner--icon\">\n                    <img\n                      alt=\"...\"\n                      src={require(\"assets/img/icons/common/google.svg\")}\n                    />\n                  </span>\n                  <span className=\"btn-inner--text\">Google</span>\n                </Button>\n              </div>\n            </CardHeader>\n            <CardBody className=\"px-lg-5 py-lg-5\">\n              <div className=\"text-center text-muted mb-4\">\n                <small>Or sign up with credentials</small>\n              </div>\n              <Form role=\"form\">\n                {/* <FormGroup>\n                  <InputGroup className=\"input-group-alternative mb-3\">\n                    <InputGroupAddon addonType=\"prepend\">\n                      <InputGroupText>\n                        <i className=\"ni ni-hat-3\" />\n                      </InputGroupText>\n                    </InputGroupAddon>\n                    <Input placeholder=\"Name\" type=\"text\" />\n                  </InputGroup>\n                </FormGroup> */}\n                <FormGroup>\n                  <InputGroup className=\"input-group-alternative mb-3\">\n                    <InputGroupAddon addonType=\"prepend\">\n                      <InputGroupText>\n                        <i className=\"ni ni-email-83\" />\n                      </InputGroupText>\n                    </InputGroupAddon>\n                    <Input\n                    name=\"email\"\n                      onChange={(event) => this.isChange(event)}\n                      placeholder=\"Email\"\n                      defaultValue=\"\"\n                      innerRef={e => (this.emailInput = e)}\n                      type=\"email\" valid={this.state.nameValidation}\n                      invalid={\n                        this.state.nameValidation == null\n                          ? false\n                          : !this.state.nameValidation\n                      }\n                      required\n                    />\n                  </InputGroup>\n                  <FormFeedback\n                  >\n                    Invalid Employee Name\n                        </FormFeedback>\n                  <FormText>Email will be used to login, please provide correct email</FormText>\n                </FormGroup>\n\n                <FormGroup>\n                  <InputGroup className=\"input-group-alternative\">\n                    <InputGroupAddon addonType=\"prepend\">\n                      <InputGroupText>\n                        <i className=\"ni ni-lock-circle-open\" />\n                      </InputGroupText>\n                    </InputGroupAddon>\n                    <Input\n                    name=\"password\"\n                      onChange={(event) => this.isChange(event)}\n                      innerRef={e => (this.passwordInput = e)}\n                      defaultValue=\"\"\n                      placeholder=\"Password\"\n                      type=\"password\" valid={this.state.emailValidation}\n                      invalid={\n                        this.state.emailValidation == null\n                          ? false\n                          : !this.state.emailValidation\n                      }\n                      required\n\n                    />\n                  </InputGroup>\n                  <FormFeedback>\n                    Please check email again\n                        </FormFeedback>\n                  <FormText>Password length: minimum 5 characters</FormText>\n\n                </FormGroup>\n                {/*<div className=\"text-muted font-italic\">\n                  <small>\n                    password strength:{\" \"}\n                    <span className=\"text-success font-weight-700\">strong</span>\n                  </small>\n                </div>\n                <Row className=\"my-4\">\n                  <Col xs=\"12\">\n                    <div className=\"custom-control custom-control-alternative custom-checkbox\">\n                      <input\n                        className=\"custom-control-input\"\n                        id=\"customCheckRegister\"\n                        type=\"checkbox\"\n                      />\n                      <label\n                        className=\"custom-control-label\"\n                        htmlFor=\"customCheckRegister\"\n                      >\n                        <span className=\"text-muted\">\n                          I agree with the{\" \"}\n                          <a href=\"#pablo\" onClick={e => e.preventDefault()}>\n                            Privacy Policy\n                          </a> \n                          I want to take a tour\n                        </span>\n                      </label>\n                    </div>\n                  </Col>\n                </Row>*/}\n                <div className=\"text-center\">\n                  <Button\n                    className=\"mt-4\"\n                    color=\"primary\"\n                    type=\"button\"\n                    disabled={!this.validation()}\n                    onClick={(e) => this.createNewGuest(e)}\n                  >\n                    Create account\n                  </Button>\n                </div>\n              </Form>\n            </CardBody>\n          </Card>\n          <Row className=\"mt-3\">\n            <Col xs=\"6\">\n              <NavLink\n                className=\"text-light\"\n                className=\"nav-link-icon\"\n                to=\"/auth/password-token\"\n                tag={Link}\n              >\n                <font className=\"text-light\" ><small>Forgot password ?</small></font>\n\n              </NavLink>\n            </Col>\n            <Col className=\"text-right\" xs=\"6\">\n              <NavLink\n                className=\"text-light\"\n                className=\"nav-link-icon\"\n                to=\"/auth/login\"\n                tag={Link}\n              >\n                <font className=\"text-light\" ><small>Sign in !</small></font>\n\n              </NavLink>\n\n            </Col>\n          </Row>\n        </Col>\n      </>\n    );\n  }\n}\n\nexport default Register;\n","import React, {\r\n    Component\r\n} from \"react\";\r\n//  set up proptype\r\nimport PropTypes from \"prop-types\";\r\n//  reacttrap component\r\n// import {\r\n//   Button,\r\n//   Modal,\r\n//   ModalHeader,\r\n//   ModalBody,\r\n//   ModalFooter,\r\n//   Col,\r\n//   Row,\r\n//   Form,\r\n//   FormGroup,\r\n//   Label,\r\n//   Input,\r\n//   FormFeedback,\r\n//   FormText\r\n// } from \"reactstrap\";\r\n\r\n//  redux component\r\n//  set up redux\r\nimport {\r\n    connect\r\n} from \"react-redux\";\r\nimport {\r\n    withRouter\r\n} from \"react-router-dom\";\r\nimport Action from \"../../../redux/Action/index.js\";\r\n\r\n//  presentation component\r\nimport Register from \"./Register.jsx\";\r\n\r\n//const uuidv1 = require(\"uuid/v1\");\r\n\r\n//  compose function:\r\n//  - (...fns): array all function need to compose\r\n//  - x: collection / input value\r\n//  - reduceRight: array loop function, from right to left (last -> last - 1 -> last - 2 -> ...)\r\n//  =>  (y, f) => f(y), x === (previousValue, currentFunction) => currentFunction(previousValue), x\r\n//  =>  take last function in collectionFunction fns, use innitial value x, return value (y)\r\n//  =>  [a, b, c] => reduceRight((y, f) => f(y), x) === a(b(c))\r\nconst compose = (...fns) => x => fns.reduceRight((y, f) => f(y), x);\r\n\r\n//  Validation secction\r\n//  Employee Name validation\r\nconst validatePassword = ({\r\n    password\r\n}) => {\r\n    console.log(\"Validate password \" + password)\r\n    return password ? password.length <= 300 && password.length > 5 : false;\r\n};\r\n//  Email validation\r\nconst validateEmail = ({\r\n    email = \"https://www.google.com\"\r\n}) => {\r\n    console.log(\"Validate email \" + email)\r\n    let regex = new RegExp(\r\n        \"^(http[s]?:\\\\/\\\\/(www\\\\.)?|ftp:\\\\/\\\\/(www\\\\.)?|(www\\\\.)?){1}([0-9A-Za-z-\\\\.@:%_+~#=]+)+((\\\\.[a-zA-Z]{2,3})+)(/(.)*)?(\\\\?(.)*)?\"\r\n    );\r\n    return regex.test(email) || email.length === 0;\r\n};\r\n\r\n\r\n//  propType\r\nconst propsProTypes = {\r\n    //  create new guest func\r\n    createNewApplication: PropTypes.func,\r\n\r\n    //  validation func\r\n    validation: PropTypes.bool,\r\n    validatePassword: PropTypes.func,\r\n    validateEmail: PropTypes.func,\r\n};\r\n\r\nconst propsDefault = {\r\n    createNewApplication: () => {},\r\n\r\n    validatePassword: validatePassword,\r\n    validateEmail: validateEmail,\r\n};\r\n\r\nclass RegisterContainer extends Component {\r\n    static propTypes = propsProTypes;\r\n    static defaultProps = propsDefault;\r\n   \r\n    render() {\r\n        return ( <\r\n            Register fromProps = {\r\n                this.props\r\n            }\r\n            />\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n    return {\r\n        own: ownProps\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch, ownProps) => ({\r\n\r\n    createNewEmployee: async Employee => {\r\n        if (Employee) {\r\n            //     console.log(ownProps);\r\n            await dispatch(Action.Employee.createNewEmployee(Employee));\r\n        }\r\n    },\r\n\r\n    dispatch\r\n});\r\n\r\n//  compose all redux HOC\r\nconst enhance = compose(\r\n    withRouter,\r\n    connect(mapStateToProps, mapDispatchToProps, null)\r\n);\r\n\r\nexport default enhance(RegisterContainer);","import React from \"react\";\n//  react router\nimport { Link } from \"react-router-dom\";\n// reactstrap components\nimport {\n  Button,\n  Card,\n  CardHeader,\n  CardBody,\n  FormGroup,\n  Form,\n  Input,\n  InputGroupAddon,\n  InputGroupText,\n  InputGroup,\n  Row,\n  Col,\n  NavLink\n} from \"reactstrap\";\nimport { Redirect } from \"react-router-dom\";\n\nimport { connect } from \"react-redux\";\nimport Action from \"../../../redux/Action/index\";\n\nclass Login extends React.Component {\n  componentDidMount = () => {\n\n    // alert(this.props.isLoggedIn);\n    // alert((localStorage.getItem(\"userRole\") &&\n    //   localStorage.getItem(\"userEmail\") &&\n    //   localStorage.getItem(\"userAuthToken\") &&\n    //   localStorage.getItem(\"userId\")) ? \"true\" : \"false\");\n  }\n  render() {\n    return (\n      <>\n        <Col lg=\"5\" md=\"7\">\n          <Card className=\"bg-secondary shadow border-0\">\n            <CardHeader className=\"bg-transparent pb-5\">\n              <div className=\"text-muted text-center mt-2 mb-3\">\n                <small>Sign in with</small>\n              </div>\n              <div className=\"btn-wrapper text-center\">\n                {/* <Button\n                  className=\"btn-neutral btn-icon\"\n                  color=\"default\"\n                  href=\"#pablo\"\n                  onClick={e => e.preventDefault()}\n                >\n                  <span className=\"btn-inner--icon\">\n                    <img\n                      alt=\"...\"\n                      src={require(\"assets/img/icons/common/github.svg\")}\n                    />\n                  </span>\n                  <span className=\"btn-inner--text\">Github</span>\n                </Button> */}\n                <Button\n                  className=\"btn-neutral btn-icon\"\n                  color=\"default\"\n                  href=\"#pablo\"\n                  onClick={e => e.preventDefault()}\n                >\n                  <span className=\"btn-inner--icon\">\n                    <img\n                      alt=\"...\"\n                      src={require(\"assets/img/icons/common/google.svg\")}\n                    />\n                  </span>\n                  <span className=\"btn-inner--text\">Google</span>\n                </Button>\n              </div>\n            </CardHeader>\n            <CardBody className=\"px-lg-5 py-lg-5\">\n              <div className=\"text-center text-muted mb-4\">\n                <small>Or sign in with credentials</small>\n              </div>\n              <Form role=\"form\">\n                <FormGroup className=\"mb-3\">\n                  <InputGroup className=\"input-group-alternative\">\n                    <InputGroupAddon addonType=\"prepend\">\n                      <InputGroupText>\n                        <i className=\"ni ni-email-83\" />\n                      </InputGroupText>\n                    </InputGroupAddon>\n                    <Input\n                      innerRef={e => (this.emailInput = e)}\n                      defaultValue=\"kachyct@gmail.com\"\n                      placeholder=\"Email\"\n                      type=\"email\"\n                    />\n                  </InputGroup>\n                </FormGroup>\n                <FormGroup>\n                  <InputGroup className=\"input-group-alternative\">\n                    <InputGroupAddon addonType=\"prepend\">\n                      <InputGroupText>\n                        <i className=\"ni ni-lock-circle-open\" />\n                      </InputGroupText>\n                    </InputGroupAddon>\n                    <Input\n                      innerRef={e => (this.passwordInput = e)}\n                      defaultValue=\"kachyct\"\n                      placeholder=\"Password\"\n                      type=\"password\"\n                    />\n                  </InputGroup>\n                </FormGroup>\n                {/* <div className=\"custom-control custom-control-alternative custom-checkbox\">\n                  <input\n                    className=\"custom-control-input\"\n                    id=\" customCheckLogin\"\n                    type=\"checkbox\"\n                  />\n                  <label\n                    className=\"custom-control-label\"\n                    htmlFor=\" customCheckLogin\"\n                  >\n                    <span className=\"text-muted\">Remember me</span>\n                  </label>\n                </div> */}\n                <div className=\"text-center\">\n                  <Button\n                    // onClick={() => this.setState({ isLogIn: true })}\n                    onClick={event => {\n                      this.props.login(\n                        event,\n                        this.emailInput.value,\n                        this.passwordInput.value\n                      );\n                    }}\n                    className=\"my-4\"\n                    color=\"primary\"\n                    type=\"button\"\n                  >\n                    Sign in\n                  </Button>\n                </div>\n              </Form>\n            </CardBody>\n          </Card>\n          <Row className=\"mt-3\">\n            <Col xs=\"6\">\n              <NavLink\n                className=\"text-light\"\n                className=\"nav-link-icon\"\n                to=\"/auth/password-token\"\n                tag={Link}\n              >\n                <font className=\"text-light\" ><small>Forgot password ?</small></font>\n\n              </NavLink>\n            </Col>\n            <Col className=\"text-right\" xs=\"6\">\n              <NavLink\n                className=\"text-light\"\n                className=\"nav-link-icon\"\n                to=\"/auth/register\"\n                tag={Link}\n              >\n                <font className=\"text-light\" ><small>Create new account</small></font>\n\n              </NavLink>\n\n            </Col>\n          </Row>\n        </Col>\n      </>\n    );\n  }\n}\nconst mapStateToProps = state => {\n  return {\n    isLoggedIn: state.Login.isLoggedIn\n  };\n};\n\n// const mapDispatchToProps = (dispatch, ownProps) => ({\nconst mapDispatchToProps = dispatch => ({\n  login: (event, email, password) => {\n    event.preventDefault();\n    if (email && password && email.length > 0 && password.length > 0) {\n      dispatch(Action.Login.login({ email, password }));\n    }\n  },\n  // logout: () => {\n  //   dispatch(Action.Login.logout());\n  // },\n  // checkLogin: () => {\n  //   dispatch(Action.Login.checkLogin(1));\n  // },\n  dispatch,\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Login);\n","import React from \"react\";\r\n//  react router\r\nimport { Link } from \"react-router-dom\";\r\n\r\n//  set up proptype\r\nimport PropTypes from \"prop-types\";\r\n// reactstrap components\r\nimport {\r\n  Button,\r\n  Card,\r\n  CardHeader,\r\n  CardBody,\r\n  FormGroup,\r\n  Form,\r\n  Input,\r\n  InputGroupAddon,\r\n  InputGroupText,\r\n  InputGroup,\r\n  Row,\r\n  Col,\r\n  NavLink,\r\n  FormFeedback,\r\n  FormText,\r\n} from \"reactstrap\";\r\nimport { Redirect } from \"react-router-dom\";\r\n\r\nimport { connect } from \"react-redux\";\r\nimport {\r\n  withRouter\r\n} from \"react-router-dom\";\r\nimport Action from \"../../../redux/Action/index.js\";\r\n\r\n//  presentation component\r\nimport Register from \"./Register.jsx\";\r\n\r\n//const uuidv1 = require(\"uuid/v1\");\r\n\r\n//  compose function:\r\n//  - (...fns): array all function need to compose\r\n//  - x: collection / input value\r\n//  - reduceRight: array loop function, from right to left (last -> last - 1 -> last - 2 -> ...)\r\n//  =>  (y, f) => f(y), x === (previousValue, currentFunction) => currentFunction(previousValue), x\r\n//  =>  take last function in collectionFunction fns, use innitial value x, return value (y)\r\n//  =>  [a, b, c] => reduceRight((y, f) => f(y), x) === a(b(c))\r\nconst compose = (...fns) => x => fns.reduceRight((y, f) => f(y), x);\r\n\r\n//  Validation secction\r\n//  Email validation\r\nconst validateEmail = ({\r\n  email = \"https://www.google.com\"\r\n}) => {\r\n  console.log(\"Validate email \" + email)\r\n  let regex = new RegExp(\r\n    \"^(http[s]?:\\\\/\\\\/(www\\\\.)?|ftp:\\\\/\\\\/(www\\\\.)?|(www\\\\.)?){1}([0-9A-Za-z-\\\\.@:%_+~#=]+)+((\\\\.[a-zA-Z]{2,3})+)(/(.)*)?(\\\\?(.)*)?\"\r\n  );\r\n  return regex.test(email) || email.length === 0;\r\n};\r\n\r\n\r\n//  propType\r\nconst propsProTypes = {\r\n  //  validation func\r\n  validateEmail: PropTypes.func,\r\n};\r\n\r\nconst propsDefault = {\r\n  validateEmail: validateEmail,\r\n};\r\n\r\nclass PasswordResetToken extends React.Component {\r\n  static propTypes = propsProTypes;\r\n  static defaultProps = propsDefault;\r\n  state = {\r\n    emailValidation: null,\r\n    email: \"\"\r\n  };\r\n\r\n  //  validate value from each input and store value into state\r\n  isChange = async event => {\r\n    const name = event.target.name;\r\n    const value =\r\n      event.target.type === \"checkbox\"\r\n        ? event.target.checked\r\n        : event.target.value;\r\n    this.setState({\r\n      ...this.state,\r\n      [name]: value,\r\n      emailValidation: this.props.validateEmail({ [name]: value })\r\n    });\r\n    console.log(name + \" \" + value);\r\n  };\r\n\r\n  //  check validation\r\n  validation = () => {\r\n    return (\r\n      (this.state.emailValidation == null\r\n        ? false\r\n        : this.state.emailValidation)\r\n    );\r\n  };\r\n\r\n  //  create new employee\r\n  requestResetPassword = event => {\r\n    event.preventDefault();\r\n    this.props.requestResetPassword(this.state.email);\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <>\r\n        <Col lg=\"5\" md=\"7\">\r\n          <Card className=\"bg-secondary shadow border-0\">\r\n            <CardHeader className=\"bg-transparent pb-5\">\r\n              <div className=\"text-muted text-center mt-2 mb-3\">\r\n                <small>Sign in with</small>\r\n              </div>\r\n              <div className=\"btn-wrapper text-center\">\r\n                <Button\r\n                  className=\"btn-neutral btn-icon\"\r\n                  color=\"default\"\r\n                  href=\"#pablo\"\r\n                  onClick={e => e.preventDefault()}\r\n                >\r\n                  <span className=\"btn-inner--icon\">\r\n                    <img\r\n                      alt=\"...\"\r\n                      src={require(\"assets/img/icons/common/google.svg\")}\r\n                    />\r\n                  </span>\r\n                  <span className=\"btn-inner--text\">Google</span>\r\n                </Button>\r\n              </div>\r\n            </CardHeader>\r\n            <CardBody className=\"px-lg-5 py-lg-5\">\r\n              <div className=\"text-center text-muted mb-4\">\r\n                <small>Enter your email please</small>\r\n              </div>\r\n              <Form role=\"form\">\r\n                <FormGroup>\r\n                  <InputGroup className=\"input-group-alternative mb-3\">\r\n                    <InputGroupAddon addonType=\"prepend\">\r\n                      <InputGroupText>\r\n                        <i className=\"ni ni-email-83\" />\r\n                      </InputGroupText>\r\n                    </InputGroupAddon>\r\n                    <Input\r\n                      name=\"email\"\r\n                      onChange={(event) => this.isChange(event)}\r\n                      placeholder=\"Email\"\r\n                      defaultValue=\"\"\r\n                      innerRef={e => (this.emailInput = e)}\r\n                      type=\"email\" valid={this.state.nameValidation}\r\n                      invalid={\r\n                        this.state.nameValidation == null\r\n                          ? false\r\n                          : !this.state.nameValidation\r\n                      }\r\n                      required\r\n                    />\r\n                  </InputGroup>\r\n                  <FormFeedback\r\n                  >\r\n                    Invalid Employee Name\r\n                        </FormFeedback>\r\n                  <FormText>Email will be used to login, please provide correct email</FormText>\r\n                </FormGroup>\r\n\r\n                <div className=\"text-center\">\r\n                  <Button\r\n                    className=\"mt-4\"\r\n                    color=\"primary\"\r\n                    type=\"button\"\r\n                    disabled={!this.validation()}\r\n                    onClick={(e) => this.requestResetPassword(e)}\r\n                  >\r\n                    Get authenticate token\r\n                  </Button>\r\n                </div>\r\n              </Form>\r\n            </CardBody>\r\n          </Card>\r\n          <Row className=\"mt-3\">\r\n            <Col xs=\"6\">\r\n              <NavLink\r\n                className=\"text-light\"\r\n                className=\"nav-link-icon\"\r\n                to=\"/auth/login\"\r\n                tag={Link}\r\n              >\r\n                <font className=\"text-light\" ><small>Sign in !</small></font>\r\n\r\n              </NavLink>\r\n            </Col>\r\n            <Col className=\"text-right\" xs=\"6\">\r\n              <NavLink\r\n                className=\"text-light\"\r\n                className=\"nav-link-icon\"\r\n                to=\"/auth/register\"\r\n                tag={Link}\r\n              >\r\n                <font className=\"text-light\" ><small>Create new account</small></font>\r\n\r\n              </NavLink>\r\n\r\n            </Col>\r\n          </Row>\r\n        </Col>\r\n      </>\r\n    );\r\n  }\r\n}\r\nconst mapStateToProps = (state, ownProps) => {\r\n  return {\r\n    own: ownProps\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch, ownProps) => ({\r\n\r\n  requestResetPassword: async (email) => {\r\n    if (email) {\r\n      await dispatch(Action.Employee.requestResetPassword(email));\r\n    }\r\n  },\r\n\r\n  dispatch\r\n});\r\n\r\n//  compose all redux HOC\r\nconst enhance = compose(\r\n  withRouter,\r\n  connect(mapStateToProps, mapDispatchToProps, null)\r\n);\r\n\r\nexport default enhance(PasswordResetToken);\r\n","import React from \"react\";\r\n//  react router\r\nimport { Link } from \"react-router-dom\";\r\n// reactstrap components\r\nimport {\r\n  Button,\r\n  Card,\r\n  CardHeader,\r\n  CardBody,\r\n  FormGroup,\r\n  Form,\r\n  Input,\r\n  InputGroupAddon,\r\n  InputGroupText,\r\n  InputGroup,\r\n  Row,\r\n  Col,\r\n  NavLink\r\n} from \"reactstrap\";\r\nimport { Redirect } from \"react-router-dom\";\r\n\r\nimport { connect } from \"react-redux\";\r\nimport Action from \"../../../redux/Action/index\";\r\n\r\nclass PasswordReset extends React.Component {\r\n \r\n  render() {\r\n    return (\r\n      <>\r\n        <Col lg=\"5\" md=\"7\">\r\n          <Card className=\"bg-secondary shadow border-0\">\r\n            <CardHeader className=\"bg-transparent pb-5\">\r\n              <div className=\"text-muted text-center mt-2 mb-3\">\r\n                <small>Sign in with</small>\r\n              </div>\r\n              <div className=\"btn-wrapper text-center\">\r\n                {/* <Button\r\n                  className=\"btn-neutral btn-icon\"\r\n                  color=\"default\"\r\n                  href=\"#pablo\"\r\n                  onClick={e => e.preventDefault()}\r\n                >\r\n                  <span className=\"btn-inner--icon\">\r\n                    <img\r\n                      alt=\"...\"\r\n                      src={require(\"assets/img/icons/common/github.svg\")}\r\n                    />\r\n                  </span>\r\n                  <span className=\"btn-inner--text\">Github</span>\r\n                </Button> */}\r\n                <Button\r\n                  className=\"btn-neutral btn-icon\"\r\n                  color=\"default\"\r\n                  href=\"#pablo\"\r\n                  onClick={e => e.preventDefault()}\r\n                >\r\n                  <span className=\"btn-inner--icon\">\r\n                    <img\r\n                      alt=\"...\"\r\n                      src={require(\"assets/img/icons/common/google.svg\")}\r\n                    />\r\n                  </span>\r\n                  <span className=\"btn-inner--text\">Google</span>\r\n                </Button>\r\n              </div>\r\n            </CardHeader>\r\n            <CardBody className=\"px-lg-5 py-lg-5\">\r\n              <div className=\"text-center text-muted mb-4\">\r\n                <small>Enter your token and password</small>\r\n              </div>\r\n              <Form role=\"form\">\r\n                <FormGroup className=\"mb-3\">\r\n                  <InputGroup className=\"input-group-alternative\">\r\n                    <InputGroupAddon addonType=\"prepend\">\r\n                      <InputGroupText>\r\n                        <i className=\"ni ni-email-83\" />\r\n                      </InputGroupText>\r\n                    </InputGroupAddon>\r\n                    <Input\r\n                      innerRef={e => (this.emailInput = e)}\r\n                      defaultValue=\"kachyct@gmail.com\"\r\n                      placeholder=\"Email\"\r\n                      type=\"email\"\r\n                    />\r\n                  </InputGroup>\r\n                </FormGroup>\r\n                <FormGroup>\r\n                  <InputGroup className=\"input-group-alternative\">\r\n                    <InputGroupAddon addonType=\"prepend\">\r\n                      <InputGroupText>\r\n                        <i className=\"ni ni-lock-circle-open\" />\r\n                      </InputGroupText>\r\n                    </InputGroupAddon>\r\n                    <Input\r\n                      innerRef={e => (this.passwordInput = e)}\r\n                      defaultValue=\"kachyct\"\r\n                      placeholder=\"New Password\"\r\n                      type=\"password\"\r\n                    />\r\n                  </InputGroup>\r\n                </FormGroup>\r\n                {/* <div className=\"custom-control custom-control-alternative custom-checkbox\">\r\n                  <input\r\n                    className=\"custom-control-input\"\r\n                    id=\" customCheckLogin\"\r\n                    type=\"checkbox\"\r\n                  />\r\n                  <label\r\n                    className=\"custom-control-label\"\r\n                    htmlFor=\" customCheckLogin\"\r\n                  >\r\n                    <span className=\"text-muted\">Remember me</span>\r\n                  </label>\r\n                </div> */}\r\n                <div className=\"text-center\">\r\n                  <Button\r\n                    // onClick={() => this.setState({ isLogIn: true })}\r\n                    onClick={event => {\r\n                      this.props.login(\r\n                        event,\r\n                        this.emailInput.value,\r\n                        this.passwordInput.value\r\n                      );\r\n                    }}\r\n                    className=\"my-4\"\r\n                    color=\"primary\"\r\n                    type=\"button\"\r\n                  >\r\n                    Change your password\r\n                  </Button>\r\n                </div>\r\n              </Form>\r\n            </CardBody>\r\n          </Card>\r\n        </Col>\r\n      </>\r\n    );\r\n  }\r\n}\r\nconst mapStateToProps = state => {\r\n  return {\r\n    loginStatus: state.Login.isLogin\r\n  };\r\n};\r\n\r\n// const mapDispatchToProps = (dispatch, ownProps) => ({\r\nconst mapDispatchToProps = dispatch => ({\r\n  login: (event, email, password) => {\r\n    event.preventDefault();\r\n    if (email && password && email.length > 0 && password.length > 0) {\r\n      dispatch(Action.Login.login({ email, password }));\r\n    }\r\n  },\r\n  dispatch,\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(PasswordReset);\r\n","import React from \"react\";\r\nimport { Redirect } from \"react-router-dom\";\r\n\r\nimport { connect } from \"react-redux\";\r\nimport Action from \"./../../../redux/Action/index\";\r\n\r\nclass Logout extends React.Component {\r\n    componentDidMount = () => {\r\n        this.props.logout();\r\n    }\r\n    render() {\r\n        return (\r\n            <>\r\n\r\n            </>\r\n        );\r\n    }\r\n}\r\nconst mapStateToProps = state => {\r\n    return {\r\n    };\r\n};\r\n\r\n// const mapDispatchToProps = (dispatch, ownProps) => ({\r\nconst mapDispatchToProps = dispatch => ({\r\n    logout: () => {\r\n        dispatch(Action.Login.logout());\r\n    },\r\n\r\n    dispatch,\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Logout);\r\n","import React, { memo } from \"react\";\r\nimport {\r\n  Badge,\r\n  DropdownMenu,\r\n  DropdownItem,\r\n  UncontrolledDropdown,\r\n  DropdownToggle,\r\n  Media,\r\n  Progress\r\n} from \"reactstrap\";\r\n\r\n//  import Action from \"./../../../redux/Action/index.js\";\r\n//  server information modal\r\n// import ServerDetailModal from \"./ServerDetailModal.js\";\r\nconst Server = props => {\r\n  let {\r\n    data: {\r\n      id: serverId,\r\n      name: serverName,\r\n      ip_address: serverIp,\r\n      create_time: createDate,\r\n      active: status\r\n    },\r\n    disabled,\r\n    toggleInformationModal\r\n  } = props;\r\n\r\n  return (\r\n    <tr>\r\n      <th scope=\"row\">\r\n        <Media className=\"align-items-center\">\r\n          {/* <a\r\n            className=\"avatar rounded-circle mr-3\"\r\n            href=\"#pablo\"\r\n            onClick={e => e.preventDefault()}\r\n          >\r\n            <img alt=\"...\" src={require(\"assets/img/theme/bootstrap.jpg\")} />\r\n          </a> */}\r\n          <Media>\r\n            {/* <span className=\"mb-0 text-sm\">{createDate.slice(0,10) + \" \" + createDate.slice(12,23)}</span> */}\r\n            <span className=\"mb-0 text-sm\">{createDate}</span>\r\n          </Media>\r\n        </Media>\r\n      </th>\r\n      <td>{serverName}</td>\r\n      <td>\r\n        <Badge color=\"\" className=\"badge-dot mr-4\">\r\n          <i className=\"bg-warning\" />\r\n          {serverIp ? serverIp : \"192.168.1.1\"}\r\n        </Badge>\r\n      </td>\r\n      {/* <td>\r\n        {system_instance\r\n          ? \"0 Instances\"\r\n          : system_instance.length + \"Instances\"}\r\n      </td> */}\r\n      <td>\r\n        <div className=\"d-flex align-items-center\">\r\n          <span className=\"mr-2\">{status ? \"Active\" : \"Deactive\"}</span>\r\n          <div>\r\n            <Progress\r\n              max=\"100\"\r\n              value={status ? 100 : 0}\r\n              barClassName={status ? \"bg-info\" : \"bg-danger\"}\r\n            />\r\n          </div>\r\n        </div>\r\n      </td>\r\n      <td className=\"text-right\">\r\n        <UncontrolledDropdown>\r\n          <DropdownToggle\r\n            className=\"btn-icon-only text-light\"\r\n            href=\"#pablo\"\r\n            role=\"button\"\r\n            size=\"sm\"\r\n            color=\"\"\r\n            onClick={e => e.preventDefault()}\r\n          >\r\n            <i className=\"fas fa-ellipsis-v\" />\r\n          </DropdownToggle>\r\n          <DropdownMenu className=\"dropdown-menu-arrow\" right>\r\n            <DropdownItem\r\n              href=\"#pablo\"\r\n              onClick={e => toggleInformationModal(e, serverId)}\r\n            >\r\n              Update\r\n            </DropdownItem>\r\n            {/* <ServerDetailModal /> */}\r\n            <DropdownItem href=\"#pablo\" onClick={e => disabled(e, serverId, !status)}>\r\n              {status ? \"Disable\" : \"Active\"}\r\n            </DropdownItem>\r\n            <DropdownItem href=\"#pablo\" onClick={e => e.preventDefault()}>\r\n              Something else here\r\n            </DropdownItem>\r\n          </DropdownMenu>\r\n        </UncontrolledDropdown>\r\n      </td>\r\n    </tr>\r\n  );\r\n};\r\n\r\nconst arePropsEqual = (prevProps, nextProps) => {\r\n  return prevProps === nextProps;\r\n};\r\n// Wrap component using `React.memo()` and pass `arePropsEqual`\r\nexport default memo(Server, arePropsEqual);\r\n","import React, { Component } from \"react\";\r\n//  set up proptype\r\nimport PropTypes from \"prop-types\";\r\n//  redux component\r\n//  set up redux\r\nimport { connect } from \"react-redux\";\r\nimport { withRouter } from \"react-router-dom\";\r\nimport Action from \"./../../../redux/Action/index.js\";\r\n\r\n//  presentation component\r\nimport Server from \"./Server.jsx\";\r\nconst uuidv1 = require(\"uuid/v1\");\r\n//  compose function:\r\n//  - (...fns): array all function need to compose\r\n//  - x: collection / input value\r\n//  - reduceRight: array loop function, from right to left (last -> last - 1 -> last - 2 -> ...)\r\n//  =>  (y, f) => f(y), x === (previousValue, currentFunction) => currentFunction(previousValue), x\r\n//  =>  take last function in collectionFunction fns, use innitial value x, return value (y)\r\n//  =>  [a, b, c] => reduceRight((y, f) => f(y), x) === a(b(c))\r\nconst compose = (...fns) => x => fns.reduceRight((y, f) => f(y), x);\r\n\r\n//  propType\r\nconst propsProTypes = {\r\n  index: PropTypes.number,\r\n  data: PropTypes.array\r\n};\r\n\r\nconst propsDefault = {\r\n  index: 1,\r\n  data: []\r\n};\r\n\r\nclass ServerContainer extends Component {\r\n  static propTypes = propsProTypes;\r\n  static defaultProps = propsDefault;\r\n  state = {\r\n    tableData: []\r\n  };\r\n\r\n  componentDidMount() {\r\n    //console.log(\"ServerContainer componentDidMount: \", this.props);\r\n    this.props.getData();\r\n    this.setState({\r\n      tableData: this.props.data\r\n    })\r\n  }\r\n\r\n  // componentDidUpdate(prevProps, prevState) {\r\n  //   console.log(\"ServerContainer componentDidUpdate \");\r\n  // }\r\n\r\n  // shouldComponentUpdate(nextProps) {\r\n  //   console.log(\"Server Container: \" + JSON.stringify(this.props))\r\n  //   if (this.props.data === null) {\r\n  //     return true;\r\n  //   }\r\n  //   if (this.props.data === nextProps.data) {\r\n  //     return false;\r\n  //   }\r\n  //   return true;\r\n  // }\r\n\r\n  render() {\r\n    //console.log(\"Server Container: \" + JSON.stringify(this.props));\r\n    let { data = [], disabled, toggleInformationModal } = this.props;\r\n    return (\r\n      <>\r\n        {data.map((value, key) => {\r\n          return (\r\n            <Server\r\n              index={key}\r\n              key={uuidv1()}\r\n              data={value}\r\n              disabled={disabled}\r\n              toggleInformationModal={toggleInformationModal}\r\n            />\r\n          );\r\n        })}\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n  return {\r\n    data: state.Server.currentDataList,\r\n    own: ownProps\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch, ownProps) => ({\r\n  toggleInformationModal: (event, id) => {\r\n    event.preventDefault();\r\n    if (id) {\r\n      dispatch(Action.Server.storeCurrentSelectedServer(id));\r\n      dispatch(Action.Server.toggleInformationModal);\r\n    } \r\n  },\r\n  // update: async (event, id) => {\r\n  //   event.preventDefault();\r\n  //   if (id) {\r\n  //     //     console.log(ownProps);\r\n  //     //   let serverDetail = this.props.serverList.find(server => server.id == id);\r\n  //     //   if (serverDetail) {\r\n  //     // dispatch(Action.checkLogin(email, password));\r\n  //     //   }\r\n  //   }\r\n  // },\r\n  disabled: async (\r\n    event,\r\n    id,\r\n    active,\r\n  ) => {\r\n    event.preventDefault();\r\n    if (id) {\r\n      await dispatch(Action.Server.updateServerStatus(\r\n        id,\r\n        active\r\n      ));\r\n       dispatch(Action.Server.getData());\r\n    }\r\n  },\r\n  getData: async () => {\r\n    await dispatch(Action.Server.getData());\r\n  },\r\n\r\n  dispatch\r\n});\r\n\r\n//  compose all redux HOC\r\nconst enhance = compose(\r\n  withRouter,\r\n  connect(mapStateToProps, mapDispatchToProps, null)\r\n);\r\n\r\nexport default enhance(ServerContainer);\r\n","//  reactstrap component\r\nimport {\r\n  Button,\r\n  Modal,\r\n  ModalHeader,\r\n  ModalBody,\r\n  ModalFooter,\r\n  Col,\r\n  Row,\r\n  Form,\r\n  FormGroup,\r\n  Label,\r\n  Input,\r\n  FormFeedback,\r\n  FormText,\r\n} from \"reactstrap\";\r\n//  pure component: memo\r\nimport React, { memo, useState } from \"react\";\r\n\r\n//const uuidv1 = require(\"uuid/v1\");\r\n\r\nconst ServerRegistrationModal = ({ fromProps }) => {\r\n  let {\r\n    modal,\r\n    toggleCreateModal,\r\n    validateServerCode,\r\n    validateServerName,\r\n    validateServerTypeAndOS,\r\n\r\n    role,\r\n\r\n\r\n  } = fromProps;\r\n\r\n  console.log(\"Create Modal Presentation \", fromProps);\r\n  //  close button\r\n  const closeBtn = (\r\n    <button className=\"close\" onClick={toggleCreateModal}>\r\n      &times;\r\n    </button>\r\n  );\r\n\r\n  //  ref to general information\r\n  const serverCodeRef = React.createRef();\r\n  const serverNameRef = React.createRef();\r\n  const serverOsSelectRef = React.createRef();\r\n  const serverTypeSelectRef = React.createRef();\r\n\r\n  //  Validation state\r\n  //  General information\r\n  const [serverCodeValidation, setServerCodeValidation] = useState(true);\r\n  const [serverNameValidation, setServerNameValidation] = useState(true);\r\n  const [serverOsSelectValidation, setServerOsSelectValidation] = useState(\r\n    true\r\n  );\r\n\r\n  //  validate value from each input and store value into state\r\n  const checkValidation = async event => {\r\n    const name = event.target.name;\r\n    const value =\r\n      event.target.type === \"checkbox\"\r\n        ? event.target.checked\r\n        : event.target.value;\r\n\r\n    switch (name) {\r\n      case \"serverCode\":\r\n        setServerCodeValidation(validateServerCode({ [name]: value }));\r\n        break;\r\n\r\n      case \"serverName\":\r\n        setServerNameValidation(validateServerName({ [name]: value }));\r\n        break;\r\n\r\n      case \"serverOsSelect\":\r\n        let condition = {\r\n          serverTypeSelect: serverTypeSelectRef.current.value\r\n            ? serverTypeSelectRef.current.value\r\n            : 1,\r\n          [name]: parseInt(value)\r\n        };\r\n        setServerOsSelectValidation(validateServerTypeAndOS(condition));\r\n        break;\r\n\r\n      case \"serverTypeSelect\":\r\n        condition = {\r\n          [name]: parseInt(value),\r\n          serverOsSelect: serverOsSelectRef.current.value\r\n            ? serverOsSelectRef.current.value\r\n            : 1\r\n        };\r\n        setServerOsSelectValidation(validateServerTypeAndOS(condition));\r\n        break;\r\n\r\n      default:\r\n        break;\r\n    }\r\n  };\r\n\r\n  //  check validation\r\n  const validation = () => {\r\n    return (\r\n      serverCodeValidation &&\r\n      serverNameValidation &&\r\n      serverOsSelectValidation\r\n    );\r\n  };\r\n\r\n\r\n  //  update server information\r\n  const createNewServer = event => {\r\n    event.preventDefault();\r\n    alert(\"2\")\r\n    const server = {\r\n      name: serverNameRef.current.value,\r\n      os: serverOsSelectRef.current.value,\r\n      server_code: serverCodeRef.current.value,\r\n      type: serverTypeSelectRef.current.value,\r\n    };\r\n    fromProps.createNewServer(server);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Modal\r\n        isOpen={modal}\r\n        toggle={toggleCreateModal}\r\n        // modalTransition={{ timeout: 1000 }}\r\n        // backdropTransition={{ timeout: 1500 }}\r\n        className={`modal-dialog modal-lg modal-dialog-centered modal-dialog-scrollable`}\r\n      >\r\n        <ModalHeader toggle={() => this.toggle()} close={closeBtn}>\r\n          SERVER REGISTRATION\r\n        </ModalHeader>\r\n        <ModalBody>\r\n          <Form>\r\n            <Row form>\r\n              <Col md={6}>\r\n                <FormGroup>\r\n                  <Label for=\"serverName\">Server Name</Label>\r\n                  <Input\r\n                    onChange={event => checkValidation(event)}\r\n                    type=\"text\"\r\n                    name=\"serverName\"\r\n                    id=\"serverName\"\r\n                    placeholder=\"Server Name is required\"\r\n                    //defaultValue={name}\r\n                    innerRef={serverNameRef}\r\n                    valid={serverNameValidation}\r\n                    invalid={\r\n                      serverNameValidation == null\r\n                        ? false\r\n                        : !serverNameValidation\r\n                    }\r\n                  />\r\n                  <FormFeedback>Invalid Server Name</FormFeedback>\r\n                  <FormText>Max length is 10</FormText>\r\n                </FormGroup>\r\n              </Col>\r\n              <Col md={6}>\r\n                <FormGroup>\r\n                  <Label for=\"serverCode\">Server Code</Label>\r\n                  <Input\r\n                    onChange={event => checkValidation(event)}\r\n                    type=\"text\"\r\n                    name=\"serverCode\"\r\n                    //id=\"serverCode\"\r\n                    placeholder=\"Server Code is required\"\r\n                    //defaultValue={server_code}\r\n                    innerRef={serverCodeRef}\r\n                    valid={serverCodeValidation}\r\n                    invalid={\r\n                      serverCodeValidation == null\r\n                        ? false\r\n                        : !serverCodeValidation\r\n                    }\r\n                  />\r\n                  <FormFeedback>Invalid Server Code</FormFeedback>\r\n                  <FormText>Max length is 10</FormText>\r\n                </FormGroup>\r\n\r\n\r\n              </Col>\r\n            </Row>\r\n\r\n            <FormGroup>\r\n              <Label for=\"serverTypeSelect\">Choose Type</Label>\r\n              <Input\r\n                type=\"select\"\r\n                id=\"serverTypeSelect\"\r\n                name=\"serverTypeSelect\"\r\n                defaultValue={1}\r\n                onChange={event => checkValidation(event)}\r\n                innerRef={serverTypeSelectRef}\r\n              >\r\n                <option value=\"1\">Physical Web Server</option>\r\n                <option value=\"2\">Cloud Web Server</option>\r\n                <option value=\"3\">Repository Server</option>\r\n                <option value=\"4\">Database Server</option>\r\n              </Input>\r\n            </FormGroup>\r\n\r\n            <FormGroup>\r\n              <Label for=\"serverOsSelect\">Choose Operation System</Label>\r\n              <Input\r\n                type=\"select\"\r\n                id=\"serverOsSelect\"\r\n                name=\"serverOsSelect\"\r\n                defaultValue={1}\r\n                onChange={event => checkValidation(event)}\r\n                innerRef={serverOsSelectRef}\r\n                valid={serverOsSelectValidation}\r\n                invalid={\r\n                  serverOsSelectValidation == null\r\n                    ? false\r\n                    : !serverOsSelectValidation\r\n                }\r\n              >\r\n                <option value=\"1\">Windows Os</option>\r\n                <option value=\"2\">Linux Os</option>\r\n                <option value=\"3\">Azure Git</option>\r\n                <option value=\"4\">GitHub</option>\r\n                <option value=\"5\">GitLab</option>\r\n                <option value=\"6\">Other Git</option>\r\n                <option value=\"7\">Microsoft SQL</option>\r\n                <option value=\"8\">MongoDB</option>\r\n                <option value=\"9\">FirebaseDB</option>\r\n                <option value=\"10\">Other DB</option>\r\n              </Input>\r\n              <FormFeedback>\r\n                Invalid Server Type, check guidance\r\n                    </FormFeedback>\r\n              <FormText>\r\n                Physical / Cloud Web Server can only be Windows or Linux\r\n                    </FormText>\r\n              <FormText>\r\n                Repository Server can only be Azure Git / GitHub / GitLab\r\n                / Other Git\r\n                    </FormText>\r\n              <FormText>\r\n                Database Serverr can only be Microsoft SQL / MongoDB /\r\n                FirebaseDB / Other DB\r\n                    </FormText>\r\n            </FormGroup>\r\n\r\n          </Form>\r\n        </ModalBody>\r\n        <ModalFooter>\r\n          {\" \"}\r\n          <Button\r\n            disabled={!validation()}\r\n            color=\"primary\"\r\n            onClick={e => createNewServer(e)}\r\n          >\r\n            Create New Server\r\n                  </Button>\r\n          <Button color=\"secondary\" onClick={toggleCreateModal}>\r\n            Cancel\r\n          </Button>\r\n\r\n        </ModalFooter>\r\n      </Modal>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst arePropsEqual = (prevProps, nextProps) => {\r\n  return prevProps === nextProps;\r\n};\r\n// Wrap component using `React.memo()` and pass `arePropsEqual`\r\nexport default memo(ServerRegistrationModal, arePropsEqual);\r\n","import React, {\r\n  Component\r\n} from \"react\";\r\n//  set up proptype\r\nimport PropTypes from \"prop-types\";\r\n\r\n//  redux component\r\n//  set up redux\r\nimport {\r\n  connect\r\n} from \"react-redux\";\r\nimport {\r\n  withRouter\r\n} from \"react-router-dom\";\r\nimport Action from \"../../../redux/Action/index.js\";\r\n//  presentation component\r\nimport ServerRegistrationModal from \"./ServerRegistrationModal.jsx\";\r\n// const uuidv1 = require(\"uuid/v1\");\r\n//  compose function:\r\n//  - (...fns): array all function need to compose\r\n//  - x: collection / input value\r\n//  - reduceRight: array loop function, from right to left (last -> last - 1 -> last - 2 -> ...)\r\n//  =>  (y, f) => f(y), x === (previousValue, currentFunction) => currentFunction(previousValue), x\r\n//  =>  take last function in collectionFunction fns, use innitial value x, return value (y)\r\n//  =>  [a, b, c] => reduceRight((y, f) => f(y), x) === a(b(c))\r\nconst compose = (...fns) => x => fns.reduceRight((y, f) => f(y), x);\r\n\r\n//  Validation secction\r\n//  General information validation\r\n//  Server Code \r\nconst validateServerCode = ({\r\n  serverCode\r\n}) => {\r\n  return serverCode ? serverCode.length <= 10 && serverCode.length >= 0 : false;\r\n};\r\n//  Server Name \r\nconst validateServerName = ({\r\n  serverName\r\n}) => {\r\n  return serverName ? serverName.length <= 10 && serverName.length >= 0 : false;\r\n};\r\n//  Server Type \r\nconst validateServerTypeAndOS = ({\r\n  serverTypeSelect = 1,\r\n  serverOsSelect = 1\r\n}) => {\r\n  let type = typeof (serverTypeSelect) == \"string\" ? parseInt(serverTypeSelect) : serverTypeSelect;\r\n  let os = typeof (serverOsSelect) == \"string\" ? parseInt(serverOsSelect) : serverOsSelect;\r\n  console.log(\"type \", typeof (type) + type);\r\n  console.log(\"os \", typeof (os) + os);\r\n  if (\r\n    (type === 1 || type === 2) &&\r\n    os > 2\r\n  ) {\r\n    console.log(\"false 1\");\r\n    return false;\r\n  }\r\n  if (type === 3 && (os < 3 || os > 6)) {\r\n    console.log(\"false 2\");\r\n    return false;\r\n  }\r\n  if (type === 4 && (os < 7 || os > 10)) {\r\n    console.log(\"false 3\");\r\n    return false;\r\n  }\r\n  console.log(\"true\");\r\n  return true;\r\n};\r\n//  Server OS \r\n\r\n\r\n\r\n//  propType\r\nconst propsProTypes = {\r\n  modal: PropTypes.bool,\r\n  // toggleInformationModal: PropTypes.func\r\n\r\n  //  validation func\r\n  //validation: PropTypes.bool,\r\n  validateServerCode: PropTypes.func,\r\n  validateServerName: PropTypes.func,\r\n  validateServerTypeAndOS: PropTypes.func,\r\n\r\n};\r\n\r\nconst propsDefault = {\r\n  modal: false,\r\n  validateServerCode: validateServerCode,\r\n  validateServerName: validateServerName,\r\n  validateServerTypeAndOS: validateServerTypeAndOS,\r\n\r\n};\r\n\r\nclass ServerRegistrationModalContainer extends Component {\r\n  static propTypes = propsProTypes;\r\n  static defaultProps = propsDefault;\r\n  // state = {\r\n  //   modal: false,\r\n  //   data: {}\r\n  // };\r\n\r\n  render() {\r\n    return ( <\r\n      ServerRegistrationModal fromProps = {\r\n        this.props\r\n      }\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n  return {\r\n    modal: state.Server.toggleCreateModal,\r\n    own: ownProps,\r\n    role: state.Login.loginInfor.role\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch, ownProps) => ({\r\n  //  toogle information modal\r\n  toggleCreateModal: () => {\r\n    dispatch(Action.Server.toggleCreateModal);\r\n  },\r\n\r\n  //  update server general information\r\n  createNewServer: async server => {\r\n    await dispatch(Action.Server.createNewServer(server));\r\n    await dispatch(Action.Server.getData());\r\n\r\n  },\r\n\r\n  dispatch\r\n});\r\n\r\n//  compose all redux HOC\r\nconst enhance = compose(\r\n  withRouter,\r\n  connect(mapStateToProps, mapDispatchToProps, null)\r\n);\r\n\r\nexport default enhance(ServerRegistrationModalContainer);","//  reactstrap component\r\nimport {\r\n  Button,\r\n  Modal,\r\n  ModalHeader,\r\n  ModalBody,\r\n  ModalFooter,\r\n  Col,\r\n  Row,\r\n  Form,\r\n  FormGroup,\r\n  Label,\r\n  Input,\r\n  FormFeedback,\r\n  FormText,\r\n\r\n  //  React tab\r\n  TabContent,\r\n  TabPane,\r\n  Nav,\r\n  NavItem,\r\n  NavLink,\r\n  Card,\r\n  //Button\r\n} from \"reactstrap\";\r\nimport classnames from \"classnames\";\r\n//  pure component: memo\r\nimport React, { memo, useState } from \"react\";\r\n\r\nconst uuidv1 = require(\"uuid/v1\");\r\n\r\nconst ServerInformationModal = ({ fromProps }) => {\r\n  let {\r\n    modal,\r\n    toggleInformationModal,\r\n    serverMasterList,\r\n    // createNewServer,\r\n    // updateServerDetail,\r\n    // updateServerAccount,\r\n    // disabled,\r\n\r\n    validateIPaddress,\r\n    validateServerCode,\r\n    validateServerName,\r\n    validateServerUrl,\r\n    validateServerDescription,\r\n    validateExpiredDate,\r\n    validateServerTypeAndOS,\r\n\r\n    validateDisk1,\r\n    validateDisk2,\r\n    validateDisk3,\r\n    validateDiskVolume1,\r\n    validateDiskVolume2,\r\n    validateDiskVolume3,\r\n\r\n    validateAccount,\r\n    validatePassword,\r\n\r\n    role,\r\n\r\n    server: {\r\n      id,\r\n      // server_master_registration,\r\n      // company_id,\r\n      create_time,\r\n      description,\r\n      expired_date,\r\n      ip_address,\r\n      name,\r\n      os,\r\n      server_code,\r\n      server_master,\r\n      server_url,\r\n      type,\r\n      update_time,\r\n      server_account,\r\n      server_detail\r\n    }\r\n  } = fromProps;\r\n\r\n  console.log(\"Detail Modal Presentation \", fromProps);\r\n  //  close button\r\n  const closeBtn = (\r\n    <button className=\"close\" onClick={toggleInformationModal}>\r\n      &times;\r\n    </button>\r\n  );\r\n\r\n  //  ref to general information\r\n  const serverMasterSellectRef = React.createRef();\r\n  const serverIpAddressRef = React.createRef();\r\n  const serverCodeRef = React.createRef();\r\n  const serverNameRef = React.createRef();\r\n  const serverExpiredDateRef = React.createRef();\r\n  const serverCreateDateRef = React.createRef();\r\n  const serverUpdateDateRef = React.createRef();\r\n  const serverUrlRef = React.createRef();\r\n  const serverDescriptionRef = React.createRef();\r\n  const serverOsSelectRef = React.createRef();\r\n  const serverTypeSelectRef = React.createRef();\r\n\r\n  //  ref to server detail\r\n  const disk1Ref = React.createRef();\r\n  const volume_disk1Ref = React.createRef();\r\n  const disk2Ref = React.createRef();\r\n  const volume_disk2Ref = React.createRef();\r\n  const disk3Ref = React.createRef();\r\n  const volume_disk3Ref = React.createRef();\r\n\r\n  //  ref to server account\r\n  const accountRef = React.createRef();\r\n  const passwordRef = React.createRef();\r\n  const confirmPasswordRef = React.createRef();\r\n\r\n  //  Validation state\r\n  //  General information\r\n  const [serverIpAddressValidation, setServerIpAddressValidation] = useState(\r\n    true\r\n  );\r\n  const [serverCodeValidation, setServerCodeValidation] = useState(true);\r\n  const [serverNameValidation, setServerNameValidation] = useState(true);\r\n  const [\r\n    serverExpiredDateValidation,\r\n    setServerExpiredDateValidation\r\n  ] = useState(true);\r\n  // const [serverCreateDateValidation, setServerCreateDateValidation] = useState(\r\n  //   true\r\n  // );\r\n  // const [serverUpdateDateValidation, setServerUpdateDateValidation] = useState(\r\n  //   true\r\n  // );\r\n  const [serverUrlValidation, setServerUrlValidation] = useState(true);\r\n  const [\r\n    serverDescriptionValidation,\r\n    setServerDescriptionValidation\r\n  ] = useState(true);\r\n  const [serverOsSelectValidation, setServerOsSelectValidation] = useState(\r\n    true\r\n  );\r\n  const [\r\n    serverAccountPasswordShowUp,\r\n    setServerAccountPasswordShowUp\r\n  ] = useState(true);\r\n  const [\r\n    serverAccountConfirmPasswordShowUp,\r\n    setServerAccountConfirmPasswordShowUp\r\n  ] = useState(true);\r\n  //  Detail\r\n  const [\r\n    firstDiskName,\r\n    setFirstDiskName\r\n  ] = useState(true);\r\n  const [\r\n    secondDiskName,\r\n    setSecondDiskName\r\n  ] = useState(true);\r\n  const [\r\n    thirdDiskName,\r\n    setThirdDiskName\r\n  ] = useState(true);\r\n  const [\r\n    firstDiskVolume,\r\n    setFirstDiskVolume\r\n  ] = useState(true);\r\n  const [\r\n    secondDiskVolume,\r\n    setSecondDiskVolume\r\n  ] = useState(true);\r\n  const [\r\n    thirdDiskVolume,\r\n    setThirdDiskVolume\r\n  ] = useState(true);\r\n  //  Account\r\n  const [\r\n    serverAccount,\r\n    setServerAccount\r\n  ] = useState(true);\r\n  const [\r\n    serverPassword,\r\n    setServerPassword\r\n  ] = useState(true);\r\n  const [\r\n    serverConfirmPassword,\r\n    setServerConfirmPassword\r\n  ] = useState(true);\r\n\r\n  //  validate value from each input and store value into state\r\n  const checkValidation = async event => {\r\n    const name = event.target.name;\r\n    const value =\r\n      event.target.type === \"checkbox\"\r\n        ? event.target.checked\r\n        : event.target.value;\r\n\r\n    switch (name) {\r\n      case \"serverIpAddress\":\r\n        setServerIpAddressValidation(validateIPaddress({ [name]: value }));\r\n        break;\r\n\r\n      case \"serverCode\":\r\n        setServerCodeValidation(validateServerCode({ [name]: value }));\r\n        break;\r\n\r\n      case \"serverName\":\r\n        setServerNameValidation(validateServerName({ [name]: value }));\r\n        break;\r\n\r\n      case \"serverUrl\":\r\n        setServerUrlValidation(validateServerUrl({ [name]: value }));\r\n        break;\r\n\r\n      case \"serverDescription\":\r\n        setServerDescriptionValidation(\r\n          validateServerDescription({\r\n            [name]: value\r\n          })\r\n        );\r\n        break;\r\n\r\n      case \"serverExpiredDate\":\r\n        setServerExpiredDateValidation(validateExpiredDate({ [name]: value }));\r\n        break;\r\n\r\n      case \"serverOsSelect\":\r\n        let condition = {\r\n          serverTypeSelect: serverTypeSelectRef.current.value\r\n            ? serverTypeSelectRef.current.value\r\n            : type,\r\n          [name]: parseInt(value)\r\n        };\r\n        setServerOsSelectValidation(validateServerTypeAndOS(condition));\r\n        break;\r\n\r\n      case \"serverTypeSelect\":\r\n        condition = {\r\n          [name]: parseInt(value),\r\n          serverOsSelect: serverOsSelectRef.current.value\r\n            ? serverOsSelectRef.current.value\r\n            : os\r\n        };\r\n        setServerOsSelectValidation(validateServerTypeAndOS(condition));\r\n        break;\r\n\r\n      case \"firstDiskName\":\r\n        console.log(value);\r\n        setFirstDiskName(validateDisk1({ [name]: value }));\r\n        break;\r\n\r\n      case \"secondDiskName\":\r\n        console.log(value);\r\n        setSecondDiskName(validateDisk2({ [name]: value }));\r\n        break;\r\n\r\n      case \"thirdDiskName\":\r\n        console.log(value);\r\n        setThirdDiskName(validateDisk3({ [name]: value }));\r\n        break;\r\n\r\n      case \"firstDiskVolume\":\r\n        console.log(value);\r\n        setFirstDiskVolume(validateDiskVolume1({ [name]: value }));\r\n        break;\r\n\r\n      case \"secondDiskVolume\":\r\n        console.log(value);\r\n        setSecondDiskVolume(validateDiskVolume2({ [name]: value }));\r\n        break;\r\n\r\n      case \"thirdDiskVolume\":\r\n        console.log(value);\r\n        setThirdDiskVolume(validateDiskVolume3({ [name]: value }));\r\n        break;\r\n\r\n      case \"serverAccount\":\r\n        console.log(value);\r\n        setServerAccount(validateAccount({ [name]: value }));\r\n        break;\r\n\r\n      case \"serverPassword\":\r\n        console.log(value);\r\n        console.log(passwordRef.current.value + confirmPasswordRef.current.value);\r\n        console.log(passwordRef.current.value === confirmPasswordRef.current.value);\r\n        setServerPassword(validatePassword({ [name]: value }) && passwordRef.current.value === confirmPasswordRef.current.value);\r\n        setServerConfirmPassword(passwordRef.current.value === confirmPasswordRef.current.value);\r\n        break;\r\n\r\n      case \"serverConfirmPassword\":\r\n        console.log(value);\r\n        console.log(passwordRef.current.value + confirmPasswordRef.current.value);\r\n        console.log(passwordRef.current.value === confirmPasswordRef.current.value);\r\n        setServerPassword(validatePassword({ [name]: value }) && passwordRef.current.value === confirmPasswordRef.current.value);\r\n        setServerConfirmPassword(passwordRef.current.value === confirmPasswordRef.current.value);\r\n        break;\r\n\r\n      default:\r\n        break;\r\n    }\r\n  };\r\n\r\n  //  check validation\r\n  const generalInformationValidation = () => {\r\n    return (\r\n      serverIpAddressValidation &&\r\n      serverCodeValidation &&\r\n      serverNameValidation &&\r\n      serverExpiredDateValidation &&\r\n      serverUrlValidation &&\r\n      serverDescriptionValidation &&\r\n      serverOsSelectValidation\r\n    );\r\n  };\r\n\r\n  const detailValidation = () => {\r\n    return (\r\n      firstDiskName &&\r\n      secondDiskName &&\r\n      thirdDiskName &&\r\n      firstDiskVolume &&\r\n      secondDiskVolume &&\r\n      thirdDiskVolume\r\n    )\r\n  }\r\n\r\n  //  update server information\r\n  const updateServerInformation = event => {\r\n    event.preventDefault();\r\n    const server = {\r\n      id : id,\r\n      description: serverDescriptionRef.current.value,\r\n      expire_date: serverExpiredDateRef.current.value,\r\n      // create_time: serverCreateDateRef.current.value,\r\n      // update_time: serverUpdateDateRef.current.value,\r\n      ip_address: serverIpAddressRef.current.value,\r\n      name: serverNameRef.current.value,\r\n      os: serverOsSelectRef.current.value,\r\n      server_code: serverCodeRef.current.value,\r\n      server_master: serverMasterSellectRef.current.value ,\r\n      server_url: serverUrlRef.current.value,\r\n      type: serverTypeSelectRef.current.value,\r\n      // active: isActiveCheckRef.current.checked\r\n    };\r\n    fromProps.updateServerInformation(server);\r\n  };\r\n\r\n  //  update server detail\r\n  const updateServerDetail = event => {\r\n    event.preventDefault();\r\n    fromProps.updateServerDetail({\r\n      server_detail_id: server_detail ? server_detail.id : 0,\r\n      id: id,\r\n      disk1: disk1Ref.current.value ? disk1Ref.current.value : volume_disk1Ref.current.value ? \"A\" : \"\",\r\n      volume_disk1: volume_disk1Ref.current.value ? volume_disk1Ref.current.value : disk1Ref.current.value ? \"0\" : \"\",\r\n      disk2: disk2Ref.current.value ? disk2Ref.current.value : volume_disk2Ref.current.value ? \"B\" : \"\",\r\n      volume_disk2: volume_disk2Ref.current.value ? volume_disk2Ref.current.value : disk2Ref.current.value ? \"0\" : \"\",\r\n      disk3: disk3Ref.current.value ? disk3Ref.current.value : volume_disk3Ref.current.value ? \"C\" : \"\",\r\n      volume_disk3: volume_disk3Ref.current.value ? volume_disk3Ref.current.value : disk3Ref.current.value ? \"0\" : \"\",\r\n    });\r\n  }\r\n\r\n  //  Update server account\r\n  const updateServerAccount = event => {\r\n    event.preventDefault();\r\n    const server_account = {\r\n      server_id: id,\r\n      username: accountRef.current.value ? accountRef.current.value : \"sa\",\r\n      password: passwordRef.current.value ? passwordRef.current.value : \"12345678\"\r\n    };\r\n    fromProps.updateServerAccount(server_account);\r\n  }\r\n\r\n  //  modal tab section\r\n  const [activeTab, setActiveTab] = useState(\"1\");\r\n  const toggleTab = tab => {\r\n    if (activeTab !== tab) setActiveTab(tab);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Modal\r\n        isOpen={modal}\r\n        toggle={toggleInformationModal}\r\n        // modalTransition={{ timeout: 1000 }}\r\n        // backdropTransition={{ timeout: 1500 }}\r\n        className={`modal-dialog modal-lg modal-dialog-centered modal-dialog-scrollable`}\r\n      >\r\n        <ModalHeader toggle={() => this.toggle()} close={closeBtn}>\r\n          SERVER INFORMATION\r\n        </ModalHeader>\r\n        <ModalBody>\r\n          <Nav tabs>\r\n            <NavItem>\r\n              <NavLink\r\n                className={classnames({ active: activeTab === \"1\" })}\r\n                onClick={() => {\r\n                  toggleTab(\"1\");\r\n                }}\r\n              >\r\n                General\r\n              </NavLink>\r\n            </NavItem>\r\n            <NavItem>\r\n              <NavLink\r\n                className={classnames({ active: activeTab === \"2\" })}\r\n                onClick={() => {\r\n                  toggleTab(\"2\");\r\n                }}\r\n              >\r\n                Detail\r\n              </NavLink>\r\n            </NavItem>\r\n            <NavItem>\r\n              <NavLink\r\n                className={classnames({ active: activeTab === \"3\" })}\r\n                onClick={() => {\r\n                  toggleTab(\"3\");\r\n                }}\r\n              >\r\n                Account\r\n              </NavLink>\r\n            </NavItem>\r\n          </Nav>\r\n          <TabContent activeTab={activeTab}>\r\n            <TabPane tabId=\"1\">\r\n              <Form>\r\n                <Card body>\r\n                  <Row form>\r\n                    <Col md={6}>\r\n                      <FormGroup>\r\n                        {/* <Label for=\"serverID\"  visible={0}>Server ID</Label> */}\r\n                        <Input\r\n                          //onChange={event => checkValidation(event)}\r\n                          type=\"hidden\"\r\n                          name=\"serverID\"\r\n                          //id=\"serverCode\"\r\n                          placeholder=\"Server ID is required\"\r\n                          defaultValue={id}\r\n\r\n                        // valid={serverCodeValidation}\r\n                        // invalid={\r\n                        //   serverCodeValidation == null\r\n                        //     ? false\r\n                        //     : !serverCodeValidation\r\n                        // }\r\n                        />\r\n                        {/* <FormFeedback>Invalid Server Code</FormFeedback>\r\n                      <FormText>Max length is 10</FormText> */}\r\n                      </FormGroup>\r\n                    </Col>\r\n                    <Col md={6}>\r\n                      <FormGroup>\r\n                        {/* <Label for=\"serverID\" visible={false}>Server ID</Label> */}\r\n                        <Input\r\n                          //onChange={event => checkValidation(event)}\r\n                          type=\"hidden\"\r\n                          name=\"serverID\"\r\n                          //id=\"serverCode\"\r\n                          placeholder=\"Server ID is required\"\r\n                          defaultValue={id}\r\n\r\n                        // valid={serverCodeValidation}\r\n                        // invalid={\r\n                        //   serverCodeValidation == null\r\n                        //     ? false\r\n                        //     : !serverCodeValidation\r\n                        // }\r\n                        />\r\n                        {/* <FormFeedback>Invalid Server Code</FormFeedback>\r\n                      <FormText>Max length is 10</FormText> */}\r\n                      </FormGroup>\r\n                    </Col>\r\n                  </Row>\r\n                  <Row form>\r\n                    <Col md={6}>\r\n                      <FormGroup>\r\n                        <Label for=\"serverCode\">Server Code</Label>\r\n                        <Input\r\n                          onChange={event => checkValidation(event)}\r\n                          type=\"text\"\r\n                          name=\"serverCode\"\r\n                          //id=\"serverCode\"\r\n                          placeholder=\"Server Code is required\"\r\n                          defaultValue={server_code}\r\n                          innerRef={serverCodeRef}\r\n                          valid={serverCodeValidation}\r\n                          invalid={\r\n                            serverCodeValidation == null\r\n                              ? false\r\n                              : !serverCodeValidation\r\n                          }\r\n                        />\r\n                        <FormFeedback>Invalid Server Code</FormFeedback>\r\n                        <FormText>Max length is 10</FormText>\r\n                      </FormGroup>\r\n                    </Col>\r\n                    <Col md={6}>\r\n                      <FormGroup>\r\n                        <div className=\"position-relative form-group\">\r\n                          <Label for=\"serverExpiredDate\">Expired Date</Label>\r\n                          <Input\r\n                            onChange={event => checkValidation(event)}\r\n                            type=\"datetime-local\"\r\n                            className=\"form-control fg-input\"\r\n                            id=\"serverExpiredDate\"\r\n                            name=\"serverExpiredDate\"\r\n                            innerRef={serverExpiredDateRef}\r\n                            valid={serverExpiredDateValidation}\r\n                            invalid={\r\n                              serverExpiredDateValidation == null\r\n                                ? false\r\n                                : !serverExpiredDateValidation\r\n                            }\r\n                            defaultValue={expired_date}\r\n                          // disabled\r\n                          />\r\n                          <FormFeedback>\r\n                            Server Expired Date must be after current day\r\n                          </FormFeedback>\r\n                          <FormText>Server Expired Date</FormText>\r\n                        </div>\r\n                      </FormGroup>\r\n                    </Col>\r\n                  </Row>\r\n                  <Row form>\r\n                    <Col md={6}>\r\n                      <FormGroup>\r\n                        <Label for=\"serverIpAddress\">IP Address</Label>\r\n                        <Input\r\n                          onChange={event => checkValidation(event)}\r\n                          type=\"text\"\r\n                          name=\"serverIpAddress\"\r\n                          id=\"serverIpAddress\"\r\n                          placeholder=\"IP Address\"\r\n                          defaultValue={ip_address ? ip_address : \"192.168.1.1\"}\r\n                          innerRef={serverIpAddressRef}\r\n                          valid={serverIpAddressValidation}\r\n                          invalid={\r\n                            serverIpAddressValidation == null\r\n                              ? false\r\n                              : !serverIpAddressValidation\r\n                          }\r\n                          required\r\n                        />\r\n                        <FormFeedback\r\n                        // valid={\r\n                        //   this.validateIPaddress(this.state)\r\n                        // }\r\n                        // tooltip\r\n                        >\r\n                          Invalid IP Address\r\n                        </FormFeedback>\r\n                        <FormText>Eq: 192.168.1.1</FormText>\r\n                      </FormGroup>\r\n                    </Col>\r\n\r\n                    <Col md={6}>\r\n                      <FormGroup>\r\n                        <div className=\"position-relative form-group\">\r\n                          <Label for=\"serverCreateDate\">Create Date</Label>\r\n                          <Input\r\n                            onChange={event => checkValidation(event)}\r\n                            type=\"datetime-local\"\r\n                            className=\"form-control fg-input\"\r\n                            id=\"serverCreateDate\"\r\n                            name=\"serverCreateDate\"\r\n                            innerRef={serverCreateDateRef}\r\n                            // valid={serverCreateDateValidation}\r\n                            // invalid={\r\n                            //   serverCreateDateValidation == null\r\n                            //     ? false\r\n                            //     : !serverCreateDateValidation\r\n                            // }\r\n                            defaultValue={create_time}\r\n                            disabled\r\n                          />\r\n                          <FormFeedback>\r\n                            Server Create Date must be after current day\r\n                          </FormFeedback>\r\n                          <FormText>Server Create Date</FormText>\r\n                        </div>\r\n                      </FormGroup>\r\n                    </Col>\r\n                  </Row>\r\n                  <Row form>\r\n                    <Col md={6}>\r\n                      <FormGroup>\r\n                        <Label for=\"serverName\">Server Name</Label>\r\n                        <Input\r\n                          onChange={event => checkValidation(event)}\r\n                          type=\"text\"\r\n                          name=\"serverName\"\r\n                          id=\"serverName\"\r\n                          placeholder=\"Server Name is required\"\r\n                          defaultValue={name}\r\n                          innerRef={serverNameRef}\r\n                          valid={serverNameValidation}\r\n                          invalid={\r\n                            serverNameValidation == null\r\n                              ? false\r\n                              : !serverNameValidation\r\n                          }\r\n                        />\r\n                        <FormFeedback>Invalid Server Name</FormFeedback>\r\n                        <FormText>Max length is 10</FormText>\r\n                      </FormGroup>\r\n                    </Col>\r\n\r\n                    <Col md={6}>\r\n                      <FormGroup>\r\n                        <div className=\"position-relative form-group\">\r\n                          <Label for=\"serverUpdateDate\">Update Date</Label>\r\n                          <Input\r\n                            onChange={event => checkValidation(event)}\r\n                            type=\"datetime-local\"\r\n                            className=\"form-control fg-input\"\r\n                            id=\"serverUpdateDate\"\r\n                            name=\"serverUpdateDate\"\r\n                            innerRef={serverUpdateDateRef}\r\n                            // valid={serverUpdateDateValidation}\r\n                            // invalid={\r\n                            //   serverUpdateDateValidation == null\r\n                            //     ? false\r\n                            //     : !serverUpdateDateValidation\r\n                            // }\r\n                            defaultValue={update_time}\r\n                            disabled\r\n                          />\r\n                          <FormFeedback>\r\n                            Server Update Date must be after current day\r\n                          </FormFeedback>\r\n                          <FormText>Server Update Date</FormText>\r\n                        </div>\r\n                      </FormGroup>\r\n                    </Col>\r\n                  </Row>\r\n\r\n                  <FormGroup>\r\n                    <Label for=\"serverMasterSelect\">Choose Server Master</Label>\r\n                    <Input\r\n                      type=\"select\"\r\n                      id=\"serverMasterSelect\"\r\n                      name=\"serverMasterSelect\"\r\n                      innerRef={serverMasterSellectRef}\r\n                      defaultValue={server_master}\r\n                    >\r\n                      <option value={0}>Choose Server Master</option>\r\n                      {serverMasterList\r\n                        ? serverMasterList.map(server => {\r\n                          return (\r\n                            <option key={uuidv1()} value={server.id}>\r\n                              {server.name}\r\n                            </option>\r\n                          );\r\n                        })\r\n                        : null}\r\n                    </Input>\r\n                    <FormText>Choose an exist server as server master</FormText>\r\n                  </FormGroup>\r\n\r\n                  <FormGroup>\r\n                    <Label for=\"serverTypeSelect\">Choose Type</Label>\r\n                    <Input\r\n                      type=\"select\"\r\n                      id=\"serverTypeSelect\"\r\n                      name=\"serverTypeSelect\"\r\n                      defaultValue={type}\r\n                      onChange={event => checkValidation(event)}\r\n                      innerRef={serverTypeSelectRef}\r\n                    >\r\n                      <option value=\"1\">Physical Web Server</option>\r\n                      <option value=\"2\">Cloud Web Server</option>\r\n                      <option value=\"3\">Repository Server</option>\r\n                      <option value=\"4\">Database Server</option>\r\n                    </Input>\r\n                  </FormGroup>\r\n\r\n                  <FormGroup>\r\n                    <Label for=\"serverOsSelect\">Choose Operation System</Label>\r\n                    <Input\r\n                      type=\"select\"\r\n                      id=\"serverOsSelect\"\r\n                      name=\"serverOsSelect\"\r\n                      defaultValue={os}\r\n                      onChange={event => checkValidation(event)}\r\n                      innerRef={serverOsSelectRef}\r\n                      valid={serverOsSelectValidation}\r\n                      invalid={\r\n                        serverOsSelectValidation == null\r\n                          ? false\r\n                          : !serverOsSelectValidation\r\n                      }\r\n                    >\r\n                      <option value=\"1\">Windows Os</option>\r\n                      <option value=\"2\">Linux Os</option>\r\n                      <option value=\"3\">Azure Git</option>\r\n                      <option value=\"4\">GitHub</option>\r\n                      <option value=\"5\">GitLab</option>\r\n                      <option value=\"6\">Other Git</option>\r\n                      <option value=\"7\">Microsoft SQL</option>\r\n                      <option value=\"8\">MongoDB</option>\r\n                      <option value=\"9\">FirebaseDB</option>\r\n                      <option value=\"10\">Other DB</option>\r\n                    </Input>\r\n                    <FormFeedback>\r\n                      Invalid Server Type, check guidance\r\n                    </FormFeedback>\r\n                    <FormText>\r\n                      Physical / Cloud Web Server can only be Windows or Linux\r\n                    </FormText>\r\n                    <FormText>\r\n                      Repository Server can only be Azure Git / GitHub / GitLab\r\n                      / Other Git\r\n                    </FormText>\r\n                    <FormText>\r\n                      Database Serverr can only be Microsoft SQL / MongoDB /\r\n                      FirebaseDB / Other DB\r\n                    </FormText>\r\n                  </FormGroup>\r\n\r\n                  <FormGroup>\r\n                    <Label for=\"serverUrl\">Server Url</Label>\r\n                    <Input\r\n                      onChange={event => checkValidation(event)}\r\n                      type=\"text\"\r\n                      name=\"serverUrl\"\r\n                      id=\"serverUrl\"\r\n                      placeholder=\"https://www.localhost:8084\"\r\n                      innerRef={serverUrlRef}\r\n                      valid={serverUrlValidation}\r\n                      invalid={\r\n                        serverUrlValidation == null\r\n                          ? false\r\n                          : !serverUrlValidation\r\n                      }\r\n                      defaultValue={server_url}\r\n                    />\r\n                    <FormFeedback>Invalid Server Url</FormFeedback>\r\n                    <FormText>Eq: www.google.com</FormText>\r\n                  </FormGroup>\r\n\r\n                  <FormGroup>\r\n                    <Label for=\"serverDescription\">Description</Label>\r\n                    <Col sm={12}>\r\n                      <Input\r\n                        onChange={event => checkValidation(event)}\r\n                        type=\"textarea\"\r\n                        name=\"serverDescription\"\r\n                        id=\"serverDescription\"\r\n                        innerRef={serverDescriptionRef}\r\n                        valid={serverDescriptionValidation}\r\n                        invalid={\r\n                          serverDescriptionValidation == null\r\n                            ? false\r\n                            : !serverDescriptionValidation\r\n                        }\r\n                        defaultValue={description}\r\n                      />\r\n                    </Col>\r\n                    <FormText>Max length is 256</FormText>\r\n                  </FormGroup>\r\n                  {/* <FormGroup check>\r\n                    <Input\r\n                      onChange={event => this.isChange(event)}\r\n                      type=\"checkbox\"\r\n                      name=\"isActiveCheck\"\r\n                      id=\"isActiveCheck\"\r\n                      innerRef={isActiveCheckRef}\r\n                      checked={active}\r\n                    />\r\n                    <Label for=\"isActiveCheck\" check>\r\n                      Active\r\n                    </Label>\r\n                  </FormGroup> */}\r\n\r\n                  <hr />\r\n                  <Button\r\n                    disabled={!generalInformationValidation()}\r\n                    color=\"primary\"\r\n                    onClick={e => updateServerInformation(e)}\r\n                  >\r\n                    Update Server Information\r\n                  </Button>\r\n                </Card>\r\n              </Form>\r\n            </TabPane>\r\n            <TabPane tabId=\"2\">\r\n              <Form>\r\n                <Card body>\r\n                  <Row form>\r\n                    <Col md={6}>\r\n                      <FormGroup>\r\n                        {/* <Label for=\"serverID\"  visible={0}>Server ID</Label> */}\r\n                        <Input\r\n                          //onChange={event => checkValidation(event)}\r\n                          type=\"hidden\"\r\n                          // name=\"serverID\"\r\n                          //id=\"serverCode\"\r\n                          // placeholder=\"Server ID is required\"\r\n                          defaultValue={id}\r\n\r\n                        // valid={serverCodeValidation}\r\n                        // invalid={\r\n                        //   serverCodeValidation == null\r\n                        //     ? false\r\n                        //     : !serverCodeValidation\r\n                        // }\r\n                        />\r\n                        {/* <FormFeedback>Invalid Server Code</FormFeedback>\r\n                      <FormText>Max length is 10</FormText> */}\r\n                      </FormGroup>\r\n                    </Col>\r\n                    <Col md={6}>\r\n                      <FormGroup>\r\n                        {/* <Label for=\"serverDetailID\" visible={false}>Server Detail ID</Label> */}\r\n                        <Input\r\n                          //onChange={event => checkValidation(event)}\r\n                          type=\"hidden\"\r\n                          // name=\"serverDetailID\"\r\n                          //id=\"serverCode\"\r\n                          // placeholder=\"Server Detail ID is required\"\r\n                          defaultValue={id}\r\n                        // innerRef={serverDetailIDRef}\r\n                        // valid={serverCodeValidation}\r\n                        // invalid={\r\n                        //   serverCodeValidation == null\r\n                        //     ? false\r\n                        //     : !serverCodeValidation\r\n                        // }\r\n                        />\r\n                        {/* <FormFeedback>Invalid Server Code</FormFeedback>\r\n                      <FormText>Max length is 10</FormText> */}\r\n                      </FormGroup>\r\n                    </Col>\r\n                  </Row>\r\n                  <Row form>\r\n                    <Col md={6}>\r\n                      <FormGroup>\r\n                        <Label for=\"firstDiskName\">First Disk Name</Label>\r\n                        <Input\r\n                          onChange={event => checkValidation(event)}\r\n                          type=\"text\"\r\n                          name=\"firstDiskName\"\r\n                          //id=\"serverCode\"\r\n                          placeholder=\"For instance: A, B, C\"\r\n                          defaultValue={server_detail ? server_detail.disk1 : null}\r\n                          innerRef={disk1Ref}\r\n                          valid={firstDiskName}\r\n                          invalid={\r\n                            firstDiskName == null\r\n                              ? false\r\n                              : !firstDiskName\r\n                          }\r\n                        />\r\n                        <FormFeedback>Invalid Disk Name</FormFeedback>\r\n                        <FormText>Max length is 10</FormText>\r\n                      </FormGroup>\r\n                    </Col>\r\n                    <Col md={4}>\r\n                      <FormGroup>\r\n                        <Label for=\"firstDiskVolume\">First Disk Volume</Label>\r\n                        <Input\r\n                          onChange={event => checkValidation(event)}\r\n                          type=\"number\"\r\n                          name=\"firstDiskVolume\"\r\n                          //id=\"serverCode\"\r\n                          placeholder=\"Number only\"\r\n                          defaultValue={server_detail ? server_detail.volume_disk1 : null}\r\n                          innerRef={volume_disk1Ref}\r\n                          valid={firstDiskVolume}\r\n                          invalid={\r\n                            firstDiskVolume == null\r\n                              ? false\r\n                              : !firstDiskVolume\r\n                          }\r\n                        />\r\n                        <FormFeedback>Invalid Disk Volume</FormFeedback>\r\n                        <FormText>Disk Volume, for instance: 10</FormText>\r\n                      </FormGroup>\r\n                    </Col>\r\n                    <Col md={2}>\r\n                      <FormGroup>\r\n                        <Label for=\"firstDiskVolumeUnitSelect\">Unit</Label>\r\n                        <Input\r\n                          type=\"select\"\r\n                          id=\"firstDiskVolumeUnitSelect\"\r\n                          name=\"firstDiskVolumeUnitSelect\"\r\n                          defaultValue={1}\r\n                          disabled\r\n                        //onChange={event => checkValidation(event)}\r\n                        // innerRef={disk1UnitRef}\r\n                        >\r\n                          <option value=\"1\">GB</option>\r\n                          {/* <option value=\"2\">TB</option> */}\r\n                        </Input>\r\n                      </FormGroup>\r\n                    </Col>\r\n                  </Row>\r\n                  <Row form>\r\n                    <Col md={6}>\r\n                      <FormGroup>\r\n                        <Label for=\"secondDiskName\">Second Disk Name</Label>\r\n                        <Input\r\n                          onChange={event => checkValidation(event)}\r\n                          type=\"text\"\r\n                          name=\"secondDiskName\"\r\n                          //id=\"serverCode\"\r\n                          placeholder=\"For instance: A, B, C\"\r\n                          defaultValue={server_detail ? server_detail.disk2 : null}\r\n                          innerRef={disk2Ref}\r\n                          valid={secondDiskName}\r\n                          invalid={\r\n                            secondDiskName == null\r\n                              ? false\r\n                              : !secondDiskName\r\n                          }\r\n                        />\r\n                        <FormFeedback>Invalid Disk Name</FormFeedback>\r\n                        <FormText>Max length is 10</FormText>\r\n                      </FormGroup>\r\n                    </Col>\r\n                    <Col md={4}>\r\n                      <FormGroup>\r\n                        <Label for=\"secondDiskVolume\">Second Disk Volume</Label>\r\n                        <Input\r\n                          onChange={event => checkValidation(event)}\r\n                          type=\"number\"\r\n                          name=\"secondDiskVolume\"\r\n                          //id=\"serverCode\"\r\n                          placeholder=\"Number only\"\r\n                          defaultValue={server_detail ? server_detail.volume_disk2 : null}\r\n                          innerRef={volume_disk2Ref}\r\n                          valid={secondDiskVolume}\r\n                          invalid={\r\n                            secondDiskVolume == null\r\n                              ? false\r\n                              : !secondDiskVolume\r\n                          }\r\n                        />\r\n                        <FormFeedback>Invalid Disk Volume</FormFeedback>\r\n                        <FormText>Disk Volume, for instance: 10</FormText>\r\n                      </FormGroup>\r\n                    </Col>\r\n                    <Col md={2}>\r\n                      <FormGroup>\r\n                        <Label for=\"secondDiskVolumeUnitSelect\">Unit</Label>\r\n                        <Input\r\n                          type=\"select\"\r\n                          id=\"secondDiskVolumeUnitSelect\"\r\n                          name=\"secondDiskVolumeUnitSelect\"\r\n                          defaultValue={1}\r\n                          disabled\r\n                        //onChange={event => checkValidation(event)}\r\n                        // innerRef={disk2UnitRef}\r\n                        >\r\n                          <option value=\"1\">GB</option>\r\n                          {/* <option value=\"2\">TB</option> */}\r\n                        </Input>\r\n                      </FormGroup>\r\n                    </Col>\r\n                  </Row>\r\n                  <Row form>\r\n                    <Col md={6}>\r\n                      <FormGroup>\r\n                        <Label for=\"thirdDiskName\">Third Disk Name</Label>\r\n                        <Input\r\n                          onChange={event => checkValidation(event)}\r\n                          type=\"text\"\r\n                          name=\"thirdDiskName\"\r\n                          //id=\"serverCode\"\r\n                          placeholder=\"For instance: A, B, C\"\r\n                          defaultValue={server_detail ? server_detail.disk3 : null}\r\n                          innerRef={disk3Ref}\r\n                          valid={thirdDiskName}\r\n                          invalid={\r\n                            thirdDiskName == null\r\n                              ? false\r\n                              : !thirdDiskName\r\n                          }\r\n                        />\r\n                        <FormFeedback>Invalid Disk Name</FormFeedback>\r\n                        <FormText>Max length is 10</FormText>\r\n                      </FormGroup>\r\n                    </Col>\r\n                    <Col md={4}>\r\n                      <FormGroup>\r\n                        <Label for=\"thirdDiskVolume\">Third Disk Volume</Label>\r\n                        <Input\r\n                          onChange={event => checkValidation(event)}\r\n                          type=\"number\"\r\n                          name=\"thirdDiskVolume\"\r\n                          //id=\"serverCode\"\r\n                          placeholder=\"Number only\"\r\n                          defaultValue={server_detail ? server_detail.volume_disk3 : null}\r\n                          innerRef={volume_disk3Ref}\r\n                          valid={thirdDiskVolume}\r\n                          invalid={\r\n                            thirdDiskVolume == null\r\n                              ? false\r\n                              : !thirdDiskVolume\r\n                          }\r\n                        />\r\n                        <FormFeedback>Invalid Disk Volume</FormFeedback>\r\n                        <FormText>Disk Volume, for instance: 10</FormText>\r\n                      </FormGroup>\r\n                    </Col>\r\n                    <Col md={2}>\r\n                      <FormGroup>\r\n                        <Label for=\"thirdDiskVolumeUnitSelect\">Unit</Label>\r\n                        <Input\r\n                          type=\"select\"\r\n                          id=\"thirdDiskVolumeUnitSelect\"\r\n                          name=\"thirdDiskVolumeUnitSelect\"\r\n                          defaultValue={1}\r\n                          disabled\r\n                        // onChange={event => checkValidation(event)}\r\n                        // innerRef={disk3UnitRef}\r\n                        >\r\n                          <option value=\"1\">GB</option>\r\n                          {/* {/* <option value=\"2\">TB</option> */} */}\r\n                        </Input>\r\n                      </FormGroup>\r\n                    </Col>\r\n                  </Row>\r\n\r\n                  <hr />\r\n                  <Button\r\n                    disabled={!detailValidation()}\r\n                    color=\"primary\"\r\n                    onClick={e => updateServerDetail(e)}\r\n                  >\r\n                    Update Server Detail\r\n                  </Button>\r\n                </Card>\r\n              </Form>\r\n            </TabPane>\r\n            <TabPane tabId=\"3\">\r\n              <Form>\r\n                <Card body>\r\n                  <Row form>\r\n                    <Col md={2}></Col>\r\n                    <Col md={8}>\r\n                      <Row form>\r\n                        <Col md={6}>\r\n                          <FormGroup>\r\n                            {/* <Label for=\"serverID\"  visible={0}>Server ID</Label> */}\r\n                            <Input\r\n                              //onChange={event => checkValidation(event)}\r\n                              type=\"hidden\"\r\n                              // name=\"serverID\"\r\n                              //id=\"serverCode\"\r\n                              placeholder=\"Server ID is required\"\r\n                              defaultValue={id}\r\n\r\n                            // valid={serverCodeValidation}\r\n                            // invalid={\r\n                            //   serverCodeValidation == null\r\n                            //     ? false\r\n                            //     : !serverCodeValidation\r\n                            // }\r\n                            />\r\n                            {/* <FormFeedback>Invalid Server Code</FormFeedback>\r\n                      <FormText>Max length is 10</FormText> */}\r\n                          </FormGroup>\r\n                        </Col>\r\n                        <Col md={6}>\r\n                          <FormGroup>\r\n                            {/* <Label for=\"server_account_id\" visible={false}>Server Account ID</Label> */}\r\n                            <Input\r\n                              //onChange={event => checkValidation(event)}\r\n                              type=\"hidden\"\r\n                              name=\"server_account_id\"\r\n                              //id=\"serverCode\"\r\n                              placeholder=\"Server Account ID is required\"\r\n                              defaultValue={server_account.id ? server_account.id : 0}\r\n\r\n                            // valid={serverCodeValidation}\r\n                            // invalid={\r\n                            //   serverCodeValidation == null\r\n                            //     ? false\r\n                            //     : !serverCodeValidation\r\n                            // }\r\n                            />\r\n                            {/* <FormFeedback>Invalid Server Code</FormFeedback>\r\n                      <FormText>Max length is 10</FormText> */}\r\n                          </FormGroup>\r\n                        </Col>\r\n                      </Row>\r\n\r\n                      <FormGroup>\r\n                        <Label for=\"serverAccount\">Account</Label>\r\n                        <Input\r\n                          onChange={event => checkValidation(event)}\r\n                          type=\"text\"\r\n                          name=\"serverAccount\"\r\n                          //id=\"serverCode\"\r\n                          placeholder=\"Authenticate Account\"\r\n                          defaultValue={server_account.username ? server_account.username : \"sa\"}\r\n                          innerRef={accountRef}\r\n                          valid={serverAccount}\r\n                          invalid={\r\n                            serverAccount == null\r\n                              ? false\r\n                              : !serverAccount\r\n                          }\r\n                        />\r\n                        <FormFeedback>Invalid Server Account</FormFeedback>\r\n                        <FormText>Max length is 20</FormText>\r\n                      </FormGroup>\r\n\r\n                      <FormGroup>\r\n                        <Label for=\"serverPassword\">Password</Label>\r\n                        <Row form>\r\n                          <Col md={9}>\r\n                            <Input\r\n                              onChange={event => checkValidation(event)}\r\n                              type={\r\n                                serverAccountPasswordShowUp\r\n                                  ? \"password\"\r\n                                  : \"text\"\r\n                              }\r\n                              name=\"serverPassword\"\r\n                              //id=\"serverCode\"\r\n                              placeholder=\"For instance: A, B, C\"\r\n                              defaultValue={server_account.password ? server_account.password : \"12345678\"}\r\n                              innerRef={passwordRef}\r\n                              valid={serverPassword}\r\n                              invalid={\r\n                                serverPassword == null\r\n                                  ? false\r\n                                  : !serverPassword\r\n                              }\r\n                            />\r\n                            <FormFeedback>Invalid Password</FormFeedback>\r\n                            <FormText>Max length is 20</FormText>\r\n                          </Col>\r\n                          <Col md={3}>\r\n                            <Button\r\n                              color=\"primary\"\r\n                              onClick={e =>\r\n                                setServerAccountPasswordShowUp(\r\n                                  role < 2 ?\r\n                                    !serverAccountPasswordShowUp : serverAccountPasswordShowUp\r\n                                )\r\n                              }\r\n                            >\r\n                              Show\r\n                            </Button>{\" \"}\r\n                          </Col>\r\n                        </Row>\r\n                      </FormGroup>\r\n                      <FormGroup>\r\n                        <Label for=\"serverConfirmPassword\">\r\n                          Confirm Password\r\n                        </Label>\r\n                        <Row form>\r\n                          <Col md={9}>\r\n                            <Input\r\n                              onChange={event => checkValidation(event)}\r\n                              type={\r\n                                serverAccountConfirmPasswordShowUp\r\n                                  ? \"password\"\r\n                                  : \"text\"\r\n                              }\r\n                              name=\"serverConfirmPassword\"\r\n                              //id=\"serverCode\"\r\n                              placeholder=\"For instance: A, B, C\"\r\n                              defaultValue={server_account.password ? server_account.password : \"12345678\"}\r\n                              innerRef={confirmPasswordRef}\r\n                              valid={serverConfirmPassword}\r\n                              invalid={\r\n                                serverConfirmPassword == null\r\n                                  ? false\r\n                                  : !serverConfirmPassword\r\n                              }\r\n                            />\r\n                            <FormFeedback>Password is not match</FormFeedback>\r\n                            <FormText>Max length is 20</FormText>\r\n                          </Col>\r\n                          <Col md={3}>\r\n                            <Button\r\n                              color=\"primary\"\r\n                              onClick={e =>\r\n                                setServerAccountConfirmPasswordShowUp(\r\n                                  role < 2 ?\r\n                                    !serverAccountConfirmPasswordShowUp :\r\n                                    serverAccountConfirmPasswordShowUp\r\n                                )\r\n                              }\r\n                            >\r\n                              Show\r\n                            </Button>\r\n                          </Col>\r\n                        </Row>\r\n                      </FormGroup>\r\n                      <hr />\r\n                      <Row form>\r\n                        <Button\r\n                          disabled={!generalInformationValidation()}\r\n                          color=\"primary\"\r\n                          className=\"btn-block\"\r\n                          onClick={e => updateServerAccount(e)}\r\n                        >\r\n                          Update Server Account\r\n                      </Button>\r\n                      </Row>\r\n                    </Col>\r\n                    <Col md={2}></Col>\r\n                  </Row>\r\n                </Card>\r\n              </Form>\r\n            </TabPane>\r\n          </TabContent>\r\n        </ModalBody>\r\n        <ModalFooter>\r\n          {\" \"}\r\n          <Button color=\"secondary\" onClick={toggleInformationModal}>\r\n            Cancel\r\n          </Button>\r\n        </ModalFooter>\r\n      </Modal>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst arePropsEqual = (prevProps, nextProps) => {\r\n  return prevProps === nextProps;\r\n};\r\n// Wrap component using `React.memo()` and pass `arePropsEqual`\r\nexport default memo(ServerInformationModal, arePropsEqual);\r\n","import React, {\r\n  Component\r\n} from \"react\";\r\n//  set up proptype\r\nimport PropTypes from \"prop-types\";\r\n//  reacttrap component\r\n// import {\r\n//   Button,\r\n//   Modal,\r\n//   ModalHeader,\r\n//   ModalBody,\r\n//   ModalFooter,\r\n//   Col,\r\n//   Row,\r\n//   Form,\r\n//   FormGroup,\r\n//   Label,\r\n//   Input,\r\n//   FormFeedback,\r\n//   FormText\r\n// } from \"reactstrap\";\r\n\r\n//  redux component\r\n//  set up redux\r\nimport {\r\n  connect\r\n} from \"react-redux\";\r\nimport {\r\n  withRouter\r\n} from \"react-router-dom\";\r\nimport Action from \"../../../redux/Action/index.js\";\r\n//  presentation component\r\nimport ServerInformationModal from \"./ServerInformationModal.jsx\";\r\n// const uuidv1 = require(\"uuid/v1\");\r\n//  compose function:\r\n//  - (...fns): array all function need to compose\r\n//  - x: collection / input value\r\n//  - reduceRight: array loop function, from right to left (last -> last - 1 -> last - 2 -> ...)\r\n//  =>  (y, f) => f(y), x === (previousValue, currentFunction) => currentFunction(previousValue), x\r\n//  =>  take last function in collectionFunction fns, use innitial value x, return value (y)\r\n//  =>  [a, b, c] => reduceRight((y, f) => f(y), x) === a(b(c))\r\nconst compose = (...fns) => x => fns.reduceRight((y, f) => f(y), x);\r\n\r\n//  Validation secction\r\n//  General information validation\r\n//  IP \r\nconst validateIPaddress = ({\r\n  serverIpAddress = \"192.168.1.1\"\r\n}) => {\r\n  if (\r\n    /^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/.test(\r\n      serverIpAddress\r\n    ) ||\r\n    serverIpAddress.length === 0\r\n  ) {\r\n    return true;\r\n  }\r\n  return false;\r\n};\r\n//  Server Code \r\nconst validateServerCode = ({\r\n  serverCode\r\n}) => {\r\n  return serverCode ? serverCode.length <= 10 && serverCode.length >= 0 : false;\r\n};\r\n//  Server Name \r\nconst validateServerName = ({\r\n  serverName\r\n}) => {\r\n  return serverName ? serverName.length <= 10 && serverName.length >= 0 : false;\r\n};\r\n//  Server Url \r\nconst validateServerUrl = ({\r\n  serverUrl = \"https://www.localhost:8084\"\r\n}) => {\r\n  let regex = new RegExp(\r\n    \"^(http[s]?:\\\\/\\\\/(www\\\\.)?|ftp:\\\\/\\\\/(www\\\\.)?|(www\\\\.)?){1}([0-9A-Za-z-\\\\.@:%_+~#=]+)+((\\\\.[a-zA-Z]{2,3})+)(/(.)*)?(\\\\?(.)*)?\"\r\n  );\r\n  return regex.test(serverUrl) || serverUrl.length === 0;\r\n};\r\n//   Server Description \r\nconst validateServerDescription = ({\r\n  serverDescription = \"\"\r\n}) => {\r\n  return serverDescription.length <= 256;\r\n};\r\n//  Server Expired Date \r\nconst validateExpiredDate = ({\r\n  serverExpiredDate = new Date(Date.now()).toISOString().slice(0, 23)\r\n}) => {\r\n  const currentDate = new Date(Date.now());\r\n  currentDate.setMinutes(currentDate.getMinutes() - 10);\r\n  return serverExpiredDate >= currentDate.toISOString().slice(0, 23);\r\n};\r\n//  Server Type \r\nconst validateServerTypeAndOS = ({\r\n  serverTypeSelect = 1,\r\n  serverOsSelect = 1\r\n}) => {\r\n  let type = typeof (serverTypeSelect) == \"string\" ? parseInt(serverTypeSelect) : serverTypeSelect;\r\n  let os = typeof (serverOsSelect) == \"string\" ? parseInt(serverOsSelect) : serverOsSelect;\r\n  console.log(\"type \", typeof (type) + type);\r\n  console.log(\"os \", typeof (os) + os);\r\n  if (\r\n    (type === 1 || type === 2) &&\r\n    os > 2\r\n  ) {\r\n    console.log(\"false 1\");\r\n    return false;\r\n  }\r\n  if (type === 3 && (os < 3 || os > 6)) {\r\n    console.log(\"false 2\");\r\n    return false;\r\n  }\r\n  if (type === 4 && (os < 7 || os > 10)) {\r\n    console.log(\"false 3\");\r\n    return false;\r\n  }\r\n  console.log(\"true\");\r\n  return true;\r\n};\r\n//  Server OS \r\n\r\n//  Detail Validation\r\n//  Disk\r\nconst validateDisk1 = ({\r\n  firstDiskName = \"\"\r\n}) => {\r\n  console.log(firstDiskName.length);\r\n  return firstDiskName.length >= 0 && firstDiskName.length < 51\r\n}\r\nconst validateDisk2 = ({\r\n  secondDiskName = \"\"\r\n}) => {\r\n  return secondDiskName.length >= 0 && secondDiskName.length < 51\r\n}\r\nconst validateDisk3 = ({\r\n  thirdDiskName = \"\"\r\n}) => {\r\n  return thirdDiskName.length >= 0 && thirdDiskName.length < 51\r\n}\r\n//  Volume\r\nconst validateDiskVolume1 = ({\r\n  firstDiskVolume = 0\r\n}) => {\r\n  try {\r\n    return parseInt(firstDiskVolume) >= 0;\r\n  } catch (error) {\r\n    return false\r\n  }\r\n}\r\nconst validateDiskVolume2 = ({\r\n  secondDiskVolume = 0\r\n}) => {\r\n  try {\r\n    return parseInt(secondDiskVolume) >= 0;\r\n  } catch (error) {\r\n    return false\r\n  }\r\n}\r\nconst validateDiskVolume3 = ({\r\n  thirdDiskVolume = 0\r\n}) => {\r\n  try {\r\n    return parseInt(thirdDiskVolume) >= 0;\r\n  } catch (error) {\r\n    return false\r\n  }\r\n}\r\n\r\n//  Server account validation\r\nconst validateAccount = ({serverAccount = \"\"}) => {\r\n  return serverAccount.length >= 0 && serverAccount.length <= 20\r\n}\r\nconst validatePassword = ({serverPassword = \"\"}) => {\r\n  return serverPassword.length >= 0 && serverPassword.length <= 20\r\n}\r\n\r\n\r\n//  propType\r\nconst propsProTypes = {\r\n  modal: PropTypes.bool,\r\n  serverMasterList: PropTypes.array,\r\n  server: PropTypes.object,\r\n  // toggleInformationModal: PropTypes.func\r\n\r\n  //  validation func\r\n  //validation: PropTypes.bool,\r\n  validateIPaddress: PropTypes.func,\r\n  validateServerCode: PropTypes.func,\r\n  validateServerName: PropTypes.func,\r\n  validateServerUrl: PropTypes.func,\r\n  validateServerDescription: PropTypes.func,\r\n  validateExpiredDate: PropTypes.func,\r\n  validateServerTypeAndOS: PropTypes.func,\r\n\r\n  validateDisk1: PropTypes.func,\r\n  validateDisk2: PropTypes.func,\r\n  validateDisk3: PropTypes.func,\r\n  validateDiskVolume1: PropTypes.func,\r\n  validateDiskVolume2: PropTypes.func,\r\n  validateDiskVolume3: PropTypes.func,\r\n\r\n  validateAccount: PropTypes.func,\r\n  validatePassword: PropTypes.func,\r\n\r\n};\r\n\r\nconst propsDefault = {\r\n  modal: false,\r\n  serverMasterList: [],\r\n  server: {\r\n    \"id\": 1,\r\n    \"active\": true,\r\n    \"create_time\": \"2020-03-06T13:25:23.36\",\r\n    \"description\": \"string\",\r\n    \"expired_date\": null,\r\n    \"ip_address\": \"192.168.1.1\",\r\n    \"name\": \"kachyctt\",\r\n    \"os\": 1,\r\n    \"server_code\": \"kachyctt\",\r\n    \"server_master\": null,\r\n    \"server_url\": \"google.com.vn\",\r\n    \"type\": 1,\r\n    \"update_time\": \"2020-03-06T00:00:00\",\r\n    \"server_detail\": {\r\n      \"id\": 1,\r\n      \"active\": true,\r\n      \"disk1\": \"a\",\r\n      \"disk2\": \"b\",\r\n      \"disk3\": \"c\",\r\n      \"server_id\": 1,\r\n      \"update_time\": \"2020-03-07T00:26:00.913\",\r\n      \"volume_disk1\": \"255\",\r\n      \"volume_disk2\": \"225\",\r\n      \"volume_disk3\": \"100\"\r\n    },\r\n    \"server_master_navigation\": null,\r\n    \"inverse_server_master_navigation\": [],\r\n    \"repo\": [],\r\n    \"server_account\": [{\r\n      \"id\": 1,\r\n      \"active\": true,\r\n      \"password\": \"kachyctt\",\r\n      \"server_id\": 1,\r\n      \"username\": \"kachyctt\"\r\n    }]\r\n  },\r\n  validateIPaddress: validateIPaddress,\r\n  validateServerCode: validateServerCode,\r\n  validateServerName: validateServerName,\r\n  validateServerUrl: validateServerUrl,\r\n  validateServerDescription: validateServerDescription,\r\n  validateExpiredDate: validateExpiredDate,\r\n  validateServerTypeAndOS: validateServerTypeAndOS,\r\n  //toggleInformationModal: () => {}\r\n\r\n  validateDisk1: validateDisk1,\r\n  validateDisk2: validateDisk2,\r\n  validateDisk3: validateDisk3,\r\n  validateDiskVolume1: validateDiskVolume1,\r\n  validateDiskVolume2: validateDiskVolume2,\r\n  validateDiskVolume3: validateDiskVolume3,\r\n\r\n  validateAccount: validateAccount,\r\n  validatePassword: validatePassword,\r\n\r\n};\r\n\r\nclass ServerInformationModalContainer extends Component {\r\n  static propTypes = propsProTypes;\r\n  static defaultProps = propsDefault;\r\n  // state = {\r\n  //   modal: false,\r\n  //   data: {}\r\n  // };\r\n\r\n  render() {\r\n    return ( <\r\n      ServerInformationModal fromProps = {\r\n        this.props\r\n      }\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n  return {\r\n    modal: state.Server.toggleInformationModal,\r\n    serverMasterList: state.Server.currentServerMasterList,\r\n    own: ownProps,\r\n    server: state.Server.currentDataList.find(\r\n      server => server.id === state.Server.currentSelectedServer\r\n    ),\r\n    role: state.Login.loginInfor.role\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch, ownProps) => ({\r\n  //  toogle information modal\r\n  toggleInformationModal: () => {\r\n    dispatch(Action.Server.toggleInformationModal);\r\n  },\r\n\r\n  //  update server general information\r\n  updateServerInformation:  async server => {\r\n    // event.preventDefault();\r\n    if (server.id) {\r\n      console.log(server);\r\n      await dispatch(Action.Server.updateServerGeneralInformation(server));\r\n      await dispatch(Action.Server.getData());\r\n    }\r\n  },\r\n\r\n  //  update server detail\r\n  updateServerDetail: async ({\r\n    // event,\r\n    server_detail_id = 0,\r\n    id = 0,\r\n    disk1 = \"\",\r\n    disk2 = \"\",\r\n    disk3 = \"\",\r\n    volume_disk1 = \"\",\r\n    volume_disk2 = \"\",\r\n    volume_disk3 = \"\"\r\n  }) => {\r\n    // event.preventDefault();\r\n    if (id) {\r\n      await dispatch(Action.Server.updateServerDetail(\r\n        server_detail_id,\r\n        id,\r\n        disk1,\r\n        disk2,\r\n        disk3,\r\n        volume_disk1,\r\n        volume_disk2,\r\n        volume_disk3\r\n      ));\r\n      await dispatch(Action.Server.getData());\r\n    }\r\n  },\r\n\r\n  //  update server account\r\n  updateServerAccount: async server_account=> {\r\n    // event.preventDefault();\r\n    if (server_account.server_id) {\r\n      await dispatch(Action.Server.updateServerAccount(\r\n        server_account\r\n      ));\r\n      await dispatch(Action.Server.getData());\r\n    }\r\n  },\r\n  dispatch\r\n});\r\n\r\n//  compose all redux HOC\r\nconst enhance = compose(\r\n  withRouter,\r\n  connect(mapStateToProps, mapDispatchToProps, null)\r\n);\r\n\r\nexport default enhance(ServerInformationModalContainer);","import React, { memo } from \"react\";\r\nimport {\r\n  DropdownMenu,\r\n  DropdownItem,\r\n  UncontrolledDropdown,\r\n  DropdownToggle,\r\n  Media,\r\n  Progress\r\n} from \"reactstrap\";\r\n\r\n//  import Action from \"./../../../redux/Action/index.js\";\r\n//  server information modal\r\n// import ServerDetailModal from \"./ServerDetailModal.js\";\r\nconst Employee = props => {\r\n  let {\r\n    data: {\r\n      id,\r\n      active,\r\n      email,\r\n      name,\r\n      phone,\r\n      role,\r\n    },\r\n    toggleInformationModal\r\n  } = props;\r\n\r\n  //console.log(props);\r\n  return (\r\n    <tr>\r\n      <th scope=\"row\">\r\n        <Media className=\"align-items-center\">\r\n          {/* <a\r\n            className=\"avatar rounded-circle mr-3\"\r\n            href=\"#pablo\"\r\n            onClick={e => e.preventDefault()}\r\n          >\r\n            <img alt=\"...\" src={require(\"assets/img/theme/bootstrap.jpg\")} />\r\n          </a> */}\r\n          <Media>\r\n            <span className=\"mb-0 text-sm\">\r\n              {name}\r\n            </span>\r\n          </Media>\r\n        </Media>\r\n      </th>\r\n\r\n      <td>\r\n\r\n        <i className=\"bg-warning\" />\r\n        {email}\r\n\r\n      </td>\r\n\r\n      <td>\r\n\r\n        <i className=\"bg-warning\" />\r\n        {phone}\r\n\r\n\r\n      </td>\r\n\r\n      <td>\r\n\r\n        <i className=\"bg-warning\" />\r\n        {role == \"1\" ? \"Adminstrator\" : role == \"2\" ? \"Manager\" : role == \"3\" ? \"Developer\" : role == \"4\" ? \"Tester\" : \"Guest\"}\r\n\r\n      </td>\r\n\r\n      <td>\r\n        <div className=\"d-flex align-items-center\">\r\n          <span className=\"mr-2\">{active ? `Active` : `Disabled`}</span>\r\n          <div>\r\n            <Progress max=\"100\" value={active ? `100` : `0`} barClassName={active ? \"bg-info\" : \"bg-danger\"} />\r\n          </div>\r\n        </div>\r\n      </td>\r\n\r\n      <td className=\"text-right\">\r\n        <UncontrolledDropdown>\r\n          <DropdownToggle\r\n            className=\"btn-icon-only text-light\"\r\n            href=\"#pablo\"\r\n            role=\"button\"\r\n            size=\"sm\"\r\n            color=\"\"\r\n            onClick={e => e.preventDefault()}\r\n            disabled={role == \"1\"}\r\n          >\r\n            <i className=\"fas fa-ellipsis-v\" />\r\n          </DropdownToggle>\r\n          <DropdownMenu className=\"dropdown-menu-arrow\" right>\r\n            <DropdownItem\r\n              href=\"#pablo\"\r\n              onClick={e => toggleInformationModal(e, id)}\r\n            >\r\n              Assign\r\n            </DropdownItem>\r\n           \r\n          </DropdownMenu>\r\n        </UncontrolledDropdown>\r\n      </td>\r\n    </tr>\r\n  );\r\n};\r\n\r\nconst arePropsEqual = (prevProps, nextProps) => {\r\n  return prevProps === nextProps;\r\n};\r\n// Wrap component using `React.memo()` and pass `arePropsEqual`\r\nexport default memo(Employee, arePropsEqual);\r\n","import React, {\r\n  Component\r\n} from \"react\";\r\n//  set up proptype\r\nimport PropTypes from \"prop-types\";\r\n//  redux component\r\n//  set up redux\r\nimport {\r\n  connect\r\n} from \"react-redux\";\r\nimport {\r\n  withRouter\r\n} from \"react-router-dom\";\r\nimport Action from \"../../../redux/Action/index.js\";\r\n\r\n//  presentation component\r\nimport Employee from \"./Employee.jsx\";\r\nconst uuidv1 = require(\"uuid/v1\");\r\n//  compose function:\r\n//  - (...fns): array all function need to compose\r\n//  - x: collection / input value\r\n//  - reduceRight: array loop function, from right to left (last -> last - 1 -> last - 2 -> ...)\r\n//  =>  (y, f) => f(y), x === (previousValue, currentFunction) => currentFunction(previousValue), x\r\n//  =>  take last function in collectionFunction fns, use innitial value x, return value (y)\r\n//  =>  [a, b, c] => reduceRight((y, f) => f(y), x) === a(b(c))\r\nconst compose = (...fns) => x => fns.reduceRight((y, f) => f(y), x);\r\n\r\n//  propType\r\nconst propsProTypes = {\r\n  index: PropTypes.number,\r\n  data: PropTypes.array\r\n};\r\n\r\nconst propsDefault = {\r\n  index: 1,\r\n  data: []\r\n};\r\n\r\nclass EmployeeContainer extends Component {\r\n  static propTypes = propsProTypes;\r\n  static defaultProps = propsDefault;\r\n  // state = {\r\n  //   tableData: []\r\n  // };\r\n\r\n  componentDidMount() {\r\n    //console.log(\"ServerContainer componentDidMount: \", this.props);\r\n    this.props.getData();\r\n  }\r\n\r\n\r\n  // componentDidUpdate(prevProps, prevState) {\r\n  //   console.log(\"EmployeeContainer componentDidUpdate \");\r\n  // }\r\n\r\n  // shouldComponentUpdate(nextProps) {\r\n  //   console.log(\"Server Container: \" + JSON.stringify(this.props))\r\n  //   if (this.props.data === null) {\r\n  //     return true;\r\n  //   }\r\n  //   if (this.props.data === nextProps.data) {\r\n  //     return false;\r\n  //   }\r\n  //   return true;\r\n  // }\r\n\r\n  render() {\r\n    //console.log(\"Server Container: \" + JSON.stringify(this.props));\r\n    let {\r\n      data = [], disabled, toggleInformationModal\r\n    } = this.props;\r\n    return ( \r\n      <>\r\n      {\r\n        data.map((value, key) => {\r\n          return ( <\r\n            Employee index = {\r\n              key\r\n            }\r\n            key = {\r\n              uuidv1()\r\n            }\r\n            data = {\r\n              value\r\n            }\r\n            disabled = {\r\n              disabled\r\n            }\r\n            toggleInformationModal = {\r\n              toggleInformationModal\r\n            }\r\n            />\r\n          );\r\n        })\r\n      } \r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n  return {\r\n    data: state.Employee.currentDataList,\r\n    own: ownProps\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch, ownProps) => ({\r\n  toggleInformationModal: (event, id) => {\r\n    event.preventDefault();\r\n    if (id) {\r\n      //console.log(id);\r\n      dispatch(Action.Employee.storeCurrentSelectedEmployee(id));\r\n      dispatch(Action.Employee.toggleInformationModal);\r\n    } else {\r\n      alert(\"Invalid ID \", id);\r\n    }\r\n  },\r\n  getData: async () => {\r\n    await dispatch(Action.Employee.getData());\r\n    await dispatch(Action.Application.getData());\r\n    await dispatch(Action.ApplicationInstance.getData());\r\n  },\r\n  disabled: (event, id) => {\r\n    event.preventDefault();\r\n    if (id) {\r\n      // console.log(ownProps);\r\n      //   let serverDetail = this.props.serverList.find(server => server.id == id);\r\n      //   if (serverDetail) {\r\n      // dispatch(Action.checkLogin(email, password));\r\n      alert(\"Disabled \\n\" + id);\r\n      //   }\r\n    }\r\n  },\r\n\r\n  dispatch\r\n});\r\n\r\n//  compose all redux HOC\r\nconst enhance = compose(\r\n  withRouter,\r\n  connect(mapStateToProps, mapDispatchToProps, null)\r\n);\r\n\r\nexport default enhance(EmployeeContainer);","//  reactstrap component\r\nimport {\r\n  Button,\r\n  Modal,\r\n  ModalHeader,\r\n  ModalBody,\r\n  ModalFooter,\r\n  Form,\r\n  FormGroup,\r\n  Label,\r\n  Input,\r\n  FormFeedback,\r\n  FormText\r\n} from \"reactstrap\";\r\n\r\n//  pure component: memo\r\nimport React, { memo, useState } from \"react\";\r\n\r\nconst uuidv1 = require(\"uuid/v1\");\r\n\r\nconst EmployeeRegistrationModal = ({ fromProps }) => {\r\n  let {\r\n    modal,\r\n    toggleCreateModal,\r\n\r\n    validateName,\r\n    validateEmail,\r\n  } = fromProps;\r\n\r\n  //  close button\r\n  const closeBtn = (\r\n    <button className=\"close\" onClick={toggleCreateModal}>\r\n      &times;\r\n    </button>\r\n  );\r\n\r\n  //  ref to each input\r\n  const nameRef = React.createRef();\r\n  const emailRef = React.createRef();\r\n\r\n  //  validation state\r\n  const [nameValidation, setNameValidation] = useState(\r\n    null\r\n  );\r\n  const [\r\n    emailValidation,\r\n    setEmailValidation\r\n  ] = useState(null);\r\n\r\n  //  validate value from each input and store value into state\r\n  const checkValidation = async event => {\r\n    const name = event.target.name;\r\n    const value =\r\n      event.target.type === \"checkbox\"\r\n        ? event.target.checked\r\n        : event.target.value;\r\n\r\n    switch (name) {\r\n      case \"name\":\r\n        setNameValidation(validateName({ [name]: value }));\r\n        break;\r\n\r\n      case \"email\":\r\n        setEmailValidation(validateEmail({ [name]: value }));\r\n        break;\r\n\r\n      default:\r\n        break;\r\n    }\r\n\r\n\r\n  };\r\n\r\n  //  check validation\r\n  const validation = () => {\r\n    return (\r\n      (nameValidation == null ? true : nameValidation) &&\r\n      (emailValidation == null\r\n        ? true\r\n        : emailValidation)\r\n    );\r\n  };\r\n\r\n  //  create new employee\r\n  const createNewEmployee = event => {\r\n    event.preventDefault();\r\n    const application = {\r\n      password: emailRef.current.value ? emailRef.current.value : \"google.com.vn\",\r\n      confirm_password: emailRef.current.value ? emailRef.current.value : \"google.com.vn\",\r\n      is_admin: true,\r\n      email: emailRef.current.value ? emailRef.current.value : \"google.com.vn\",\r\n      address: \"\",\r\n      name: nameRef.current.value ? nameRef.current.value : \"google.com.vn\",\r\n      phone: \"\",\r\n      manager_registration_token: \"string\",\r\n      role: 2\r\n    };\r\n    fromProps.createNewEmployee(application);\r\n  };\r\n  \r\n  return (\r\n    <div>\r\n      <Modal\r\n        isOpen={modal}\r\n        toggle={toggleCreateModal}\r\n        // modalTransition={{ timeout: 1000 }}\r\n        // backdropTransition={{ timeout: 1500 }}\r\n        className={`modal-dialog modal-lg modal-dialog-centered modal-dialog-scrollable`}\r\n      >\r\n        <ModalHeader toggle={toggleCreateModal} close={closeBtn}>\r\n          EMPLOYEE REGISTRATION\r\n        </ModalHeader>\r\n        <ModalBody>\r\n          <Form>\r\n            <FormGroup>\r\n              <Label for=\"name\">Name</Label>\r\n              <Input\r\n                onChange={event => checkValidation(event)}\r\n                type=\"text\"\r\n                name=\"name\"\r\n                id=\"name\"\r\n                placeholder=\"Employee Name\"\r\n                innerRef={nameRef}\r\n                valid={nameValidation}\r\n                invalid={\r\n                  nameValidation == null\r\n                    ? false\r\n                    : !nameValidation\r\n                }\r\n                required\r\n              />\r\n              <FormFeedback\r\n              >\r\n                Invalid Employee Name\r\n                  </FormFeedback>\r\n              <FormText>Name length: minimum 5 characters</FormText>\r\n            </FormGroup>\r\n            <FormGroup>\r\n              <div className=\"position-relative form-group\">\r\n                <Label for=\"email\">Email</Label>\r\n                <Input\r\n                  onChange={event => checkValidation(event)}\r\n                  type=\"text\"\r\n                  className=\"form-control fg-input\"\r\n                  id=\"email\"\r\n                  name=\"email\"\r\n                  innerRef={emailRef}\r\n                  valid={emailValidation}\r\n                  invalid={\r\n                    emailValidation == null\r\n                      ? false\r\n                      : !emailValidation\r\n                  }\r\n                  required\r\n\r\n                />\r\n                <FormFeedback>\r\n                  Please check email again\r\n                    </FormFeedback>\r\n                <FormText>Email will be used to login, please provide correct email</FormText>\r\n              </div>\r\n            </FormGroup>\r\n\r\n\r\n          </Form>\r\n        </ModalBody>\r\n        <ModalFooter>\r\n          <Button\r\n            disabled={!validation()}\r\n            color=\"primary\"\r\n            onClick={e => createNewEmployee(e)}\r\n          >\r\n            Create New Manager\r\n          </Button>{\" \"}\r\n          <Button color=\"secondary\" onClick={toggleCreateModal}>\r\n            Cancel\r\n          </Button>\r\n        </ModalFooter>\r\n      </Modal>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst arePropsEqual = (prevProps, nextProps) => {\r\n  return prevProps === nextProps;\r\n};\r\n// Wrap component using `React.memo()` and pass `arePropsEqual`\r\nexport default memo(EmployeeRegistrationModal, arePropsEqual);\r\n","import React, { Component } from \"react\";\r\n//  set up proptype\r\nimport PropTypes from \"prop-types\";\r\n//  reacttrap component\r\n// import {\r\n//   Button,\r\n//   Modal,\r\n//   ModalHeader,\r\n//   ModalBody,\r\n//   ModalFooter,\r\n//   Col,\r\n//   Row,\r\n//   Form,\r\n//   FormGroup,\r\n//   Label,\r\n//   Input,\r\n//   FormFeedback,\r\n//   FormText\r\n// } from \"reactstrap\";\r\n\r\n//  redux component\r\n//  set up redux\r\nimport { connect } from \"react-redux\";\r\nimport { withRouter } from \"react-router-dom\";\r\nimport Action from \"../../../redux/Action/index.js\";\r\n\r\n//  presentation component\r\nimport EmployeeRegistrationModal from \"./EmployeeRegistrationModal.jsx\";\r\n\r\n//const uuidv1 = require(\"uuid/v1\");\r\n\r\n//  compose function:\r\n//  - (...fns): array all function need to compose\r\n//  - x: collection / input value\r\n//  - reduceRight: array loop function, from right to left (last -> last - 1 -> last - 2 -> ...)\r\n//  =>  (y, f) => f(y), x === (previousValue, currentFunction) => currentFunction(previousValue), x\r\n//  =>  take last function in collectionFunction fns, use innitial value x, return value (y)\r\n//  =>  [a, b, c] => reduceRight((y, f) => f(y), x) === a(b(c))\r\nconst compose = (...fns) => x => fns.reduceRight((y, f) => f(y), x);\r\n\r\n//  Validation secction\r\n//  Employee Name validation\r\nconst validateName = ({ name }) => {\r\n  return name ? name.length <= 300 && name.length > 5 : false;\r\n};\r\n//  Email validation\r\nconst validateEmail = ({\r\n  email = \"https://www.google.com\"\r\n}) => {\r\n  let regex = new RegExp(\r\n    \"^(http[s]?:\\\\/\\\\/(www\\\\.)?|ftp:\\\\/\\\\/(www\\\\.)?|(www\\\\.)?){1}([0-9A-Za-z-\\\\.@:%_+~#=]+)+((\\\\.[a-zA-Z]{2,3})+)(/(.)*)?(\\\\?(.)*)?\"\r\n  );\r\n  return regex.test(email) || email.length === 0;\r\n};\r\n\r\n\r\n//  propType\r\nconst propsProTypes = {\r\n  //  modal toggle\r\n  modal: PropTypes.bool,\r\n  toggleCreateModal: PropTypes.func,\r\n\r\n  //  list server master\r\n  serverMasterList: PropTypes.array,\r\n\r\n  //  create new server func\r\n  createNewApplication: PropTypes.func,\r\n\r\n  //  validation func\r\n  validation: PropTypes.bool,\r\n  validateName: PropTypes.func,\r\n  validateEmail: PropTypes.func,\r\n};\r\n\r\nconst propsDefault = {\r\n  modal: false,\r\n  toggleCreateModal: () => {},\r\n  serverMasterList: [],\r\n  createNewApplication: () => {},\r\n\r\n  validateName: validateName,\r\n  validateEmail: validateEmail,\r\n};\r\n\r\nclass EmployeeRegistrationModalContainer extends Component {\r\n  static propTypes = propsProTypes;\r\n  static defaultProps = propsDefault;\r\n\r\n  render() {\r\n    return (\r\n      <EmployeeRegistrationModal\r\n        fromProps={\r\n          this.props\r\n        }\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n  return {\r\n    modal: state.Employee.toggleCreateModal,\r\n    serverMasterList: state.Server.currentServerMasterList,\r\n    own: ownProps\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch, ownProps) => ({\r\n  toggleCreateModal: () => {\r\n    dispatch(Action.Employee.toggleCreateModal);\r\n  },\r\n\r\n  createNewEmployee:async Employee => {\r\n    if (Employee) {\r\n      //     console.log(ownProps);\r\n      await dispatch(Action.Employee.createNewEmployee(Employee));\r\n      await dispatch(Action.Employee.getData());\r\n      dispatch(Action.Employee.toggleCreateModal);\r\n    }\r\n  },\r\n\r\n  dispatch\r\n});\r\n\r\n//  compose all redux HOC\r\nconst enhance = compose(\r\n  withRouter,\r\n  connect(mapStateToProps, mapDispatchToProps, null)\r\n);\r\n\r\nexport default enhance(EmployeeRegistrationModalContainer);\r\n","import React, { Component } from 'react';\r\n//reactstrap components\r\nimport {\r\n    Card,\r\n    CardHeader,\r\n    Table,\r\n    Container,\r\n    Row,\r\n    Button,\r\n    Input,\r\n    UncontrolledTooltip\r\n    // Button,\r\n    // Modal,\r\n    // ModalHeader,\r\n    // ModalBody,\r\n    // ModalFooter\r\n} from \"reactstrap\";\r\n\r\nconst uuidv1 = require(\"uuid/v1\");\r\n\r\nconst ProjectAssignment = props => {\r\n\r\n    let { header = [], fromProps: { data = [], assign, userId, type, userRole, userProject } } = props;\r\n    const assignEmployee = (e, id) => {\r\n        e.preventDefault();\r\n        let createModel = {\r\n            id: userId,\r\n            application_id: userRole === 2 ? id : 0,\r\n            Application_instance_id: userRole !== 2 ? id : 0\r\n        }\r\n        assign(createModel);\r\n    }\r\n    const checkJoinedProject = id => {\r\n        return userProject.length > 0 ?\r\n            userProject.find(project => {\r\n                console.log(\"checkJoinedProject \" + userRole + \" id \" + id + \" application_id \" + project.application_id + \" ins \" + project.application_instance_id);\r\n                return userRole === 2 ?\r\n                    project.application_id === id :\r\n                    project.application_instance_id === id\r\n            }) : false;\r\n    }\r\n    return (\r\n        <>\r\n            {/* Page Content */}\r\n            <Container className=\"mt--7\" fluid>\r\n                <Row>\r\n                    <div className=\"col\">\r\n                        <Card className=\"shadow\">\r\n                            <CardHeader className=\"bg-transparent\">\r\n                                <Row className=\"align-items-center\">\r\n                                    <div className=\"col\">\r\n                                        <h4 className=\"text-uppercase text-light ls-1 mb-1\">\r\n                                            PROJECT IN SYSTEM\r\n                    </h4>\r\n                                        <h2 className=\"text-dark mb-0\">\r\n                                            {/* <span className=\"d-none d-md-block\">{\"name\"}</span> */}\r\n                                            <span className=\"d-md-none\">S</span>\r\n                                        </h2>\r\n                                    </div>\r\n                                </Row>\r\n                            </CardHeader>\r\n                            <Table className=\"align-items-center table-flush\" responsive>\r\n                                <thead className=\"thead-light\">\r\n                                    <tr>\r\n                                        {header.map((header, key) => (\r\n                                            <th scope=\"col\" key={uuidv1()}>\r\n                                                {header}\r\n                                            </th>\r\n                                        ))}\r\n                                    </tr>\r\n                                </thead>\r\n                                <tbody>\r\n                                    {data[0] != null ? data.map((app, key) => (\r\n                                        // Hide intended application / application instance\r\n                                        app.id !== 22 ?\r\n                                            <>\r\n                                                <tr>\r\n                                                    <td scope=\"col\" key={uuidv1()}>\r\n                                                        {app.name}\r\n\r\n                                                    </td>\r\n\r\n                                                    <td scope=\"col\" key={uuidv1()}>\r\n                                                        {type}\r\n                                                    </td>\r\n                                                    <td scope=\"col\" key={uuidv1()}>\r\n                                                        {app.description}\r\n                                                    </td>\r\n\r\n\r\n                                                    <td className=\"text-right\">\r\n                                                        <Button\r\n                                                            color={checkJoinedProject(app.id) ? \"primary\" : \"danger\"}\r\n                                                            onClick={e => assignEmployee(e, app.id)}\r\n                                                        >\r\n                                                            {checkJoinedProject(app.id) ? \"Left\" : \"Join\"}\r\n                                                        </Button>\r\n                                                        {/* <UncontrolledDropdown>\r\n                                                        <DropdownToggle\r\n                                                            className=\"btn-icon-only text-light\"\r\n                                                            href=\"#pablo\"\r\n                                                            role=\"button\"\r\n                                                            size=\"sm\"\r\n                                                            color=\"\"\r\n                                                            onClick={e => e.preventDefault()}\r\n                                                        >\r\n                                                            <i className=\"fas fa-ellipsis-v\" />\r\n                                                        </DropdownToggle>\r\n                                                        <DropdownMenu className=\"dropdown-menu-arrow\" right>\r\n                                                            <DropdownItem\r\n                                                                href=\"#pablo\"\r\n                                                                onClick={e => assignEmployee(e, app.id)}\r\n                                                            >\r\n\r\n                                                                Assign\r\n            </DropdownItem>\r\n                                                        </DropdownMenu>\r\n                                                    </UncontrolledDropdown> */}\r\n                                                    </td>\r\n                                                </tr>\r\n                                            </> : null\r\n                                    )) : null\r\n                                    }\r\n                                </tbody>\r\n                            </Table>\r\n                        </Card>\r\n                    </div>\r\n                </Row>\r\n            </Container>\r\n        </>\r\n    );\r\n\r\n}\r\n\r\nexport default ProjectAssignment;","import React, {\r\n    Component\r\n} from \"react\";\r\n//  set up proptype\r\nimport PropTypes from \"prop-types\";\r\n//  redux component\r\n//  set up redux\r\nimport {\r\n    connect\r\n} from \"react-redux\";\r\nimport {\r\n    withRouter\r\n} from \"react-router-dom\";\r\nimport Action from \"./../../../redux/Action/index.js\";\r\n\r\n//  presentation component\r\nimport ProjectAssignment from \"./ProjectAssignment.jsx\";\r\nconst uuidv1 = require(\"uuid/v1\");\r\n//  compose function:\r\n//  - (...fns): array all function need to compose\r\n//  - x: collection / input value\r\n//  - reduceRight: array loop function, from right to left (last -> last - 1 -> last - 2 -> ...)\r\n//  =>  (y, f) => f(y), x === (previousValue, currentFunction) => currentFunction(previousValue), x\r\n//  =>  take last function in collectionFunction fns, use innitial value x, return value (y)\r\n//  =>  [a, b, c] => reduceRight((y, f) => f(y), x) === a(b(c))\r\nconst compose = (...fns) => x => fns.reduceRight((y, f) => f(y), x);\r\n\r\n//  propType\r\nconst propsProTypes = {\r\n    index: PropTypes.number,\r\n    data: PropTypes.array\r\n};\r\n\r\nconst propsDefault = {\r\n    index: 1,\r\n    data: []\r\n};\r\n\r\nclass ProjectAssignmentContainer extends Component {\r\n    static propTypes = propsProTypes;\r\n    static defaultProps = propsDefault;\r\n    componentDidMount = () => {\r\n        this.props.getData();\r\n    }\r\n    render() {\r\n        let header = [\"Project Name\", \"Type\", \"Description\", \"Action\"];\r\n        return ( <\r\n            ProjectAssignment header = {\r\n                header\r\n            }\r\n            fromProps = {\r\n                this.props\r\n            }\r\n            / >\r\n        );\r\n    }\r\n}\r\n\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n    return {\r\n        data: state.Employee.currentDataList.find(\r\n                Employee => Employee.id === state.Employee.currentSelectedEmployee\r\n            ).role === 2 ?\r\n            state.Application.currentDataList : state.ApplicationInstance.currentDataList,\r\n        own: ownProps,\r\n        userId: state.Employee.currentSelectedEmployee,\r\n        userRole: state.Employee.currentDataList.find(\r\n            Employee => Employee.id === state.Employee.currentSelectedEmployee\r\n        ).role,\r\n        userProject: state.Employee.currentDataList.find(\r\n            Employee => Employee.id === state.Employee.currentSelectedEmployee\r\n        ).manage_project,\r\n        type: state.Employee.currentDataList.find(\r\n            Employee => Employee.id === state.Employee.currentSelectedEmployee\r\n        ).role === 2 ? \"Application\" : \"Application Instance\"\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch, ownProps) => ({\r\n    assign: async manageProject => {\r\n        if (manageProject.id) {\r\n            await dispatch(Action.Employee.addEmployeeIntoProject(\r\n                manageProject\r\n            ));\r\n            await dispatch(Action.Employee.getData());\r\n            await dispatch(Action.Application.getData());\r\n            await dispatch(Action.ApplicationInstance.getData());\r\n        }\r\n    },\r\n\r\n    getData: async () => {\r\n        await dispatch(Action.Application.getData());\r\n        await dispatch(Action.ApplicationInstance.getData());\r\n    },\r\n\r\n    dispatch\r\n});\r\n\r\n//  compose all redux HOC\r\nconst enhance = compose(\r\n    withRouter,\r\n    connect(mapStateToProps, mapDispatchToProps, null)\r\n);\r\n\r\nexport default enhance(ProjectAssignmentContainer);","//  reactstrap component\r\nimport {\r\n  Button,\r\n  Modal,\r\n  ModalHeader,\r\n  ModalBody,\r\n  ModalFooter,\r\n  Col,\r\n  Row,\r\n  Form,\r\n  // FormGroup,\r\n  // Label,\r\n  // Input,\r\n  // FormFeedback,\r\n  // FormText,\r\n\r\n  // //  React tab\r\n  // TabContent,\r\n  // TabPane,\r\n  // Nav,\r\n  // NavItem,\r\n  // NavLink,\r\n  // Card,\r\n  // CardTitle,\r\n  // CardText\r\n  //Button\r\n} from \"reactstrap\";\r\n// import classnames from \"classnames\";\r\n//  pure component: memo\r\nimport React, { memo, useState } from \"react\";\r\n\r\n//  import table for repo\r\nimport ProjectAssignmentContainer from \"./ProjectAssignmentContainer.js\";\r\n// import { employeeReducer } from \"../../../redux/Reducer/employeeReducer.js\";\r\n\r\n// const uuidv1 = require(\"uuid/v1\");\r\n\r\nconst EmployeeInformationModal = ({ fromProps }) => {\r\n  let {\r\n    modal,\r\n    toggleInformationModal,\r\n    // applicationInstanceList = [],\r\n    // applicationList = [],\r\n\r\n    // validateName,\r\n    // validateStartDate,\r\n    // validateExpiredDate,\r\n    // validateSourceCodeUrl,\r\n    // validateRepoName,\r\n    // validateRepoUrl,\r\n\r\n\r\n    // role,\r\n    // employee,\r\n  } = fromProps;\r\n\r\n  // console.log(\" Detail Employee Modal Presentation\", fromProps);\r\n  //  close button\r\n  const closeBtn = (\r\n    <button className=\"close\" onClick={toggleInformationModal}>\r\n      &times;\r\n    </button>\r\n  );\r\n\r\n  // //  ref to general information\r\n  // const applicationSelectRef = React.createRef();\r\n  // const applicationInstanceSelectRef = React.createRef();\r\n\r\n  // //  Validation state\r\n  // const [applicationInstanceSelectValidation, setApplicationInstanceSelectValidation] = useState(null);\r\n  // const [applicationSelectValidation, setApplicationSelectValidation] = useState(null);\r\n\r\n\r\n  // //  validate value from each input and store value into state\r\n  // const checkValidation = async event => {\r\n  //   const name = event.target.name;\r\n  //   const value =\r\n  //     event.target.type === \"checkbox\"\r\n  //       ? event.target.checked\r\n  //       : event.target.value;\r\n\r\n  //   switch (name) {\r\n  //     case \"applicationName\":\r\n  //       setApplicationNameValidation(validateName({ [name]: value }));\r\n  //       break;\r\n\r\n  //     case \"startDate\":\r\n  //       setStartDateValidation(validateStartDate({ [name]: value }));\r\n  //       break;\r\n\r\n  //     case \"expiredDate\":\r\n  //       setExpiredDateValidation(validateExpiredDate({ [name]: value, \"startDate\": startDateRef.current.value }));\r\n  //       break;\r\n\r\n  //     case \"sourceCodeUrl\":\r\n  //       setSourceCodeUrlValidation(validateSourceCodeUrl({ [name]: value }));\r\n  //       break;\r\n\r\n  //     case \"repoName\":\r\n  //       setRepoNameValidation(validateRepoName({ [name]: value }));\r\n  //       break;\r\n\r\n  //     case \"repoUrl\":\r\n  //       setRepoUrlValidation(validateRepoUrl({ [name]: value }));\r\n  //       break;\r\n\r\n  //     case \"applicationInstanceSelect\":\r\n  //       setApplicationInstanceSelectValidation(validateRepoUrl(applicationInstanceSelectRef > 0));\r\n  //       break;\r\n\r\n  //     default:\r\n  //       break;\r\n  //   }\r\n  // };\r\n  //  check validationconst \r\n  // const repoValidation = () => {\r\n  //   return (\r\n  //     applicationInstanceSelectValidation == null ? false : applicationInstanceSelectValidation &&\r\n  //       applicationSelectValidation == null ? false : applicationSelectValidation\r\n  //   );\r\n  // }\r\n\r\n  // //  create assign employee into project\r\n  // // const addEmployeeIntoProject = event => {\r\n  // //   event.preventDefault();\r\n  // //   const project = {\r\n  // //     \"id\": employee.id,\r\n  // //     \"application_id\": applicationSelectRef.current.value,\r\n  // //     \"Application_instance_id\": 0\r\n  // //   }\r\n  // //   fromProps.assignEmployee(project);\r\n  // // }\r\n\r\n  // // const projectList = (list, role) => {\r\n  // //   return employee.manage_project.length > 0 ?\r\n  // //     list.map(eachApp => {\r\n  // //       employee.manage_project.map(manage_project => {\r\n  // //         return role === 2 ?\r\n  // //           eachApp.id !== 5 || eachApp.id !== manage_project.application_id\r\n  // //           : eachApp.id !== 6 || eachApp.id !== manage_project.application_instance_id\r\n  // //           ;\r\n\r\n  // //       })\r\n  // //     }) : null;\r\n  // // }\r\n\r\n\r\n\r\n  //  load application (for manager) / application instance (for developer / guest)\r\n  // const loadProject = (identifier, project, ref, list, validation) => {\r\n  //   return (\r\n  //     <FormGroup id={identifier}>\r\n  //       <div className=\"position-relative form-group\">\r\n  //         <Label for={identifier}>Choose {project}</Label>\r\n  //         <Input\r\n  //           type=\"select\"\r\n  //           id={identifier}\r\n  //           name={identifier}\r\n  //           onChange={event => checkValidation(event)}\r\n  //           innerRef={ref}\r\n  //           valid={validation}\r\n  //           invalid={\r\n  //             validation == null\r\n  //               ? false\r\n  //               : !validation\r\n  //           }\r\n\r\n  //         >\r\n  //           <option value={0}>Choose {project}</option>\r\n  //           {list && list.length\r\n  //             ? list.map(pj => {\r\n  //               return (\r\n  //                 <option key={uuidv1()} value={pj.id}>\r\n  //                   {pj.name}\r\n  //                 </option>\r\n  //               );\r\n  //             })\r\n  //             : null}\r\n\r\n  //         </Input>\r\n  //         <FormFeedback>\r\n  //           Please select an {project}\r\n  //         </FormFeedback>\r\n  //       </div>\r\n  //     </FormGroup>\r\n  //   );\r\n  // }\r\n\r\n  return (\r\n    <div>\r\n      <Modal\r\n        isOpen={modal}\r\n        toggle={toggleInformationModal}\r\n        // modalTransition={{ timeout: 1000 }}\r\n        // backdropTransition={{ timeout: 1500 }}\r\n        className={`modal-dialog modal-lg modal-dialog-centered modal-dialog-scrollable`}\r\n      >\r\n        <ModalHeader toggle={() => this.toggle()} close={closeBtn}>\r\n          ASSIGN EMPLOYEE INTO PROJECT\r\n        </ModalHeader>\r\n        <ModalBody>\r\n\r\n          <Form>\r\n            <Row form>\r\n              <Col md={6}>\r\n              </Col>\r\n              <Col md={6}>\r\n              </Col>\r\n            </Row>\r\n            {/* {\r\n              role === 1 && employee.role === 2 ?\r\n                loadProject(\r\n                  \"applicationSelect\",\r\n                  \"Application\",\r\n                  applicationSelectRef,\r\n                  applicationList,\r\n                  applicationSelectValidation\r\n                )\r\n                : loadProject(\r\n                  \"applicationInstanceSelect\",\r\n                  \"ApplicationInstance\",\r\n                  applicationInstanceSelectRef,\r\n                  applicationInstanceList,\r\n                  applicationInstanceSelectValidation\r\n                )\r\n            } */}\r\n\r\n            {/* <FormGroup id=\"applicationSelect\">\r\n              <div className=\"position-relative form-group\">\r\n                <Label for=\"applicationSelect\">Choose Application</Label>\r\n                <Input\r\n                  type=\"select\"\r\n                  id=\"applicationSelect\"\r\n                  name=\"applicationSelect\"\r\n                  onChange={event => checkValidation(event)}\r\n                  innerRef={applicationSelectRef}\r\n                  valid={applicationSelectValidation}\r\n                  invalid={\r\n                    applicationSelectValidation == null\r\n                      ? false\r\n                      : !applicationSelectValidation\r\n                  }\r\n                  disabled={role !== \"1\" || employee.role !== \"2\"}\r\n\r\n                >\r\n                  <option value={0}>Choose Application</option>\r\n                  {applicationList && applicationList.length\r\n                    ? applicationList.map(app => {\r\n                      return (\r\n                        <option key={uuidv1()} value={app.id}>\r\n                          {app.name}\r\n                        </option>\r\n                      );\r\n                    })\r\n                    : null}\r\n\r\n                </Input>\r\n                <FormFeedback>\r\n                  Please select an application\r\n                    </FormFeedback>\r\n              </div>\r\n            </FormGroup>\r\n            <FormGroup id=\"applicationInstanceSelect\">\r\n              <div className=\"position-relative form-group\">\r\n                <Label for=\"applicationInstanceSelect\">Choose Application Instance</Label>\r\n                <Input\r\n                  type=\"select\"\r\n                  id=\"applicationInstanceSelect\"\r\n                  name=\"applicationInstanceSelect\"\r\n                  onChange={event => checkValidation(event)}\r\n                  innerRef={applicationInstanceSelectRef}\r\n                  valid={applicationInstanceSelectValidation}\r\n                  invalid={\r\n                    applicationInstanceSelectValidation == null\r\n                      ? false\r\n                      : !applicationInstanceSelectValidation\r\n                  }\r\n                  disabled={role !== \"2\" || employee.role !== \"3\"}\r\n                >\r\n                  <option value={0}>Choose Application Instance</option>\r\n                  {applicationInstanceList && applicationInstanceList.length\r\n                    ? applicationInstanceList.map(appIns => {\r\n                      return (\r\n                        <option key={uuidv1()} value={appIns.id}>\r\n                          {appIns.name}\r\n                        </option>\r\n                      );\r\n                    })\r\n                    : null}\r\n                </Input>\r\n                <FormFeedback>\r\n                  Please select an application instance\r\n                    </FormFeedback>\r\n              </div>\r\n            </FormGroup> */}\r\n\r\n            {/* <hr />\r\n            <Button\r\n              disabled={!repoValidation()}\r\n              color=\"primary\"\r\n              onClick={e => addEmployeeIntoProject(e)}\r\n            >\r\n              Assign Employee Into Project\r\n                  </Button>\r\n\r\n            <hr /> */}\r\n            <div style={{ marginTop: '60px' }}>\r\n            <ProjectAssignmentContainer />\r\n            </div>\r\n\r\n            <hr />\r\n          </Form>\r\n        </ModalBody>\r\n        <ModalFooter>\r\n          {\" \"}\r\n          <Button color=\"secondary\" onClick={toggleInformationModal}>\r\n            Cancel\r\n          </Button>\r\n        </ModalFooter>\r\n      </Modal>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst arePropsEqual = (prevProps, nextProps) => {\r\n  return prevProps === nextProps;\r\n};\r\n// Wrap component using `React.memo()` and pass `arePropsEqual`\r\nexport default memo(EmployeeInformationModal, arePropsEqual);\r\n","import React, {\r\n  Component\r\n} from \"react\";\r\n//  set up proptype\r\nimport PropTypes from \"prop-types\";\r\n//  reacttrap component\r\n// import {\r\n//   Button,\r\n//   Modal,\r\n//   ModalHeader,\r\n//   ModalBody,\r\n//   ModalFooter,\r\n//   Col,\r\n//   Row,\r\n//   Form,\r\n//   FormGroup,\r\n//   Label,\r\n//   Input,\r\n//   FormFeedback,\r\n//   FormText\r\n// } from \"reactstrap\";\r\n\r\n//  redux component\r\n//  set up redux\r\nimport {\r\n  connect\r\n} from \"react-redux\";\r\nimport {\r\n  withRouter\r\n} from \"react-router-dom\";\r\nimport Action from \"../../../redux/Action/index.js\";\r\n//  presentation component\r\nimport EmployeeInformationModal from \"./EmployeeInformationModal.jsx\";\r\n// const uuidv1 = require(\"uuid/v1\");\r\n//  compose function:\r\n//  - (...fns): array all function need to compose\r\n//  - x: collection / input value\r\n//  - reduceRight: array loop function, from right to left (last -> last - 1 -> last - 2 -> ...)\r\n//  =>  (y, f) => f(y), x === (previousValue, currentFunction) => currentFunction(previousValue), x\r\n//  =>  take last function in collectionFunction fns, use innitial value x, return value (y)\r\n//  =>  [a, b, c] => reduceRight((y, f) => f(y), x) === a(b(c))\r\nconst compose = (...fns) => x => fns.reduceRight((y, f) => f(y), x);\r\n\r\n//  Validation section\r\n//  Employee Name validation\r\nconst validateName = ({\r\n  applicationName = \"\"\r\n}) => {\r\n  return applicationName ? applicationName.length <= 200 && applicationName.length > 4 : false;\r\n};\r\n//  Server start Date validation\r\nconst validateStartDate = ({\r\n  startDate = new Date(Date.now()).toISOString().slice(0, 23)\r\n}) => {\r\n  const currentDate = new Date(Date.now());\r\n  currentDate.setMinutes(currentDate.getMinutes() - 10);\r\n  return startDate >= currentDate.toISOString().slice(0, 23);\r\n};\r\n//  Server Expired Date \r\nconst validateExpiredDate = ({\r\n  endDate = new Date(Date.now()).toISOString().slice(0, 23),\r\n  startDate = new Date(Date.now()).toISOString().slice(0, 23)\r\n}) => {\r\n  return (\r\n    endDate.getYear() >= startDate.getYear() &&\r\n    endDate.getMonth() >= startDate.getMonth() &&\r\n    (endDate.getDate() - startDate.getDate()) >= 1\r\n  );\r\n};\r\n//  Application Source Code Url \r\nconst validateSourceCodeUrl = ({\r\n  sourceCodeUrl = \"https://www.google.com\"\r\n}) => {\r\n  let regex = new RegExp(\r\n    \"^(http[s]?:\\\\/\\\\/(www\\\\.)?|ftp:\\\\/\\\\/(www\\\\.)?|(www\\\\.)?){1}([0-9A-Za-z-\\\\.@:%_+~#=]+)+((\\\\.[a-zA-Z]{2,3})+)(/(.)*)?(\\\\?(.)*)?\"\r\n  );\r\n  return regex.test(sourceCodeUrl) || sourceCodeUrl.length === 0;\r\n};\r\n//  Repo Name\r\nconst validateRepoName = ({\r\n  repoName = \"\"\r\n}) => {\r\n  return repoName ? repoName.length > 5 && repoName.length <= 100 : false;\r\n}\r\n//  Repo Url\r\nconst validateRepoUrl = ({\r\n  repoUrl = \"https://www.google.com\"\r\n}) => {\r\n  let regex = new RegExp(\r\n    \"^(http[s]?:\\\\/\\\\/(www\\\\.)?|ftp:\\\\/\\\\/(www\\\\.)?|(www\\\\.)?){1}([0-9A-Za-z-\\\\.@:%_+~#=]+)+((\\\\.[a-zA-Z]{2,3})+)(/(.)*)?(\\\\?(.)*)?\"\r\n  );\r\n  return regex.test(repoUrl) || repoUrl.length === 0;\r\n};\r\n\r\n//  propType\r\nconst propsProTypes = {\r\n  //  modal toggle\r\n  modal: PropTypes.bool,\r\n  toggleCreateModal: PropTypes.func,\r\n\r\n  //  default value\r\n  application: PropTypes.object,\r\n\r\n  //  create new server func\r\n  createNewApplication: PropTypes.func,\r\n\r\n  //  validation func\r\n  validation: PropTypes.bool,\r\n  validateName: PropTypes.func,\r\n  validateStartDate: PropTypes.func,\r\n  validateExpiredDate: PropTypes.func,\r\n  validateSourceCodeUrl: PropTypes.func,\r\n  validateRepoName: PropTypes.func,\r\n  validateRepoUrl: PropTypes.func,\r\n\r\n};\r\n\r\nconst propsDefault = {\r\n  modal: false,\r\n  toggleCreateModal: () => {},\r\n  systemList: [],\r\n  createNewApplication: () => {},\r\n\r\n  application: {\r\n    \"id\": 1,\r\n    \"active\": true,\r\n    \"category\": 1,\r\n    \"create_time\": \"2020-03-11T00:00:00\",\r\n    \"description\": null,\r\n    \"efford\": null,\r\n    \"end_date\": null,\r\n    \"is_done\": true,\r\n    \"name\": \"Log API\",\r\n    \"note\": null,\r\n    \"origin\": \"I\",\r\n    \"priority\": 1,\r\n    \"source_code_url\": null,\r\n    \"stage\": null,\r\n    \"start_date\": \"2020-03-11T00:00:00\",\r\n    \"status\": 1,\r\n    \"systems_id\": 1,\r\n    \"team\": null,\r\n    \"technologies\": null,\r\n    \"type\": \"N\",\r\n    \"update_time\": \"2020-03-12T00:00:00\",\r\n    \"systems\": null,\r\n    \"application_instance\": [],\r\n    \"manage_project\": [],\r\n    \"repo\": []\r\n  },\r\n\r\n  validateName: validateName,\r\n  validateStartDate: validateStartDate,\r\n  validateExpiredDate: validateExpiredDate,\r\n  validateSourceCodeUrl: validateSourceCodeUrl,\r\n  validateRepoName: validateRepoName,\r\n  validateRepoUrl: validateRepoUrl,\r\n\r\n};\r\n\r\n\r\nclass EmployeeInformationModalContainer extends Component {\r\n  static propTypes = propsProTypes;\r\n  static defaultProps = propsDefault;\r\n\r\n  render() {\r\n    return ( <\r\n      EmployeeInformationModal fromProps = {\r\n        this.props\r\n      }\r\n      />\r\n\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n  return {\r\n    modal: state.Server.toggleInformationModal,\r\n    applicationList: state.Application.currentDataList,\r\n    applicationInstanceList: state.ApplicationInstance.currentDataList,\r\n    role: state.Login.loginInfor.role,\r\n    own: ownProps,\r\n    employee: state.Employee.currentDataList.find(\r\n      Employee => Employee.id === state.Employee.currentSelectedEmployee\r\n    )\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch, ownProps) => ({\r\n\r\n  toggleInformationModal: () => {\r\n    dispatch(Action.Employee.toggleInformationModal);\r\n  },\r\n\r\n  assignEmployee: async project => {\r\n    if(project.id) {\r\n      await dispatch(Action.Employee.createNewRepo(project));\r\n      await dispatch(Action.Employee.getData());\r\n    };\r\n  },\r\n\r\n  dispatch\r\n});\r\n\r\n//  compose all redux HOC\r\nconst enhance = compose(\r\n  withRouter,\r\n  connect(mapStateToProps, mapDispatchToProps, null)\r\n);\r\n\r\nexport default enhance(EmployeeInformationModalContainer);","import React, { memo } from \"react\";\r\nimport {\r\n  Badge,\r\n  DropdownMenu,\r\n  DropdownItem,\r\n  UncontrolledDropdown,\r\n  DropdownToggle,\r\n  Media,\r\n  Progress\r\n} from \"reactstrap\";\r\n\r\n//  import Action from \"./../../../redux/Action/index.js\";\r\n//  server information modal\r\n// import ServerDetailModal from \"./ServerDetailModal.js\";\r\nconst Application = props => {\r\n  let {\r\n    data: {\r\n      id,\r\n      active,\r\n      category,\r\n      // create_time,\r\n      // description,\r\n      // efford,\r\n      // end_date,\r\n      // is_done,\r\n      name,\r\n      // note,\r\n      // origin,\r\n      // priority,\r\n      // source_code_url,\r\n      // stage,\r\n      // start_date,\r\n      // status,\r\n      // systems_id,\r\n      // team,\r\n      // technologies,\r\n      // type,\r\n      update_time,\r\n      // systems,\r\n      application_instance,\r\n    },\r\n    disabled,\r\n    toggleInformationModal\r\n  } = props;\r\n\r\n  //console.log(props);\r\n\r\n  return (\r\n    <tr>\r\n      <th scope=\"row\">\r\n        <Media className=\"align-items-center\">\r\n          {/* <a\r\n            className=\"avatar rounded-circle mr-3\"\r\n            href=\"#pablo\"\r\n            onClick={e => e.preventDefault()}\r\n          >\r\n            <img alt=\"...\" src={require(\"assets/img/theme/bootstrap.jpg\")} />\r\n          </a> */}\r\n          <Media>\r\n            <span className=\"mb-0 text-sm\">\r\n              {update_time}\r\n            </span>\r\n          </Media>\r\n        </Media>\r\n      </th>\r\n      \r\n      <td>\r\n        <Badge color=\"\" className=\"badge-dot mr-4\">\r\n          <i className=\"bg-warning\" />\r\n          {name}\r\n        </Badge>\r\n      </td>\r\n\r\n      <td>\r\n        <Badge color=\"\" className=\"badge-dot mr-4\">\r\n          <i className=\"bg-warning\" />\r\n          {category}\r\n        </Badge>\r\n\r\n      </td>\r\n\r\n      <td>\r\n      <Badge color=\"\" className=\"badge-dot mr-4\">\r\n        <i className=\"bg-warning\" />\r\n        {application_instance.length\r\n          ? \"0 Instances\"\r\n          : application_instance.length + \" Instances\"}\r\n      </Badge>\r\n      </td>\r\n     \r\n      <td>\r\n        <div className=\"d-flex align-items-center\">\r\n          <span className=\"mr-2\">{active ? `Active` : `Disabled`}</span>\r\n          <div>\r\n            <Progress max=\"100\" value={active ? `100` : `0`}  barClassName={active ? \"bg-info\" : \"bg-danger\"} />\r\n          </div>\r\n        </div>\r\n      </td>\r\n      \r\n      <td className=\"text-right\">\r\n        <UncontrolledDropdown>\r\n          <DropdownToggle\r\n            className=\"btn-icon-only text-light\"\r\n            href=\"#pablo\"\r\n            role=\"button\"\r\n            size=\"sm\"\r\n            color=\"\"\r\n            onClick={e => e.preventDefault()}\r\n          >\r\n            <i className=\"fas fa-ellipsis-v\" />\r\n          </DropdownToggle>\r\n          <DropdownMenu className=\"dropdown-menu-arrow\" right>\r\n            <DropdownItem\r\n              href=\"#pablo\"\r\n              onClick={e => toggleInformationModal(e, id)}\r\n            >\r\n              Update\r\n            </DropdownItem>\r\n            {/* <ServerDetailModal /> */}\r\n            <DropdownItem href=\"#pablo\" onClick={e => disabled(e, id)}>\r\n              Disable\r\n            </DropdownItem>\r\n            <DropdownItem href=\"#pablo\" onClick={e => e.preventDefault()}>\r\n              Something else here\r\n            </DropdownItem>\r\n          </DropdownMenu>\r\n        </UncontrolledDropdown>\r\n      </td>\r\n    </tr>\r\n  );\r\n};\r\n\r\nconst arePropsEqual = (prevProps, nextProps) => {\r\n  return prevProps === nextProps;\r\n};\r\n// Wrap component using `React.memo()` and pass `arePropsEqual`\r\nexport default memo(Application, arePropsEqual);\r\n","import React, { Component } from \"react\";\r\n//  set up proptype\r\nimport PropTypes from \"prop-types\";\r\n//  redux component\r\n//  set up redux\r\nimport { connect } from \"react-redux\";\r\nimport { withRouter } from \"react-router-dom\";\r\nimport Action from \"../../../redux/Action/index.js\";\r\n\r\n//  presentation component\r\nimport Application from \"./Application.jsx\";\r\nconst uuidv1 = require(\"uuid/v1\");\r\n//  compose function:\r\n//  - (...fns): array all function need to compose\r\n//  - x: collection / input value\r\n//  - reduceRight: array loop function, from right to left (last -> last - 1 -> last - 2 -> ...)\r\n//  =>  (y, f) => f(y), x === (previousValue, currentFunction) => currentFunction(previousValue), x\r\n//  =>  take last function in collectionFunction fns, use innitial value x, return value (y)\r\n//  =>  [a, b, c] => reduceRight((y, f) => f(y), x) === a(b(c))\r\nconst compose = (...fns) => x => fns.reduceRight((y, f) => f(y), x);\r\n\r\n//  propType\r\nconst propsProTypes = {\r\n  index: PropTypes.number,\r\n  data: PropTypes.array\r\n};\r\n\r\nconst propsDefault = {\r\n  index: 1,\r\n  data: []\r\n};\r\n\r\nclass ApplicationContainer extends Component {\r\n  static propTypes = propsProTypes;\r\n  static defaultProps = propsDefault;\r\n  // state = {\r\n  //   tableData: []\r\n  // };\r\n\r\n  componentDidMount() {\r\n    //console.log(\"ServerContainer componentDidMount: \", this.props);\r\n    this.props.getData();\r\n  }\r\n\r\n\r\n  // componentDidUpdate(prevProps, prevState) {\r\n  //   console.log(\"ApplicationContainer componentDidUpdate \");\r\n  // }\r\n\r\n  // shouldComponentUpdate(nextProps) {\r\n  //   console.log(\"Server Container: \" + JSON.stringify(this.props))\r\n  //   if (this.props.data === null) {\r\n  //     return true;\r\n  //   }\r\n  //   if (this.props.data === nextProps.data) {\r\n  //     return false;\r\n  //   }\r\n  //   return true;\r\n  // }\r\n\r\n  render() {\r\n    //console.log(\"Server Container: \" + JSON.stringify(this.props));\r\n    let { data = [], disabled, toggleInformationModal } = this.props;\r\n    return (\r\n      <>\r\n        {data.map((value, key) => {\r\n          return (\r\n            <Application\r\n              index={key}\r\n              key={uuidv1()}\r\n              data={value}\r\n              disabled={disabled}\r\n              toggleInformationModal={toggleInformationModal}\r\n            />\r\n          );\r\n        })}\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n  return {\r\n    data: state.Application.currentDataList,\r\n    own: ownProps\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch, ownProps) => ({\r\n  toggleInformationModal: (event, id) => {\r\n    event.preventDefault();\r\n    if (id) {\r\n      //console.log(id);\r\n      dispatch(Action.Application.storeCurrentSelectedApplication(id));\r\n      dispatch(Action.Application.toggleInformationModal);\r\n    } else {\r\n      alert(\"Invalid ID \", id);\r\n    }\r\n  },\r\n  getData: async () => {\r\n    await dispatch(Action.Application.getData());\r\n    await dispatch(Action.System.getData());\r\n    await dispatch(Action.Server.getData());\r\n  },\r\n  disabled: (event, id) => {\r\n    event.preventDefault();\r\n    if (id) {\r\n      // console.log(ownProps);\r\n      //   let serverDetail = this.props.serverList.find(server => server.id == id);\r\n      //   if (serverDetail) {\r\n      // dispatch(Action.checkLogin(email, password));\r\n      alert(\"Disabled \\n\" + id);\r\n      //   }\r\n    }\r\n  },\r\n\r\n  dispatch\r\n});\r\n\r\n//  compose all redux HOC\r\nconst enhance = compose(\r\n  withRouter,\r\n  connect(mapStateToProps, mapDispatchToProps, null)\r\n);\r\n\r\nexport default enhance(ApplicationContainer);\r\n","//  reactstrap component\r\nimport {\r\n  Button,\r\n  Modal,\r\n  ModalHeader,\r\n  ModalBody,\r\n  ModalFooter,\r\n  Col,\r\n  Row,\r\n  Form,\r\n  FormGroup,\r\n  Label,\r\n  Input,\r\n  FormFeedback,\r\n  FormText\r\n} from \"reactstrap\";\r\n\r\n//  pure component: memo\r\nimport React, { memo, useState } from \"react\";\r\n\r\nconst uuidv1 = require(\"uuid/v1\");\r\n\r\nconst ApplicationRegistrationModal = ({ fromProps }) => {\r\n  let {\r\n    modal,\r\n    toggleCreateModal,\r\n    serverMasterList,\r\n    createNewApplication,\r\n\r\n    validateName,\r\n    validateStartDate,\r\n  } = fromProps;\r\n\r\n  //  close button\r\n  const closeBtn = (\r\n    <button className=\"close\" onClick={toggleCreateModal}>\r\n      &times;\r\n    </button>\r\n  );\r\n\r\n  //  ref to each input\r\n  const categorySelectRef = React.createRef();\r\n  const applicationNameRef = React.createRef();\r\n  const prioritySelectRef = React.createRef();\r\n  const startDateRef = React.createRef();\r\n  const originSelectRef = React.createRef();\r\n  const typeSelectRef = React.createRef();\r\n  const statusSelectRef = React.createRef();\r\n\r\n  //  validation state\r\n  const [applicationNameValidation, setApplicationNameValidation] = useState(\r\n    null\r\n  );\r\n  const [\r\n    startDateValidation,\r\n    setStartDateValidation\r\n  ] = useState(null);\r\n\r\n  //  validate value from each input and store value into state\r\n  const checkValidation = async event => {\r\n    const name = event.target.name;\r\n    const value =\r\n      event.target.type === \"checkbox\"\r\n        ? event.target.checked\r\n        : event.target.value;\r\n\r\n    switch (name) {\r\n      case \"applicationName\":\r\n        setApplicationNameValidation(validateName({ [name]: value }));\r\n        break;\r\n\r\n      case \"startDate\":\r\n        setStartDateValidation(validateStartDate({ [name]: value }));\r\n        break;\r\n\r\n      default:\r\n        break;\r\n    }\r\n\r\n\r\n  };\r\n\r\n  //  check validation\r\n  const validation = () => {\r\n    return (\r\n      (applicationNameValidation == null ? true : applicationNameValidation) &&\r\n      (startDateValidation == null\r\n        ? true\r\n        : startDateValidation)\r\n    );\r\n  };\r\n\r\n  //  create new server\r\n  const createAplication = event => {\r\n    event.preventDefault();\r\n    const application = {\r\n      name: applicationNameRef.current.value,\r\n      start_date: startDateRef.current.value,\r\n      category: categorySelectRef.current.value,\r\n      origin: originSelectRef.current.value,\r\n      type: typeSelectRef.current.value,\r\n      priority: prioritySelectRef.current.value,\r\n      status: statusSelectRef.current.value,\r\n    };\r\n    createNewApplication(application);\r\n  };\r\n\r\n  //alert(\"New Application \")\r\n  return (\r\n    <div>\r\n      <Modal\r\n        isOpen={modal}\r\n        toggle={toggleCreateModal}\r\n        // modalTransition={{ timeout: 1000 }}\r\n        // backdropTransition={{ timeout: 1500 }}\r\n        className={`modal-dialog modal-lg modal-dialog-centered modal-dialog-scrollable`}\r\n      >\r\n        <ModalHeader toggle={toggleCreateModal} close={closeBtn}>\r\n          APPLICATION REGISTRATION\r\n        </ModalHeader>\r\n        <ModalBody>\r\n          <Form>\r\n            <Row form>\r\n              <Col md={6}>\r\n                <FormGroup>\r\n                  <Label for=\"applicationName\">Application Name</Label>\r\n                  <Input\r\n                    onChange={event => checkValidation(event)}\r\n                    type=\"text\"\r\n                    name=\"applicationName\"\r\n                    id=\"applicationName\"\r\n                    placeholder=\"Application Name\"\r\n                    innerRef={applicationNameRef}\r\n                    valid={applicationNameValidation}\r\n                    invalid={\r\n                      applicationNameValidation == null\r\n                        ? false\r\n                        : !applicationNameValidation\r\n                    }\r\n                    required\r\n                  />\r\n                  <FormFeedback\r\n                  // valid={\r\n                  //   this.validateIPaddress(this.state)\r\n                  // }\r\n                  // tooltip\r\n                  >\r\n                    Invalid Application Name\r\n                  </FormFeedback>\r\n                  <FormText>Name is required</FormText>\r\n                </FormGroup>\r\n              </Col>\r\n\r\n              <Col md={6}>\r\n                <FormGroup>\r\n                  <div className=\"position-relative form-group\">\r\n                    <Label for=\"startDate\">Start Date</Label>\r\n                    <Input\r\n                      onChange={event => checkValidation(event)}\r\n                      type=\"datetime-local\"\r\n                      className=\"form-control fg-input\"\r\n                      id=\"startDate\"\r\n                      name=\"startDate\"\r\n                      innerRef={startDateRef}\r\n                      valid={startDateValidation}\r\n                      invalid={\r\n                        startDateValidation == null\r\n                          ? false\r\n                          : !startDateValidation\r\n                      }\r\n                      defaultValue={new Date(Date.now())\r\n                        .toISOString()\r\n                        .slice(0, 23)}\r\n                    />\r\n                    <FormFeedback>\r\n                      Server Expired Date must be after current day\r\n                    </FormFeedback>\r\n                    <FormText>Application Start Date</FormText>\r\n                  </div>\r\n                </FormGroup>\r\n              </Col>\r\n            </Row>\r\n\r\n            <div style={{ border: '0.05px solid', padding: '10px', borderRadius: '15px' }}>\r\n              <div style={{ textAlign: 'center' }}><Label></Label>      </div>\r\n\r\n              <FormGroup id=\"categorySelect\">\r\n                <Label for=\"categorySelect\">Choose Category</Label>\r\n                <Input\r\n                  type=\"select\"\r\n                  id=\"categorySelect\"\r\n                  name=\"categorySelect\"\r\n                  innerRef={categorySelectRef}\r\n                >\r\n                  <option value={1}>Web MVC Application</option>\r\n                  {/* <option value={2}>Mobile Application</option> */}\r\n                  <option value={3}>POS Application</option>\r\n                  {/* <option value={4}>Database Application</option> */}\r\n                  <option value={5}>Web API Application</option>\r\n\r\n                </Input>\r\n                {/* <FormText>Choose an exist server as server master</FormText> */}\r\n              </FormGroup>\r\n\r\n              <FormGroup id=\"typeSelect\">\r\n                <Label for=\"typeSelect\">Choose Type</Label>\r\n                <Input\r\n                  type=\"select\"\r\n                  id=\"typeSelect\"\r\n                  name=\"typeSelect\"\r\n                  defaultValue={1}\r\n                  onChange={event => checkValidation(event)}\r\n                  innerRef={typeSelectRef}\r\n                >\r\n                  <option value=\"N\">Application was developed from scratch</option>\r\n                  <option value=\"C\">Application was based on existing solution and was tailored for the customer</option>\r\n                  <option value=\"E\">Major enhancement, i.e., strongly simplified version was available (e.g. a prototype)</option>\r\n                </Input>\r\n              </FormGroup>\r\n\r\n              <FormGroup id=\"originSelect\">\r\n                <Label for=\"originSelect\">Choose Origin</Label>\r\n                <Input\r\n                  type=\"select\"\r\n                  id=\"originSelect\"\r\n                  name=\"originSelect\"\r\n                  defaultValue={2}\r\n                  onChange={event => checkValidation(event)}\r\n                  innerRef={originSelectRef}\r\n                >\r\n                  <option value=\"I\">Project developed by a software development company</option>\r\n                  <option value=\"U\">Projects developed by university staff and students for the internal usage at the university</option>\r\n                  <option value=\"S2B\">Project developed by students for external organizations</option>\r\n                </Input>\r\n              </FormGroup>\r\n              {/* </div>\r\n\r\n            <div style={{border: '0.05px solid', padding: '10px', borderRadius: '15px'}}>\r\n              <Label for=\"informationSection\">Information</Label> */}\r\n\r\n              <FormGroup id=\"prioritySelect\">\r\n                <Label for=\"prioritySelect\">Choose Priority</Label>\r\n                <Input\r\n                  type=\"select\"\r\n                  id=\"prioritySelect\"\r\n                  name=\"prioritySelect\"\r\n                  innerRef={prioritySelectRef}\r\n                >\r\n                  <option value={1}>No Priority</option>\r\n                  <option value={2}>Low Priority</option>\r\n                  <option value={3}>Medium Priority</option>\r\n                  <option value={4}>High Priority</option>\r\n\r\n                </Input>\r\n                {/* <FormText>Choose an exist server as server master</FormText> */}\r\n              </FormGroup>\r\n\r\n              <FormGroup id=\"statusSelect\">\r\n                <Label for=\"statusSelect\">Choose Status</Label>\r\n                <Input\r\n                  type=\"select\"\r\n                  id=\"statusSelect\"\r\n                  name=\"statusSelect\"\r\n                  innerRef={statusSelectRef}\r\n                >\r\n                  <option value={1}>To do</option>\r\n                  <option value={2}>Doing</option>\r\n                  <option value={3}>Done</option>\r\n                  <option value={4}>Pending</option>\r\n                  <option value={5}>Cancel</option>\r\n\r\n                </Input>\r\n                <FormText>Choose an exist server as server master</FormText>\r\n              </FormGroup>\r\n            </div>\r\n\r\n          </Form>\r\n        </ModalBody>\r\n        <ModalFooter>\r\n          <Button\r\n            disabled={!validation()}\r\n            color=\"primary\"\r\n            onClick={e => createAplication(e)}\r\n          >\r\n            Create New Application\r\n          </Button>{\" \"}\r\n          <Button color=\"secondary\" onClick={toggleCreateModal}>\r\n            Cancel\r\n          </Button>\r\n        </ModalFooter>\r\n      </Modal>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst arePropsEqual = (prevProps, nextProps) => {\r\n  return prevProps === nextProps;\r\n};\r\n// Wrap component using `React.memo()` and pass `arePropsEqual`\r\nexport default memo(ApplicationRegistrationModal, arePropsEqual);\r\n","import React, { Component } from \"react\";\r\n//  set up proptype\r\nimport PropTypes from \"prop-types\";\r\n//  reacttrap component\r\n// import {\r\n//   Button,\r\n//   Modal,\r\n//   ModalHeader,\r\n//   ModalBody,\r\n//   ModalFooter,\r\n//   Col,\r\n//   Row,\r\n//   Form,\r\n//   FormGroup,\r\n//   Label,\r\n//   Input,\r\n//   FormFeedback,\r\n//   FormText\r\n// } from \"reactstrap\";\r\n\r\n//  redux component\r\n//  set up redux\r\nimport { connect } from \"react-redux\";\r\nimport { withRouter } from \"react-router-dom\";\r\nimport Action from \"../../../redux/Action/index.js\";\r\n\r\n//  presentation component\r\nimport ApplicationRegistrationModal from \"./ApplicationRegistrationModal.jsx\";\r\n\r\n//const uuidv1 = require(\"uuid/v1\");\r\n\r\n//  compose function:\r\n//  - (...fns): array all function need to compose\r\n//  - x: collection / input value\r\n//  - reduceRight: array loop function, from right to left (last -> last - 1 -> last - 2 -> ...)\r\n//  =>  (y, f) => f(y), x === (previousValue, currentFunction) => currentFunction(previousValue), x\r\n//  =>  take last function in collectionFunction fns, use innitial value x, return value (y)\r\n//  =>  [a, b, c] => reduceRight((y, f) => f(y), x) === a(b(c))\r\nconst compose = (...fns) => x => fns.reduceRight((y, f) => f(y), x);\r\n\r\n//  Validation secction\r\n//  Application Name validation\r\nconst validateName = ({ applicationName }) => {\r\n  console.log(applicationName);\r\n  console.log(applicationName.length);\r\n  return applicationName ? applicationName.length <= 300 && applicationName.length > 0 : false;\r\n};\r\n//  Server start Date validation\r\nconst validateStartDate = ({\r\n  startDate = new Date(Date.now()).toISOString().slice(0, 23)\r\n}) => {\r\n  const currentDate = new Date(Date.now());\r\n  currentDate.setMinutes(currentDate.getMinutes() - 10);\r\n  return startDate >= currentDate.toISOString().slice(0, 23);\r\n};\r\n\r\n\r\n//  propType\r\nconst propsProTypes = {\r\n  //  modal toggle\r\n  modal: PropTypes.bool,\r\n  toggleCreateModal: PropTypes.func,\r\n\r\n  //  list server master\r\n  serverMasterList: PropTypes.array,\r\n\r\n  //  create new server func\r\n  createNewApplication: PropTypes.func,\r\n\r\n  //  validation func\r\n  validation: PropTypes.bool,\r\n  validateName: PropTypes.func,\r\n  validateStartDate: PropTypes.func,\r\n};\r\n\r\nconst propsDefault = {\r\n  modal: false,\r\n  toggleCreateModal: () => {},\r\n  serverMasterList: [],\r\n  createNewApplication: () => {},\r\n\r\n  validateName: validateName,\r\n  validateStartDate: validateStartDate,\r\n};\r\n\r\nclass ApplicationRegistrationModalContainer extends Component {\r\n  static propTypes = propsProTypes;\r\n  static defaultProps = propsDefault;\r\n\r\n  render() {\r\n    return (\r\n      <ApplicationRegistrationModal\r\n        fromProps={\r\n          this.props\r\n        }\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n  return {\r\n    modal: state.Application.toggleCreateModal,\r\n    serverMasterList: state.Server.currentServerMasterList,\r\n    own: ownProps\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch, ownProps) => ({\r\n  toggleCreateModal: () => {\r\n    dispatch(Action.Application.toggleCreateModal);\r\n  },\r\n\r\n  createNewApplication:async application => {\r\n    if (application) {\r\n      //     console.log(ownProps);\r\n      await dispatch(Action.Application.createNewApplication(application));\r\n      await dispatch(Action.Application.getData());\r\n      dispatch(Action.Application.toggleCreateModal);\r\n    }\r\n  },\r\n\r\n  dispatch\r\n});\r\n\r\n//  compose all redux HOC\r\nconst enhance = compose(\r\n  withRouter,\r\n  connect(mapStateToProps, mapDispatchToProps, null)\r\n);\r\n\r\nexport default enhance(ApplicationRegistrationModalContainer);\r\n","import React, { Component } from 'react';\r\n//reactstrap components\r\nimport {\r\n    Card,\r\n    CardHeader,\r\n    DropdownMenu,\r\n    DropdownItem,\r\n    UncontrolledDropdown,\r\n    DropdownToggle,\r\n    Media,\r\n    Nav,\r\n    NavLink,\r\n    NavItem,\r\n    Progress,\r\n    Table,\r\n    Container,\r\n    Row,\r\n    UncontrolledTooltip\r\n    // Button,\r\n    // Modal,\r\n    // ModalHeader,\r\n    // ModalBody,\r\n    // ModalFooter\r\n} from \"reactstrap\";\r\n\r\nconst uuidv1 = require(\"uuid/v1\");\r\n\r\nclass Repo extends Component {\r\n\r\n    render() {\r\n        let { header = [],  repoList = [] } = this.props;\r\n        console.log(\"Repo List: \" + JSON.stringify(repoList));\r\n        console.log(\"Repo List: \" + JSON.stringify(this.props));\r\n        return (\r\n            <>\r\n                {/* Page Content */}\r\n                <Container className=\"mt--7\" fluid>\r\n                    <Row>\r\n                        <div className=\"col\">\r\n                            <Card className=\"shadow\">\r\n                                <CardHeader className=\"bg-transparent\">\r\n                                    <Row className=\"align-items-center\">\r\n                                        <div className=\"col\">\r\n                                            <h4 className=\"text-uppercase text-light ls-1 mb-1\">\r\n                                                REPO LIST\r\n                    </h4>\r\n                                            <h2 className=\"text-dark mb-0\">\r\n                                                {/* <span className=\"d-none d-md-block\">{\"name\"}</span> */}\r\n                                                <span className=\"d-md-none\">S</span>\r\n                                            </h2>\r\n                                        </div>\r\n                                        {/* <div className=\"col\">\r\n                                            <Nav className=\"justify-content-end\" pills>\r\n                                                <NavItem>\r\n                                                    <NavLink\r\n                                                        className={`classnames(\"py-2 px-3\", {\r\n                                active: this.state.activeNav === 1\r\n                              })`}\r\n                                                        href=\"#pablo\"\r\n                                                    //  onClick={e => this.toggleNavs(e, 1)}\r\n                                                    >\r\n                                                        <span className=\"d-none d-md-block\">By Date</span>\r\n                                                        <span className=\"d-md-none\">D</span>\r\n                                                    </NavLink>\r\n                                                </NavItem>\r\n                                            </Nav>\r\n                                        </div> */}\r\n                                    </Row>\r\n                                </CardHeader>\r\n                                <Table className=\"align-items-center table-flush\" responsive>\r\n                                    <thead className=\"thead-light\">\r\n                                        <tr>\r\n                                            {header.map((header, key) => (\r\n                                                <th scope=\"col\" key={uuidv1()}>\r\n                                                    {header}\r\n                                                </th>\r\n                                            ))}\r\n                                        </tr>\r\n                                    </thead>\r\n                                    <tbody>\r\n                                        {repoList[0] != null ? repoList.map((repo, key) => (\r\n                                            <tr>\r\n                                                <td scope=\"col\" key={uuidv1()}>\r\n                                                    {repo.name}\r\n                                                </td>\r\n                                                <td scope=\"col\" key={uuidv1()}>\r\n                                                    {repo.server.name}\r\n                                                </td>\r\n                                                <td scope=\"col\" key={uuidv1()}>\r\n                                                    {repo.repo_url}\r\n                                                </td>\r\n                                                \r\n                                                <td className=\"text-right\">\r\n                                                    <UncontrolledDropdown>\r\n                                                        <DropdownToggle\r\n                                                            className=\"btn-icon-only text-light\"\r\n                                                            href=\"#pablo\"\r\n                                                            role=\"button\"\r\n                                                            size=\"sm\"\r\n                                                            color=\"\"\r\n                                                            onClick={e => e.preventDefault()}\r\n                                                        >\r\n                                                            <i className=\"fas fa-ellipsis-v\" />\r\n                                                        </DropdownToggle>\r\n                                                        <DropdownMenu className=\"dropdown-menu-arrow\" right>\r\n                                                            <DropdownItem\r\n                                                                href=\"#pablo\"\r\n                                                                // onClick={e => toggleInformationModal(e, serverId)}\r\n                                                            >\r\n                                                                Delete\r\n            </DropdownItem>\r\n                                                        </DropdownMenu>\r\n                                                    </UncontrolledDropdown>\r\n                                                </td>\r\n                                            </tr>\r\n                                        )) : null\r\n                                        }\r\n                                    </tbody>\r\n                                </Table>\r\n                            </Card>\r\n                        </div>\r\n                    </Row>\r\n                </Container>\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Repo;","import React, {\r\n    Component\r\n} from \"react\";\r\n//  set up proptype\r\nimport PropTypes from \"prop-types\";\r\n//  redux component\r\n//  set up redux\r\nimport {\r\n    connect\r\n} from \"react-redux\";\r\nimport {\r\n    withRouter\r\n} from \"react-router-dom\";\r\nimport Action from \"./../../../redux/Action/index.js\";\r\n\r\n//  presentation component\r\nimport Repo from \"./Repo\";\r\n//  compose function:\r\n//  - (...fns): array all function need to compose\r\n//  - x: collection / input value\r\n//  - reduceRight: array loop function, from right to left (last -> last - 1 -> last - 2 -> ...)\r\n//  =>  (y, f) => f(y), x === (previousValue, currentFunction) => currentFunction(previousValue), x\r\n//  =>  take last function in collectionFunction fns, use innitial value x, return value (y)\r\n//  =>  [a, b, c] => reduceRight((y, f) => f(y), x) === a(b(c))\r\nconst compose = (...fns) => x => fns.reduceRight((y, f) => f(y), x);\r\n\r\n//  propType\r\nconst propsProTypes = {\r\n    index: PropTypes.number,\r\n    data: PropTypes.array\r\n};\r\n\r\nconst propsDefault = {\r\n    index: 1,\r\n    data: []\r\n};\r\n\r\nclass RepoContainer extends Component {\r\n    static propTypes = propsProTypes;\r\n    static defaultProps = propsDefault;\r\n    componentDidMount = () => {\r\n        this.props.getData();\r\n    }\r\n    render() {\r\n        let header = [\"Repo Name\", \"Server\", \"Url\", \"Action\"];\r\n      \r\n        return ( <\r\n            Repo header = {\r\n                header\r\n            }\r\n            repoList = {\r\n                this.props.data\r\n            }\r\n            / >\r\n        );\r\n    }\r\n}\r\n\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n    return {\r\n        data: state.Repo.currentDataList.map(repo => {\r\n            return repo.application_id == state.Application.currentSelectedApplication ? repo: null;\r\n        }),\r\n        own: ownProps\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch, ownProps) => ({\r\n    delete: async (event, id) => {\r\n        event.preventDefault();\r\n        if (id) {\r\n            await dispatch(Action.Repo.deleteRepo(\r\n                id\r\n            ));\r\n            dispatch(Action.Repo.getData());\r\n        }\r\n    },\r\n\r\n    getData: async () => {\r\n        await dispatch(Action.Repo.getData());\r\n    },\r\n\r\n    dispatch\r\n});\r\n\r\n//  compose all redux HOC\r\nconst enhance = compose(\r\n    withRouter,\r\n    connect(mapStateToProps, mapDispatchToProps, null)\r\n);\r\n\r\nexport default enhance(RepoContainer);","//  reactstrap component\r\nimport {\r\n  Button,\r\n  Modal,\r\n  ModalHeader,\r\n  ModalBody,\r\n  ModalFooter,\r\n  Col,\r\n  Row,\r\n  Form,\r\n  FormGroup,\r\n  Label,\r\n  Input,\r\n  FormFeedback,\r\n  FormText,\r\n\r\n  //  React tab\r\n  TabContent,\r\n  TabPane,\r\n  Nav,\r\n  NavItem,\r\n  NavLink,\r\n  Card,\r\n} from \"reactstrap\";\r\nimport classnames from \"classnames\";\r\n//  pure component: memo\r\nimport React, { memo, useState } from \"react\";\r\n\r\n//  import table for repo\r\nimport RepoContainer from \"./../Repo/RepoContainer.js\";\r\n\r\nconst uuidv1 = require(\"uuid/v1\");\r\n\r\nconst ApplicationInformationModal = ({ fromProps }) => {\r\n  let {\r\n    modal,\r\n    toggleInformationModal,\r\n    systemList = [],\r\n    serverList,\r\n\r\n    validateName,\r\n    validateStartDate,\r\n    validateExpiredDate,\r\n    validateSourceCodeUrl,\r\n    validateRepoName,\r\n    validateRepoUrl,\r\n\r\n\r\n    role,\r\n\r\n    application: {\r\n      id,\r\n      category,\r\n      create_time,\r\n      description,\r\n      efford,\r\n      end_date,\r\n      name,\r\n      origin,\r\n      priority,\r\n      source_code_url,\r\n      stage,\r\n      start_date,\r\n      status,\r\n      systems_id,\r\n      team,\r\n      technologies,\r\n      type,\r\n    }\r\n  } = fromProps;\r\n\r\n  console.log(\" Detail Application Modal Presentation\", fromProps);\r\n  //  close button\r\n  const closeBtn = (\r\n    <button className=\"close\" onClick={toggleInformationModal}>\r\n      &times;\r\n    </button>\r\n  );\r\n\r\n  //  ref to general information\r\n  const expiredDateRef = React.createRef();\r\n  const createDateRef = React.createRef();\r\n  const sourceCodeUrlRef = React.createRef();\r\n  const descriptionRef = React.createRef();\r\n\r\n  const categorySelectRef = React.createRef();\r\n  const applicationNameRef = React.createRef();\r\n  const technologyRef = React.createRef();\r\n  const teamRef = React.createRef();\r\n  const effordRef = React.createRef();\r\n  const prioritySelectRef = React.createRef();\r\n  const startDateRef = React.createRef();\r\n  const originSelectRef = React.createRef();\r\n  const typeSelectRef = React.createRef();\r\n  const statusSelectRef = React.createRef();\r\n  const stageSelectRef = React.createRef();\r\n  const systemSelectRef = React.createRef();\r\n\r\n\r\n  //  ref to repo\r\n  const repoNameRef = React.createRef();\r\n  const repoUrlRef = React.createRef();\r\n  const serverSelectRef = React.createRef();\r\n\r\n  //  Validation state\r\n  //  General information\r\n  const [applicationNameValidation, setApplicationNameValidation] = useState(true);\r\n  const [\r\n    expiredDateValidation,\r\n    setExpiredDateValidation\r\n  ] = useState(true);\r\n  const [sourceCodeUrlValidation, setSourceCodeUrlValidation] = useState(true);\r\n  const [\r\n    startDateValidation,\r\n    setStartDateValidation\r\n  ] = useState(null);\r\n  //  Repo \r\n  const [repoNameValidation, setRepoNameValidation] = useState(null);\r\n  const [repoUrlValidation, setRepoUrlValidation] = useState(null);\r\n  const [serverSelectValidation, setServerSelectValidation] = useState(null);\r\n\r\n\r\n  //  validate value from each input and store value into state\r\n  const checkValidation = async event => {\r\n    const name = event.target.name;\r\n    const value =\r\n      event.target.type === \"checkbox\"\r\n        ? event.target.checked\r\n        : event.target.value;\r\n\r\n    switch (name) {\r\n      case \"applicationName\":\r\n        setApplicationNameValidation(validateName({ [name]: value }));\r\n        break;\r\n\r\n      case \"startDate\":\r\n        setStartDateValidation(validateStartDate({ [name]: value }));\r\n        break;\r\n\r\n      case \"expiredDate\":\r\n        setExpiredDateValidation(validateExpiredDate({ [name]: value, \"startDate\": startDateRef.current.value }));\r\n        break;\r\n\r\n      case \"sourceCodeUrl\":\r\n        setSourceCodeUrlValidation(validateSourceCodeUrl({ [name]: value }));\r\n        break;\r\n\r\n      case \"repoName\":\r\n        setRepoNameValidation(validateRepoName({ [name]: value }));\r\n        break;\r\n        \r\n      case \"repoUrl\":\r\n        setRepoUrlValidation(validateRepoUrl({ [name]: value }));\r\n        break;\r\n\r\n      case \"serverSelect\":\r\n        setServerSelectValidation(validateRepoUrl(serverSelectRef > 0));\r\n        break;\r\n\r\n      default:\r\n        break;\r\n    }\r\n  };\r\n\r\n  //  check validation\r\n  const generalInformationValidation = () => {\r\n    return (\r\n      (applicationNameValidation == null ? true : applicationNameValidation) &&\r\n      (startDateValidation == null\r\n        ? true\r\n        : startDateValidation) &&\r\n      (expiredDateValidation == null\r\n        ? true\r\n        : expiredDateValidation)\r\n    );\r\n  };\r\n\r\n  const repoValidation = () => {\r\n    return (\r\n      repoNameValidation == null ? false : repoNameValidation &&\r\n      repoUrlValidation == null ? false: repoUrlValidation\r\n    );\r\n  }\r\n\r\n  //  update application information\r\n  const updateApplicationInformation = event => {\r\n    event.preventDefault();\r\n    const application = {\r\n      id: id,\r\n      active: true,\r\n      category: categorySelectRef.current.value,\r\n      description: descriptionRef.current.value,\r\n      efford: effordRef.current.value,\r\n      end_date: expiredDateRef.current.value,\r\n      is_done: true,\r\n      name: applicationNameRef.current.value,\r\n      note: \"\",\r\n      origin: originSelectRef.current.value,\r\n      priority: prioritySelectRef.current.value,\r\n      source_code_url: sourceCodeUrlRef.current.value,\r\n      stage: stageSelectRef.current.value,\r\n      start_date: startDateRef.current.value,\r\n      status: statusSelectRef.current.value,\r\n      systems_id: systemSelectRef.current.value,\r\n      team: teamRef.current.value,\r\n      technologies: technologyRef.current.value,\r\n      type: typeSelectRef.current.value,\r\n      update_time: new Date(Date.now()),\r\n      // systems,\r\n      // application_instance,\r\n      // manage_project,\r\n      // repo\r\n    };\r\n    fromProps.updateApplicationGeneralInformation(application);\r\n  };\r\n\r\n  //  create new repository\r\n  const createNewRepository = event => {\r\n    event.preventDefault();\r\n    const repo = {\r\n      server_id: serverSelectRef.current.value > 0 ? serverSelectRef.current.value : 1,\r\n      name: repoNameRef.current.value ? repoNameRef.current.value : \"New Repository\",\r\n      application_id: id,\r\n      repo_url: repoUrlRef.current.value ? repoUrlRef.current.value : \"google.com.vn\",\r\n      note: \"string\"\r\n    }\r\n    fromProps.createNewRepo(repo);\r\n  }\r\n\r\n\r\n  //  modal tab section\r\n  const [activeTab, setActiveTab] = useState(\"1\");\r\n  const toggleTab = tab => {\r\n    if (activeTab !== tab) setActiveTab(tab);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Modal\r\n        isOpen={modal}\r\n        toggle={toggleInformationModal}\r\n        // modalTransition={{ timeout: 1000 }}\r\n        // backdropTransition={{ timeout: 1500 }}\r\n        className={`modal-dialog modal-lg modal-dialog-centered modal-dialog-scrollable`}\r\n      >\r\n        <ModalHeader toggle={() => this.toggle()} close={closeBtn}>\r\n          APPLICATION INFORMATION\r\n        </ModalHeader>\r\n        <ModalBody>\r\n          <Nav tabs>\r\n            <NavItem>\r\n              <NavLink\r\n                className={classnames({ active: activeTab === \"1\" })}\r\n                onClick={() => {\r\n                  toggleTab(\"1\");\r\n                }}\r\n              >\r\n                General information\r\n              </NavLink>\r\n            </NavItem>\r\n            <NavItem>\r\n              <NavLink\r\n                className={classnames({ active: activeTab === \"2\" })}\r\n                onClick={() => {\r\n                  toggleTab(\"2\");\r\n                }}\r\n              >\r\n                Repository\r\n              </NavLink>\r\n            </NavItem>\r\n            {/* <NavItem>\r\n              <NavLink\r\n                className={classnames({ active: activeTab === \"3\" })}\r\n                onClick={() => {\r\n                  toggleTab(\"3\");\r\n                }}\r\n              >\r\n                Account\r\n              </NavLink>\r\n            </NavItem> */}\r\n          </Nav>\r\n          <TabContent activeTab={activeTab}>\r\n            <TabPane tabId=\"1\">\r\n              <Form>\r\n                <Card body>\r\n                  <Row form>\r\n                    <Col md={6}>\r\n                    </Col>\r\n                    <Col md={6}>\r\n                    </Col>\r\n                  </Row>\r\n                  <Row form>\r\n                    <Col md={6}>\r\n                      <FormGroup>\r\n                        <Label for=\"applicationName\">Application Name</Label>\r\n                        <Input\r\n                          onChange={event => checkValidation(event)}\r\n                          type=\"text\"\r\n                          name=\"applicationName\"\r\n                          id=\"applicationName\"\r\n                          placeholder=\"Application Name\"\r\n                          innerRef={applicationNameRef}\r\n                          defaultValue={name}\r\n                          valid={applicationNameValidation}\r\n                          invalid={\r\n                            applicationNameValidation == null\r\n                              ? false\r\n                              : !applicationNameValidation\r\n                          }\r\n                          required\r\n                        />\r\n                        <FormFeedback\r\n                        // valid={\r\n                        //   this.validateIPaddress(this.state)\r\n                        // }\r\n                        // tooltip\r\n                        >\r\n                          Invalid Application Name\r\n                  </FormFeedback>\r\n                        <FormText>Name is required, minimum length is 5</FormText>\r\n                      </FormGroup>\r\n                    </Col>\r\n                    <Col md={6}>\r\n                      <FormGroup>\r\n                        <div className=\"position-relative form-group\">\r\n                          <Label for=\"startDate\">Start Date</Label>\r\n                          <Input\r\n                            onChange={event => checkValidation(event)}\r\n                            type=\"datetime-local\"\r\n                            className=\"form-control fg-input\"\r\n                            id=\"startDate\"\r\n                            name=\"startDate\"\r\n                            innerRef={startDateRef}\r\n                            valid={startDateValidation}\r\n                            invalid={\r\n                              startDateValidation == null\r\n                                ? false\r\n                                : !startDateValidation\r\n                            }\r\n                            defaultValue={start_date ? start_date : new Date(Date.now())\r\n                              .toISOString()\r\n                              .slice(0, 23)}\r\n                          />\r\n                          <FormFeedback>\r\n                            Application Start Date must be after current day\r\n                    </FormFeedback>\r\n                          <FormText>Application Start Date</FormText>\r\n                        </div>\r\n                      </FormGroup>\r\n                    </Col>\r\n                  </Row>\r\n\r\n                  <Row form>\r\n                    <Col md={6}>\r\n                      <FormGroup>\r\n                        <Label for=\"sourceCodeUrl\">Source Code Url</Label>\r\n                        <Input\r\n                          onChange={event => checkValidation(event)}\r\n                          type=\"text\"\r\n                          name=\"sourceCodeUrl\"\r\n                          id=\"sourceCodeUrl\"\r\n                          placeholder=\"https://www.localhost:8084\"\r\n                          defaultValue={source_code_url}\r\n                          innerRef={sourceCodeUrlRef}\r\n                          valid={sourceCodeUrlValidation}\r\n                          invalid={\r\n                            sourceCodeUrlValidation == null ? false : !sourceCodeUrlValidation\r\n                          }\r\n                        />\r\n                        <FormFeedback>Invalid source code url</FormFeedback>\r\n                        <FormText>Eq: www.google.com</FormText>\r\n                      </FormGroup>\r\n                    </Col>\r\n\r\n                    <Col md={6}>\r\n                      <FormGroup>\r\n                        <div className=\"position-relative form-group\">\r\n                          <Label for=\"expiredDate\">Expired Date</Label>\r\n                          <Input\r\n                            onChange={event => checkValidation(event)}\r\n                            type=\"datetime-local\"\r\n                            className=\"form-control fg-input\"\r\n                            id=\"expiredDate\"\r\n                            name=\"expiredDate\"\r\n                            innerRef={expiredDateRef}\r\n                            valid={expiredDateValidation}\r\n                            invalid={\r\n                              expiredDateValidation == null\r\n                                ? false\r\n                                : !expiredDateValidation\r\n                            }\r\n                            defaultValue={end_date ? end_date : new Date(Date.now())\r\n                              .toISOString()\r\n                              .slice(0, 23)}\r\n                          />\r\n                          <FormFeedback>\r\n                            Application Expired Date must be after current day\r\n                    </FormFeedback>\r\n                          <FormText>Application Expired Date</FormText>\r\n                        </div>\r\n                      </FormGroup>\r\n                    </Col>\r\n                  </Row>\r\n\r\n                  <Row form>\r\n                    <Col md={6}>\r\n                      <FormGroup>\r\n                        <Label for=\"technology\">Technology</Label>\r\n                        <Input\r\n                          onChange={event => checkValidation(event)}\r\n                          type=\"text\"\r\n                          name=\"technology\"\r\n                          id=\"technology\"\r\n                          defaultValue={technologies}\r\n                          innerRef={technologyRef}\r\n\r\n                        />\r\n                        <FormText>Base technology of application</FormText>\r\n                      </FormGroup>\r\n                    </Col>\r\n\r\n                    <Col md={6}>\r\n                      <FormGroup>\r\n                        <div className=\"position-relative form-group\">\r\n                          <Label for=\"createDate\">Create Date</Label>\r\n                          <Input\r\n                            onChange={event => checkValidation(event)}\r\n                            type=\"datetime-local\"\r\n                            className=\"form-control fg-input\"\r\n                            id=\"createDate\"\r\n                            disabled\r\n                            name=\"createDate\"\r\n                            innerRef={createDateRef}\r\n                            defaultValue={create_time ? create_time : new Date(Date.now())\r\n                              .toISOString()\r\n                              .slice(0, 23)}\r\n                          />\r\n                          <FormText>Application Create Date</FormText>\r\n                        </div>\r\n                      </FormGroup>\r\n                    </Col>\r\n                  </Row>\r\n\r\n                  <Row form>\r\n                    <Col md={6}>\r\n                      <FormGroup>\r\n                        <Label for=\"team\">Team</Label>\r\n                        <Input\r\n                          onChange={event => checkValidation(event)}\r\n                          type=\"number\"\r\n                          name=\"team\"\r\n                          id=\"team\"\r\n                          defaultValue={team}\r\n                          innerRef={teamRef}\r\n                        />\r\n                        <FormText>Team in charge of applcation</FormText>\r\n                      </FormGroup>\r\n                    </Col>\r\n\r\n                    <Col md={6}>\r\n                      <FormGroup>\r\n                        <Label for=\"efford\">Efford</Label>\r\n                        <Input\r\n                          onChange={event => checkValidation(event)}\r\n                          type=\"number\"\r\n                          name=\"efford\"\r\n                          id=\"efford\"\r\n                          defaultValue={efford}\r\n                          innerRef={effordRef}\r\n                        />\r\n                        <FormText>Efford of applcation (manhour)</FormText>\r\n                      </FormGroup>\r\n                    </Col>\r\n                  </Row>\r\n\r\n                  <div style={{ border: '0.05px solid', padding: '10px', borderRadius: '15px' }}>\r\n                    <Label for=\"informationSection\"></Label>\r\n\r\n                    <FormGroup id=\"systemSelect\">\r\n                      <div className=\"position-relative form-group\">\r\n                        <Label for=\"systemSelect\">Choose System</Label>\r\n                        <Input\r\n                          type=\"select\"\r\n                          id=\"systemSelect\"\r\n                          name=\"systemSelect\"\r\n                          innerRef={systemSelectRef}\r\n                          defaultValue={systems_id ? systems_id : systemList && systemList.length ? 1 : 0}\r\n                        >\r\n                          <option value={0}>Choose application Master</option>\r\n                          {systemList && systemList.length\r\n                            ? systemList.map(system => {\r\n                              return (\r\n                                <option key={uuidv1()} value={system.id}>\r\n                                  {system.name}\r\n                                </option>\r\n                              );\r\n                            })\r\n                            : null}\r\n                        </Input>\r\n                        <FormText>The system this application belongs to</FormText>\r\n                      </div>\r\n                    </FormGroup>\r\n\r\n                    <FormGroup id=\"categorySelect\">\r\n                      <Label for=\"categorySelect\">Choose Category</Label>\r\n                      <Input\r\n                        type=\"select\"\r\n                        id=\"categorySelect\"\r\n                        name=\"categorySelect\"\r\n                        innerRef={categorySelectRef}\r\n                        defaultValue={category ? category : 1}\r\n                      >\r\n                        <option value={1}>Web MVC Application</option>\r\n                        {/* <option value={2}>Mobile Application</option> */}\r\n                        <option value={2}>POS Application</option>\r\n                        {/* <option value={4}>Database Application</option> */}\r\n                        <option value={3}>Web API Application</option>\r\n\r\n                      </Input>\r\n                      {/* <FormText>Choose an exist application as application master</FormText> */}\r\n                    </FormGroup>\r\n\r\n                    <FormGroup id=\"typeSelect\">\r\n                      <Label for=\"typeSelect\">Choose Type</Label>\r\n                      <Input\r\n                        type=\"select\"\r\n                        id=\"typeSelect\"\r\n                        name=\"typeSelect\"\r\n                        defaultValue={type ? type : \"N\"}\r\n                        onChange={event => checkValidation(event)}\r\n                        innerRef={typeSelectRef}\r\n                      >\r\n                        <option value=\"N\">Application was developed from scratch</option>\r\n                        <option value=\"C\">Application was based on existing solution and was tailored for the customer</option>\r\n                        <option value=\"E\">Major enhancement, i.e., strongly simplified version was available (e.g. a prototype)</option>\r\n                      </Input>\r\n                    </FormGroup>\r\n\r\n                    <FormGroup id=\"originSelect\">\r\n                      <Label for=\"originSelect\">Choose Origin</Label>\r\n                      <Input\r\n                        type=\"select\"\r\n                        id=\"originSelect\"\r\n                        name=\"originSelect\"\r\n                        defaultValue={origin ? origin : \"I\"}\r\n                        onChange={event => checkValidation(event)}\r\n                        innerRef={originSelectRef}\r\n                      >\r\n                        <option value=\"I\">Project developed by a software development company</option>\r\n                        <option value=\"U\">Projects developed by university staff and students for the internal usage at the university</option>\r\n                        <option value=\"S2B\">Project developed by students for external organizations</option>\r\n                      </Input>\r\n                    </FormGroup>\r\n\r\n                    <FormGroup id=\"stageSelect\">\r\n                      <Label for=\"stageSelect\">Choose Stage</Label>\r\n                      <Input\r\n                        type=\"select\"\r\n                        id=\"stageSelect\"\r\n                        name=\"stageSelect\"\r\n                        innerRef={stageSelectRef}\r\n                        defaultValue={stage ? stage : 1}\r\n                      >\r\n                        <option value={1}>Develop</option>\r\n                        <option value={2}>Staging</option>\r\n                        <option value={3}>Product</option>\r\n\r\n                      </Input>\r\n                      {/* <FormText>Choose an exist application as application master</FormText> */}\r\n                    </FormGroup>\r\n\r\n                    <FormGroup id=\"prioritySelect\">\r\n                      <Label for=\"prioritySelect\">Choose Priority</Label>\r\n                      <Input\r\n                        type=\"select\"\r\n                        id=\"prioritySelect\"\r\n                        name=\"prioritySelect\"\r\n                        defaultValue={priority ? priority : 1}\r\n                        innerRef={prioritySelectRef}\r\n                      >\r\n                        <option value={1}>No Priority</option>\r\n                        <option value={2}>Low Priority</option>\r\n                        <option value={3}>Medium Priority</option>\r\n                        <option value={4}>High Priority</option>\r\n\r\n                      </Input>\r\n                      {/* <FormText>Choose an exist application as application master</FormText> */}\r\n                    </FormGroup>\r\n\r\n                    <FormGroup id=\"statusSelect\">\r\n                      <Label for=\"statusSelect\">Choose Status</Label>\r\n                      <Input\r\n                        type=\"select\"\r\n                        id=\"statusSelect\"\r\n                        name=\"statusSelect\"\r\n                        defaultValue={status ? status : 1}\r\n                        innerRef={statusSelectRef}\r\n                      >\r\n                        <option value={1}>To do</option>\r\n                        <option value={2}>Doing</option>\r\n                        <option value={3}>Done</option>\r\n                        <option value={4}>Pending</option>\r\n                        <option value={5}>Cancel</option>\r\n\r\n                      </Input>\r\n                    </FormGroup>\r\n                  </div>\r\n\r\n                  <FormGroup>\r\n                    <Label for=\"description\">Description</Label>\r\n                    <Col sm={12}>\r\n                      <Input\r\n                        onChange={event => checkValidation(event)}\r\n                        type=\"textarea\"\r\n                        name=\"description\"\r\n                        id=\"description\"\r\n                        defaultValue={description}\r\n                        innerRef={descriptionRef}\r\n                      />\r\n                    </Col>\r\n                  </FormGroup>\r\n\r\n                  <hr />\r\n                  <Button\r\n                    disabled={!generalInformationValidation()}\r\n                    color=\"primary\"\r\n                    onClick={e => updateApplicationInformation(e)}\r\n                  >\r\n                    Update application Information\r\n                  </Button>\r\n                </Card>\r\n              </Form>\r\n            </TabPane>\r\n            <TabPane tabId=\"2\">\r\n              <Form>\r\n                <Card body>\r\n                  <Row form>\r\n                    <Col md={6}>\r\n                    </Col>\r\n                    <Col md={6}>\r\n                    </Col>\r\n                  </Row>\r\n                  <FormGroup>\r\n                    <Label for=\"repoName\">Repository Name</Label>\r\n                    <Input\r\n                      onChange={event => checkValidation(event)}\r\n                      type=\"text\"\r\n                      name=\"repoName\"\r\n                      id=\"repoName\"\r\n                      placeholder=\"Repository Name\"\r\n                      innerRef={repoNameRef}\r\n                      // defaultValue={repoName}\r\n                      valid={repoNameValidation}\r\n                      invalid={\r\n                        repoNameValidation == null\r\n                          ? false\r\n                          : !repoNameValidation\r\n                      }\r\n                      required\r\n                    />\r\n                    <FormFeedback>\r\n                      Repository Name: 5-100 characters\r\n                  </FormFeedback>\r\n                    <FormText>Name is required, minimum length is 5</FormText>\r\n                  </FormGroup>\r\n\r\n                  <FormGroup>\r\n                    <Label for=\"repoUrl\">Repository Url</Label>\r\n                    <Input\r\n                      onChange={event => checkValidation(event)}\r\n                      type=\"text\"\r\n                      name=\"repoUrl\"\r\n                      id=\"repoUrl\"\r\n                      placeholder=\"https://www.localhost:8084\"\r\n                      // defaultValue=\"https://www.google.com\"\r\n                      innerRef={repoUrlRef}\r\n                      valid={repoUrlValidation}\r\n                      invalid={\r\n                        repoUrlValidation == null ? false : !repoUrlValidation\r\n                      }\r\n                    />\r\n                    <FormFeedback>Invalid source code url</FormFeedback>\r\n                    <FormText>Eq: www.google.com</FormText>\r\n                  </FormGroup>\r\n\r\n\r\n                  <FormGroup id=\"serverSelect\">\r\n                    <div className=\"position-relative form-group\">\r\n                      <Label for=\"serverSelect\">Choose Server</Label>\r\n                      <Input\r\n                        type=\"select\"\r\n                        id=\"serverSelect\"\r\n                        name=\"serverSelect\"\r\n                        onChange={event => checkValidation(event)}\r\n                        innerRef={serverSelectRef}\r\n                      valid={serverSelectValidation}\r\n                      invalid={\r\n                        serverSelectValidation == null\r\n                          ? false\r\n                          : !serverSelectValidation\r\n                      }\r\n                      >\r\n                        <option value={0}>Choose Server</option>\r\n                        {serverList && serverList.length\r\n                          ? serverList.map(server => {\r\n                            return (\r\n                              <option key={uuidv1()} value={server.id}>\r\n                                {server.name}\r\n                              </option>\r\n                            );\r\n                          })\r\n                          : null}\r\n                      </Input>\r\n                      <FormFeedback>\r\n                        Please select a server\r\n                    </FormFeedback>\r\n                    </div>\r\n                  </FormGroup>\r\n\r\n                  {/* <FormGroup>\r\n                    <Label for=\"note\">Note</Label>\r\n                    <Col sm={12}>\r\n                      <Input\r\n                        onChange={event => checkValidation(event)}\r\n                        type=\"textarea\"\r\n                        name=\"note\"\r\n                        id=\"note\"\r\n                        defaultValue={note}\r\n                        innerRef={noteRef}\r\n                      />\r\n                    </Col>\r\n                  </FormGroup> */}\r\n\r\n                  <hr />\r\n                  <Button\r\n                    disabled={!repoValidation()}\r\n                    color=\"primary\"\r\n                    onClick={e => createNewRepository(e)}\r\n                  >\r\n                    Create new repository\r\n                  </Button>\r\n\r\n                  <hr />\r\n                  <div style={{ marginTop: '60px' }}>\r\n                    <RepoContainer />\r\n                  </div>\r\n\r\n                  <hr />\r\n                </Card>\r\n              </Form>\r\n            </TabPane>\r\n          </TabContent>\r\n        </ModalBody>\r\n        <ModalFooter>\r\n          {\" \"}\r\n          <Button color=\"secondary\" onClick={toggleInformationModal}>\r\n            Cancel\r\n          </Button>\r\n        </ModalFooter>\r\n      </Modal>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst arePropsEqual = (prevProps, nextProps) => {\r\n  return prevProps === nextProps;\r\n};\r\n// Wrap component using `React.memo()` and pass `arePropsEqual`\r\nexport default memo(ApplicationInformationModal, arePropsEqual);\r\n","import React, {\r\n  Component\r\n} from \"react\";\r\n//  set up proptype\r\nimport PropTypes from \"prop-types\";\r\n//  reacttrap component\r\n// import {\r\n//   Button,\r\n//   Modal,\r\n//   ModalHeader,\r\n//   ModalBody,\r\n//   ModalFooter,\r\n//   Col,\r\n//   Row,\r\n//   Form,\r\n//   FormGroup,\r\n//   Label,\r\n//   Input,\r\n//   FormFeedback,\r\n//   FormText\r\n// } from \"reactstrap\";\r\n\r\n//  redux component\r\n//  set up redux\r\nimport {\r\n  connect\r\n} from \"react-redux\";\r\nimport {\r\n  withRouter\r\n} from \"react-router-dom\";\r\nimport Action from \"../../../redux/Action/index.js\";\r\n//  presentation component\r\nimport ApplicationInformationModal from \"./ApplicationInformationModal.jsx\";\r\n// const uuidv1 = require(\"uuid/v1\");\r\n//  compose function:\r\n//  - (...fns): array all function need to compose\r\n//  - x: collection / input value\r\n//  - reduceRight: array loop function, from right to left (last -> last - 1 -> last - 2 -> ...)\r\n//  =>  (y, f) => f(y), x === (previousValue, currentFunction) => currentFunction(previousValue), x\r\n//  =>  take last function in collectionFunction fns, use innitial value x, return value (y)\r\n//  =>  [a, b, c] => reduceRight((y, f) => f(y), x) === a(b(c))\r\nconst compose = (...fns) => x => fns.reduceRight((y, f) => f(y), x);\r\n\r\n//  Validation section\r\n//  Application Name validation\r\nconst validateName = ({\r\n  applicationName = \"\"\r\n}) => {\r\n  return applicationName ? applicationName.length <= 200 && applicationName.length > 4 : false;\r\n};\r\n//  Server start Date validation\r\nconst validateStartDate = ({\r\n  startDate = new Date(Date.now()).toISOString().slice(0, 23)\r\n}) => {\r\n  const currentDate = new Date(Date.now());\r\n  currentDate.setMinutes(currentDate.getMinutes() - 10);\r\n  return startDate >= currentDate.toISOString().slice(0, 23);\r\n};\r\n//  Server Expired Date \r\nconst validateExpiredDate = ({\r\n  endDate = new Date(Date.now()).toISOString().slice(0, 23),\r\n  startDate = new Date(Date.now()).toISOString().slice(0, 23)\r\n}) => {\r\n  return (\r\n    endDate.getYear() >= startDate.getYear() &&\r\n    endDate.getMonth() >= startDate.getMonth() &&\r\n    (endDate.getDate() - startDate.getDate()) >= 1\r\n  );\r\n};\r\n//  Application Source Code Url \r\nconst validateSourceCodeUrl = ({\r\n  sourceCodeUrl = \"https://www.google.com\"\r\n}) => {\r\n  let regex = new RegExp(\r\n    \"^(http[s]?:\\\\/\\\\/(www\\\\.)?|ftp:\\\\/\\\\/(www\\\\.)?|(www\\\\.)?){1}([0-9A-Za-z-\\\\.@:%_+~#=]+)+((\\\\.[a-zA-Z]{2,3})+)(/(.)*)?(\\\\?(.)*)?\"\r\n  );\r\n  return regex.test(sourceCodeUrl) || sourceCodeUrl.length === 0;\r\n};\r\n//  Repo Name\r\nconst validateRepoName = ({\r\n  repoName = \"\"\r\n}) => {\r\n  return repoName ? repoName.length > 5 && repoName.length <= 100 : false;\r\n}\r\n//  Repo Url\r\nconst validateRepoUrl = ({\r\n  repoUrl = \"https://www.google.com\"\r\n}) => {\r\n  let regex = new RegExp(\r\n    \"^(http[s]?:\\\\/\\\\/(www\\\\.)?|ftp:\\\\/\\\\/(www\\\\.)?|(www\\\\.)?){1}([0-9A-Za-z-\\\\.@:%_+~#=]+)+((\\\\.[a-zA-Z]{2,3})+)(/(.)*)?(\\\\?(.)*)?\"\r\n  );\r\n  return regex.test(repoUrl) || repoUrl.length === 0;\r\n};\r\n\r\n//  propType\r\nconst propsProTypes = {\r\n  //  modal toggle\r\n  modal: PropTypes.bool,\r\n  toggleCreateModal: PropTypes.func,\r\n\r\n  //  default value\r\n  application: PropTypes.object,\r\n\r\n  //  create new server func\r\n  createNewApplication: PropTypes.func,\r\n\r\n  //  validation func\r\n  validation: PropTypes.bool,\r\n  validateName: PropTypes.func,\r\n  validateStartDate: PropTypes.func,\r\n  validateExpiredDate: PropTypes.func,\r\n  validateSourceCodeUrl: PropTypes.func,\r\n  validateRepoName: PropTypes.func,\r\n  validateRepoUrl: PropTypes.func,\r\n\r\n};\r\n\r\nconst propsDefault = {\r\n  modal: false,\r\n  toggleCreateModal: () => {},\r\n  systemList: [],\r\n  createNewApplication: () => {},\r\n\r\n  application: {\r\n    \"id\": 1,\r\n    \"active\": true,\r\n    \"category\": 1,\r\n    \"create_time\": \"2020-03-11T00:00:00\",\r\n    \"description\": null,\r\n    \"efford\": null,\r\n    \"end_date\": null,\r\n    \"is_done\": true,\r\n    \"name\": \"Log API\",\r\n    \"note\": null,\r\n    \"origin\": \"I\",\r\n    \"priority\": 1,\r\n    \"source_code_url\": null,\r\n    \"stage\": null,\r\n    \"start_date\": \"2020-03-11T00:00:00\",\r\n    \"status\": 1,\r\n    \"systems_id\": 1,\r\n    \"team\": null,\r\n    \"technologies\": null,\r\n    \"type\": \"N\",\r\n    \"update_time\": \"2020-03-12T00:00:00\",\r\n    \"systems\": null,\r\n    \"application_instance\": [],\r\n    \"manage_project\": [],\r\n    \"repo\": []\r\n  },\r\n\r\n  validateName: validateName,\r\n  validateStartDate: validateStartDate,\r\n  validateExpiredDate: validateExpiredDate,\r\n  validateSourceCodeUrl: validateSourceCodeUrl,\r\n  validateRepoName: validateRepoName,\r\n  validateRepoUrl: validateRepoUrl,\r\n\r\n};\r\n\r\n\r\nclass ApplicationInformationModalContainer extends Component {\r\n  static propTypes = propsProTypes;\r\n  static defaultProps = propsDefault;\r\n\r\n  render() {\r\n    return ( <\r\n      ApplicationInformationModal fromProps = {\r\n        this.props\r\n      }\r\n      />\r\n\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n  return {\r\n    modal: state.Server.toggleInformationModal,\r\n    serverList: state.Server.currentDataList,\r\n    systemList: state.System.currentDataList,\r\n    own: ownProps,\r\n    application: state.Application.currentDataList.find(\r\n      application => application.id === state.Application.currentSelectedApplication\r\n    )\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch, ownProps) => ({\r\n\r\n  toggleInformationModal: () => {\r\n    dispatch(Action.Application.toggleInformationModal);\r\n  },\r\n\r\n  updateApplicationGeneralInformation: async application => {\r\n    if (application.id) {\r\n      await dispatch(Action.Application.updateApplicationGeneralInformation(application));\r\n      await dispatch(Action.Application.getData())\r\n    }\r\n  },\r\n\r\n  createNewRepo: async repo => {\r\n    if(repo && repo.server_id && repo.application_id && repo.name) {\r\n      await dispatch(Action.Repo.createNewRepo(repo));\r\n      await dispatch(Action.Repo.getData());\r\n    };\r\n  },\r\n\r\n  dispatch\r\n});\r\n\r\n//  compose all redux HOC\r\nconst enhance = compose(\r\n  withRouter,\r\n  connect(mapStateToProps, mapDispatchToProps, null)\r\n);\r\n\r\nexport default enhance(ApplicationInformationModalContainer);","import React, { memo } from \"react\";\r\nimport {\r\n  Badge,\r\n  DropdownMenu,\r\n  DropdownItem,\r\n  UncontrolledDropdown,\r\n  DropdownToggle,\r\n  Media,\r\n  Progress\r\n} from \"reactstrap\";\r\n\r\n//  import Action from \"./../../../redux/Action/index.js\";\r\n//  server information modal\r\n// import ServerDetailModal from \"./ServerDetailModal.js\";\r\nconst ApplicationInstance = props => {\r\n  let {\r\n    data: {\r\n      id = 1,\r\n      active = true,\r\n      app_code = \"number1\",\r\n      name = \"Quan 1\",\r\n      update_time = \"2020-03-12T00:00:00\",\r\n      app = null,\r\n    },\r\n    disabled,\r\n    toggleInformationModal\r\n  } = props;\r\n\r\n  //console.log(props);\r\n\r\n  return (\r\n    <tr>\r\n      <th scope=\"row\">\r\n        <Media className=\"align-items-center\">\r\n          {/* <a\r\n            className=\"avatar rounded-circle mr-3\"\r\n            href=\"#pablo\"\r\n            onClick={e => e.preventDefault()}\r\n          >\r\n            <img alt=\"...\" src={require(\"assets/img/theme/bootstrap.jpg\")} />\r\n          </a> */}\r\n          <Media>\r\n            <span className=\"mb-0 text-sm\">\r\n              {update_time}\r\n            </span>\r\n          </Media>\r\n        </Media>\r\n      </th>\r\n\r\n      <td>\r\n        <Badge color=\"\" className=\"badge-dot mr-4\">\r\n          <i className=\"bg-warning\" />\r\n          {name}\r\n        </Badge>\r\n      </td>\r\n\r\n      <td>\r\n        <Badge color=\"\" className=\"badge-dot mr-4\">\r\n          <i className=\"bg-warning\" />\r\n          {app.name}\r\n        </Badge>\r\n\r\n      </td>\r\n\r\n      <td>\r\n        <Badge color=\"\" className=\"badge-dot mr-4\">\r\n          <i className=\"bg-warning\" />\r\n          {app_code}\r\n        </Badge>\r\n      </td>\r\n\r\n      <td>\r\n        <div className=\"d-flex align-items-center\">\r\n          <span className=\"mr-2\">{active ? `Active` : `Disabled`}</span>\r\n          <div>\r\n            <Progress max=\"100\" value={active ? `100` : `0`} barClassName={active ? \"bg-info\" : \"bg-danger\"} />\r\n          </div>\r\n        </div>\r\n      </td>\r\n\r\n      <td className=\"text-right\">\r\n        <UncontrolledDropdown>\r\n          <DropdownToggle\r\n            className=\"btn-icon-only text-light\"\r\n            href=\"#pablo\"\r\n            role=\"button\"\r\n            size=\"sm\"\r\n            color=\"\"\r\n            onClick={e => e.preventDefault()}\r\n          >\r\n            <i className=\"fas fa-ellipsis-v\" />\r\n          </DropdownToggle>\r\n          <DropdownMenu className=\"dropdown-menu-arrow\" right>\r\n            <DropdownItem\r\n              href=\"#pablo\"\r\n              onClick={e => toggleInformationModal(e, id)}\r\n            >\r\n              Update\r\n            </DropdownItem>\r\n            {/* <ServerDetailModal /> */}\r\n            <DropdownItem href=\"#pablo\" onClick={e => disabled(e, id)}>\r\n              Disable\r\n            </DropdownItem>\r\n          </DropdownMenu>\r\n        </UncontrolledDropdown>\r\n      </td>\r\n    </tr>\r\n  );\r\n};\r\n\r\nconst arePropsEqual = (prevProps, nextProps) => {\r\n  return prevProps === nextProps;\r\n};\r\n// Wrap component using `React.memo()` and pass `arePropsEqual`\r\nexport default memo(ApplicationInstance, arePropsEqual);\r\n","import React, { Component } from \"react\";\r\n//  set up proptype\r\nimport PropTypes from \"prop-types\";\r\n//  redux component\r\n//  set up redux\r\nimport { connect } from \"react-redux\";\r\nimport { withRouter } from \"react-router-dom\";\r\nimport Action from \"../../../redux/Action/index.js\";\r\n\r\n//  presentation component\r\nimport ApplicationInstance from \"./ApplicationInstance.jsx\";\r\nconst uuidv1 = require(\"uuid/v1\");\r\n//  compose function:\r\n//  - (...fns): array all function need to compose\r\n//  - x: collection / input value\r\n//  - reduceRight: array loop function, from right to left (last -> last - 1 -> last - 2 -> ...)\r\n//  =>  (y, f) => f(y), x === (previousValue, currentFunction) => currentFunction(previousValue), x\r\n//  =>  take last function in collectionFunction fns, use innitial value x, return value (y)\r\n//  =>  [a, b, c] => reduceRight((y, f) => f(y), x) === a(b(c))\r\nconst compose = (...fns) => x => fns.reduceRight((y, f) => f(y), x);\r\n\r\n//  propType\r\nconst propsProTypes = {\r\n  index: PropTypes.number,\r\n  data: PropTypes.array\r\n};\r\n\r\nconst propsDefault = {\r\n  index: 1,\r\n  data: []\r\n};\r\n\r\nclass ApplicationInstanceContainer extends Component {\r\n  static propTypes = propsProTypes;\r\n  static defaultProps = propsDefault;\r\n  // state = {\r\n  //   tableData: []\r\n  // };\r\n\r\n  componentDidMount() {\r\n    //console.log(\"ServerContainer componentDidMount: \", this.props);\r\n    this.props.getData();\r\n  }\r\n\r\n  render() {\r\n    //console.log(\"Server Container: \" + JSON.stringify(this.props));\r\n    let { data = [], disabled, toggleInformationModal } = this.props;\r\n    return (\r\n      <>\r\n        {data.map((value, key) => {\r\n          return (\r\n            <ApplicationInstance\r\n              index={key}\r\n              key={uuidv1()}\r\n              data={value}\r\n              disabled={disabled}\r\n              toggleInformationModal={toggleInformationModal}\r\n            />\r\n          );\r\n        })}\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n  return {\r\n    data: state.ApplicationInstance.currentDataList,\r\n    own: ownProps\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch, ownProps) => ({\r\n  toggleInformationModal: (event, id) => {\r\n    event.preventDefault();\r\n    if (id) {\r\n      //console.log(id);\r\n      dispatch(Action.ApplicationInstance.storeCurrentSelectedApplicationInstance(id));\r\n      dispatch(Action.ApplicationInstance.toggleInformationModal);\r\n    } else {\r\n      alert(\"Invalid ID \", id);\r\n    }\r\n  },\r\n  getData: async () => {\r\n    await dispatch(Action.ApplicationInstance.getData());\r\n    await dispatch(Action.Application.getData());\r\n  },\r\n  disabled: (event, id) => {\r\n    event.preventDefault();\r\n    if (id) {\r\n      // console.log(ownProps);\r\n      //   let serverDetail = this.props.serverList.find(server => server.id == id);\r\n      //   if (serverDetail) {\r\n      // dispatch(Action.checkLogin(email, password));\r\n      alert(\"Disabled \\n\" + id);\r\n      //   }\r\n    }\r\n  },\r\n\r\n  dispatch\r\n});\r\n\r\n//  compose all redux HOC\r\nconst enhance = compose(\r\n  withRouter,\r\n  connect(mapStateToProps, mapDispatchToProps, null)\r\n);\r\n\r\nexport default enhance(ApplicationInstanceContainer);\r\n","//  reactstrap component\r\nimport {\r\n  Button,\r\n  Modal,\r\n  ModalHeader,\r\n  ModalBody,\r\n  ModalFooter,\r\n  Form,\r\n  FormGroup,\r\n  Label,\r\n  Input,\r\n  FormFeedback,\r\n  FormText\r\n} from \"reactstrap\";\r\n\r\n//  pure component: memo\r\nimport React, { memo, useState } from \"react\";\r\n\r\nconst uuidv1 = require(\"uuid/v1\");\r\n\r\nconst ApplicationInstanceRegistrationModal = ({ fromProps }) => {\r\n  let {\r\n    modal,\r\n    toggleCreateModal,\r\n    applicationList = [],\r\n    createNewApplicationInstance,\r\n\r\n    validateName,\r\n    validateAppCode,\r\n  } = fromProps;\r\n\r\n  //  close button\r\n  const closeBtn = (\r\n    <button className=\"close\" onClick={toggleCreateModal}>\r\n      &times;\r\n    </button>\r\n  );\r\n\r\n  //  ref to each input\r\n  const appCodeRef = React.createRef();\r\n  const nameRef = React.createRef();\r\n  const applicationSelectRef = React.createRef();\r\n\r\n  //  validation state\r\n  const [nameValidation, setNameValidation] = useState(\r\n    null\r\n  );\r\n  const [\r\n    appCodeValidation,\r\n    setAppCodeValidation\r\n  ] = useState(null);\r\n\r\n  //  validate value from each input and store value into state\r\n  const checkValidation = async event => {\r\n    const name = event.target.name;\r\n    const value =\r\n      event.target.type === \"checkbox\"\r\n        ? event.target.checked\r\n        : event.target.value;\r\n\r\n    switch (name) {\r\n      case \"name\":\r\n        setNameValidation(validateName({ [name]: value }));\r\n        break;\r\n\r\n      case \"appCode\":\r\n        setAppCodeValidation(validateAppCode({ [name]: value }));\r\n        break;\r\n\r\n      default:\r\n        break;\r\n    }\r\n\r\n\r\n  };\r\n\r\n  //  check validation\r\n  const validation = () => {\r\n    return (\r\n      (nameValidation == null ? true : nameValidation) &&\r\n      (appCodeValidation == null\r\n        ? true\r\n        : appCodeValidation)\r\n    );\r\n  };\r\n\r\n  //  create new application instance\r\n  const create = event => {\r\n    event.preventDefault();\r\n    const application = {\r\n      name: nameRef.current.value,\r\n      app_code: appCodeRef.current.value,\r\n      application_id: applicationSelectRef.current.value,\r\n    };\r\n    createNewApplicationInstance(application);\r\n  };\r\n\r\n  //alert(\"New Application \")\r\n  return (\r\n    <div>\r\n      <Modal\r\n        isOpen={modal}\r\n        toggle={toggleCreateModal}\r\n        // modalTransition={{ timeout: 1000 }}\r\n        // backdropTransition={{ timeout: 1500 }}\r\n        className={`modal-dialog modal-lg modal-dialog-centered modal-dialog-scrollable`}\r\n      >\r\n        <ModalHeader toggle={toggleCreateModal} close={closeBtn}>\r\n          APPLICATION INSTANCE REGISTRATION\r\n        </ModalHeader>\r\n        <ModalBody>\r\n          <Form>\r\n            <FormGroup>\r\n              <Label for=\"name\">Name</Label>\r\n              <Input\r\n                onChange={event => checkValidation(event)}\r\n                type=\"text\"\r\n                name=\"name\"\r\n                id=\"name\"\r\n                placeholder=\"Application Instance Name\"\r\n                innerRef={nameRef}\r\n                valid={nameValidation}\r\n                invalid={\r\n                  nameValidation == null\r\n                    ? false\r\n                    : !nameValidation\r\n                }\r\n                required\r\n              />\r\n              <FormFeedback\r\n              >\r\n                Invalid Application Instance Name\r\n                  </FormFeedback>\r\n              <FormText>Name is required, minimum length is 5</FormText>\r\n            </FormGroup>\r\n            <FormGroup>\r\n              <Label for=\"appCode\">App Code</Label>\r\n              <Input\r\n                onChange={event => checkValidation(event)}\r\n                type=\"text\"\r\n                name=\"appCode\"\r\n                id=\"appCode\"\r\n                placeholder=\"Application code\"\r\n                innerRef={appCodeRef}\r\n                valid={appCodeValidation}\r\n                invalid={\r\n                  appCodeValidation == null\r\n                    ? false\r\n                    : !appCodeValidation\r\n                }\r\n                required\r\n              />\r\n              <FormFeedback\r\n              // valid={\r\n              //   this.validateIPaddress(this.state)\r\n              // }\r\n              // tooltip\r\n              >\r\n                Invalid App Code\r\n                  </FormFeedback>\r\n              <FormText>App Code is required, minimum length is 5</FormText>\r\n            </FormGroup>\r\n\r\n\r\n            <FormGroup id=\"applicationSelect\">\r\n              <Label for=\"applicationSelect\">Application</Label>\r\n              <Input\r\n                type=\"select\"\r\n                id=\"applicationSelect\"\r\n                name=\"applicationSelect\"\r\n                innerRef={applicationSelectRef}\r\n              >\r\n                {/* <option value={0}>Choose Application</option> */}\r\n                {applicationList && applicationList.length ?\r\n                  applicationList.map(application => {\r\n                    return <option key={uuidv1()} value={application.id}>{application.name}</option>\r\n                  }) : null\r\n                }\r\n\r\n              </Input>\r\n              {/* <FormText>Choose an exist application as application master</FormText> */}\r\n            </FormGroup>\r\n\r\n          </Form>\r\n        </ModalBody>\r\n        <ModalFooter>\r\n          <Button\r\n            disabled={!validation()}\r\n            color=\"primary\"\r\n            onClick={e => create(e)}\r\n          >\r\n            Create New ApplicationInstance\r\n          </Button>{\" \"}\r\n          <Button color=\"secondary\" onClick={toggleCreateModal}>\r\n            Cancel\r\n          </Button>\r\n        </ModalFooter>\r\n      </Modal>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst arePropsEqual = (prevProps, nextProps) => {\r\n  return prevProps === nextProps;\r\n};\r\n// Wrap component using `React.memo()` and pass `arePropsEqual`\r\nexport default memo(ApplicationInstanceRegistrationModal, arePropsEqual);\r\n","import React, {\r\n  Component\r\n} from \"react\";\r\n//  set up proptype\r\nimport PropTypes from \"prop-types\";\r\n//  reacttrap component\r\n// import {\r\n//   Button,\r\n//   Modal,\r\n//   ModalHeader,\r\n//   ModalBody,\r\n//   ModalFooter,\r\n//   Col,\r\n//   Row,\r\n//   Form,\r\n//   FormGroup,\r\n//   Label,\r\n//   Input,\r\n//   FormFeedback,\r\n//   FormText\r\n// } from \"reactstrap\";\r\n\r\n//  redux component\r\n//  set up redux\r\nimport {\r\n  connect\r\n} from \"react-redux\";\r\nimport {\r\n  withRouter\r\n} from \"react-router-dom\";\r\nimport Action from \"../../../redux/Action/index.js\";\r\n\r\n//  presentation component\r\nimport ApplicationInstanceRegistrationModal from \"./ApplicationInstanceRegistrationModal.jsx\";\r\n\r\n//const uuidv1 = require(\"uuid/v1\");\r\n\r\n//  compose function:\r\n//  - (...fns): array all function need to compose\r\n//  - x: collection / input value\r\n//  - reduceRight: array loop function, from right to left (last -> last - 1 -> last - 2 -> ...)\r\n//  =>  (y, f) => f(y), x === (previousValue, currentFunction) => currentFunction(previousValue), x\r\n//  =>  take last function in collectionFunction fns, use innitial value x, return value (y)\r\n//  =>  [a, b, c] => reduceRight((y, f) => f(y), x) === a(b(c))\r\nconst compose = (...fns) => x => fns.reduceRight((y, f) => f(y), x);\r\n\r\n//  Validation secction\r\n//  ApplicationInstance Name validation\r\nconst validateName = ({\r\n  name\r\n}) => {\r\n  return name ? name.length <= 300 && name.length >= 5 : false;\r\n};\r\n//  Server start Date validation\r\nconst validateAppCode = ({\r\n  appCode\r\n}) => {\r\n  return appCode ? appCode.length <= 300 && appCode.length >= 5 : false;\r\n};\r\n\r\n\r\n//  propType\r\nconst propsProTypes = {\r\n  //  modal toggle\r\n  modal: PropTypes.bool,\r\n  toggleCreateModal: PropTypes.func,\r\n\r\n  //  list server master\r\n  serverMasterList: PropTypes.array,\r\n\r\n  //  create new server func\r\n  createNewApplicationInstance: PropTypes.func,\r\n\r\n  //  validation func\r\n  validation: PropTypes.bool,\r\n  validateName: PropTypes.func,\r\n  validateAppCode: PropTypes.func,\r\n};\r\n\r\nconst propsDefault = {\r\n  modal: false,\r\n  toggleCreateModal: () => {},\r\n  serverMasterList: [],\r\n  createNewApplicationInstance: () => {},\r\n\r\n  validateName: validateName,\r\n  validateAppCode: validateAppCode,\r\n};\r\n\r\nclass ApplicationInstanceRegistrationModalContainer extends Component {\r\n  static propTypes = propsProTypes;\r\n  static defaultProps = propsDefault;\r\n  render() {\r\n    return ( <\r\n      ApplicationInstanceRegistrationModal fromProps = {\r\n        this.props\r\n      }\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n  return {\r\n    modal: state.ApplicationInstance.toggleCreateModal,\r\n    serverMasterList: state.Server.currentServerMasterList,\r\n    own: ownProps,\r\n    applicationList: state.Application.currentDataList,\r\n\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch, ownProps) => ({\r\n  toggleCreateModal: () => {\r\n    dispatch(Action.ApplicationInstance.toggleCreateModal);\r\n  },\r\n\r\n  // getData: () => {\r\n  //   dispatch(Action.Application.getData());\r\n  // },\r\n\r\n  createNewApplicationInstance: async ApplicationInstance => {\r\n    if (ApplicationInstance) {\r\n      //     console.log(ownProps);\r\n      await dispatch(Action.ApplicationInstance.createNewApplicationInstance(ApplicationInstance));\r\n      await dispatch(Action.ApplicationInstance.getData());\r\n      dispatch(Action.ApplicationInstance.toggleCreateModal);\r\n    }\r\n  },\r\n\r\n  dispatch\r\n});\r\n\r\n//  compose all redux HOC\r\nconst enhance = compose(\r\n  withRouter,\r\n  connect(mapStateToProps, mapDispatchToProps, null)\r\n);\r\n\r\nexport default enhance(ApplicationInstanceRegistrationModalContainer);","//  reactstrap component\r\nimport {\r\n  Button,\r\n  Modal,\r\n  ModalHeader,\r\n  ModalBody,\r\n  ModalFooter,\r\n  Col,\r\n  Row,\r\n  Form,\r\n  FormGroup,\r\n  Label,\r\n  Input,\r\n  FormFeedback,\r\n  FormText,\r\n  //Button\r\n} from \"reactstrap\";\r\n//  pure component: memo\r\nimport React, { memo, useState } from \"react\";\r\n\r\n\r\nconst uuidv1 = require(\"uuid/v1\");\r\n\r\nconst ApplicationInstanceInformationModal = ({ fromProps }) => {\r\n  let {\r\n    modal,\r\n    toggleInformationModal,\r\n    applicationList = [],\r\n    appInsList,\r\n    validateName,\r\n    validateAppCode,\r\n    validateVersion,\r\n    validateDescription,\r\n    validateConfigUrl,\r\n    validateReleaseUrl,\r\n\r\n    applicationInstance: {\r\n      id = 1,\r\n      application_version = 0,\r\n      config_url = \"string\",\r\n      description = \"string\",\r\n      name = \"string\",\r\n      release_url = \"string\",\r\n      app_code = \"string\",\r\n      app\r\n    }\r\n  } = fromProps;\r\n\r\n  //  close button\r\n  const closeBtn = (\r\n    <button className=\"close\" onClick={toggleInformationModal}>\r\n      &times;\r\n    </button>\r\n  );\r\n\r\n  //  ref to general information\r\n  const nameRef = React.createRef();\r\n  const appCodeRef = React.createRef();\r\n  const versionRef = React.createRef();\r\n  const configUrlRef = React.createRef();\r\n  const releaseUrlRef = React.createRef();\r\n  const descriptionRef = React.createRef();\r\n\r\n  //  Validation state\r\n  const [nameValidation, setNameValidation] = useState(true);\r\n  const [appCodeValidation, setAppCodeValidation] = useState(true);\r\n  const [versionValidation, setVersionValidation] = useState(true);\r\n  const [configUrlValidation, setConfigUrlValidation] = useState(true);\r\n  const [releaseUrlValidation, setReleaseValidation] = useState(true);\r\n  const [descriptionValidation, setDescriptionValidation] = useState(true);\r\n\r\n  //  validate value from each input and store value into state\r\n  const checkValidation = async event => {\r\n    const name = event.target.name;\r\n    const value =\r\n      event.target.type === \"checkbox\"\r\n        ? event.target.checked\r\n        : event.target.value;\r\n\r\n    switch (name) {\r\n      case \"applicationName\":\r\n        setNameValidation(validateName({ [name]: value }));\r\n        break;\r\n\r\n      case \"appCode\":\r\n        setAppCodeValidation(validateAppCode({ [name]: value, app_code: app_code, appInsList }));\r\n        break;\r\n\r\n      case \"version\":\r\n        setVersionValidation(validateVersion({ [name]: value }));\r\n        break;\r\n\r\n      case \"configUrl\":\r\n        setConfigUrlValidation(validateConfigUrl({ [name]: value }));\r\n        break;\r\n\r\n      case \"releaseUrl\":\r\n        setReleaseValidation(validateReleaseUrl({ [name]: value }));\r\n        break;\r\n\r\n      case \"description\":\r\n        setDescriptionValidation(validateDescription({ [name]: value }));\r\n        break;\r\n\r\n      default:\r\n        break;\r\n    }\r\n  };\r\n\r\n  //  check validation\r\n  const generalInformationValidation = () => {\r\n    return nameValidation &&\r\n      appCodeValidation &&\r\n      versionValidation &&\r\n      configUrlValidation &&\r\n      releaseUrlValidation &&\r\n      descriptionValidation;\r\n  };\r\n\r\n  //  update application information\r\n  const updateApplicationInstanceInformation = event => {\r\n    event.preventDefault();\r\n    const applicationInstance = {\r\n      \"id\": id,\r\n      \"application_version\": versionRef.current.value,\r\n      \"config_url\": configUrlRef.current.value,\r\n      \"description\":descriptionRef.current.value,\r\n      \"name\":nameRef.current.value,\r\n      \"release_url\": releaseUrlRef.current.value,\r\n      \"app_code\": appCodeRef.current.value\r\n    };\r\n    fromProps.updateApplicationInstanceGeneralInformation(applicationInstance);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Modal\r\n        isOpen={modal}\r\n        toggle={toggleInformationModal}\r\n        // modalTransition={{ timeout: 1000 }}\r\n        // backdropTransition={{ timeout: 1500 }}\r\n        className={`modal-dialog modal-lg modal-dialog-centered modal-dialog-scrollable`}\r\n      >\r\n        <ModalHeader toggle={() => this.toggle()} close={closeBtn}>\r\n          ApplicationInstance INFORMATION\r\n        </ModalHeader>\r\n        <ModalBody>\r\n          <Form>\r\n            <FormGroup>\r\n              <Label for=\"name\">Name</Label>\r\n              <Input\r\n                onChange={event => checkValidation(event)}\r\n                type=\"text\"\r\n                name=\"name\"\r\n                id=\"name\"\r\n                placeholder=\"Application Instance Name\"\r\n                defaultValue={name}\r\n                innerRef={nameRef}\r\n                valid={nameValidation}\r\n                invalid={\r\n                  nameValidation == null\r\n                    ? false\r\n                    : !nameValidation\r\n                }\r\n                required\r\n              />\r\n              <FormFeedback >\r\n                Invalid Application Instance Name\r\n                  </FormFeedback>\r\n              <FormText>Name is required, minimum length is 5</FormText>\r\n            </FormGroup>\r\n\r\n            <Row form>\r\n              <Col md={6}>\r\n                <FormGroup>\r\n                  <Label for=\"appCode\">App Code</Label>\r\n                  <Input\r\n                    onChange={event => checkValidation(event)}\r\n                    type=\"text\"\r\n                    name=\"appCode\"\r\n                    id=\"appCode\"\r\n                    placeholder=\"Application Instance Code\"\r\n                    defaultValue={app_code}\r\n                    innerRef={appCodeRef}\r\n                    valid={appCodeValidation}\r\n                    invalid={\r\n                      appCodeValidation == null\r\n                        ? false\r\n                        : !appCodeValidation\r\n                    }\r\n                    required\r\n                  />\r\n                  <FormFeedback  >\r\n                    Invalid App Code\r\n                  </FormFeedback>\r\n                  <FormText>App Code is required, minimum length is 5</FormText>\r\n                </FormGroup>\r\n              </Col>\r\n\r\n              <Col md={6}>\r\n                <FormGroup>\r\n                  <Label for=\"version\">Version</Label>\r\n                  <Input\r\n                    onChange={event => checkValidation(event)}\r\n                    type=\"text\"\r\n                    name=\"version\"\r\n                    id=\"version\"\r\n                    placeholder=\"Version\"\r\n                    defaultValue={application_version}\r\n                    innerRef={versionRef}\r\n                    valid={versionValidation}\r\n                    invalid={\r\n                      versionValidation == null\r\n                        ? false\r\n                        : !versionValidation\r\n                    }\r\n                    required\r\n                  />\r\n                  <FormFeedback\r\n                  >\r\n                    Invalid App Code\r\n                  </FormFeedback>\r\n                  <FormText>App Code is required, minimum length is 5</FormText>\r\n                </FormGroup>\r\n              </Col>\r\n            </Row>\r\n\r\n            <FormGroup id=\"applicationSelect\">\r\n              <Label for=\"applicationSelect\">Application</Label>\r\n              <Input\r\n                type=\"select\"\r\n                id=\"applicationSelect\"\r\n                name=\"applicationSelect\"\r\n                defaultValue={app.id}\r\n                disabled\r\n              >\r\n                <option value={0}>Choose Application</option>\r\n                {applicationList && applicationList.length ?\r\n                  applicationList.map(application => {\r\n                    return <option key={uuidv1()} value={application.id}>{application.name}</option>\r\n                  }) : null\r\n                }\r\n\r\n              </Input>\r\n              {/* <FormText>Choose an exist application as application master</FormText> */}\r\n            </FormGroup>\r\n\r\n            <FormGroup>\r\n              <Label for=\"configUrl\">Configuration Url</Label>\r\n              <Input\r\n                onChange={event => checkValidation(event)}\r\n                type=\"text\"\r\n                name=\"configUrl\"\r\n                id=\"configUrl\"\r\n                placeholder=\"https://www.localhost:8084\"\r\n                innerRef={configUrlRef}\r\n                defaultValue={config_url}\r\n                valid={configUrlValidation}\r\n                invalid={\r\n                  configUrlValidation == null\r\n                    ? false\r\n                    : !configUrlValidation\r\n                }\r\n              />\r\n              <FormFeedback>Invalid Configuration Url</FormFeedback>\r\n              <FormText>Eq: www.google.com</FormText>\r\n            </FormGroup>\r\n\r\n            <FormGroup>\r\n              <Label for=\"releaseUrl\">Release Url</Label>\r\n              <Input\r\n                onChange={event => checkValidation(event)}\r\n                type=\"text\"\r\n                name=\"releaseUrl\"\r\n                id=\"releaseUrl\"\r\n                defaultValue={release_url}\r\n                placeholder=\"https://www.localhost:8084\"\r\n                innerRef={releaseUrlRef}\r\n                valid={releaseUrlValidation}\r\n                invalid={\r\n                  releaseUrlValidation == null\r\n                    ? false\r\n                    : !releaseUrlValidation\r\n                }\r\n              />\r\n              <FormFeedback>Invalid Release Url</FormFeedback>\r\n              <FormText>Eq: www.google.com</FormText>\r\n            </FormGroup>\r\n\r\n            <FormGroup>\r\n              <Label for=\"description\">Description</Label>\r\n              <Col sm={12}>\r\n                <Input\r\n                  onChange={event => checkValidation(event)}\r\n                  type=\"textarea\"\r\n                  name=\"description\"\r\n                  id=\"description\"\r\n                  innerRef={descriptionRef}\r\n                  valid={descriptionValidation}\r\n                  invalid={\r\n                    descriptionValidation == null\r\n                      ? false\r\n                      : !descriptionValidation\r\n                  }\r\n                  defaultValue={description}\r\n                />\r\n              </Col>\r\n              <FormText>Max length is 256</FormText>\r\n            </FormGroup>\r\n\r\n          </Form>\r\n        </ModalBody>\r\n        <ModalFooter>\r\n          <Button\r\n            disabled={!generalInformationValidation()}\r\n            color=\"primary\"\r\n            onClick={e => updateApplicationInstanceInformation(e)}\r\n          >\r\n            Update Application Instance\r\n                  </Button>\r\n          {\" \"}\r\n          <Button color=\"secondary\" onClick={toggleInformationModal}>\r\n            Cancel\r\n          </Button>\r\n        </ModalFooter>\r\n      </Modal>\r\n\r\n\r\n    </div>\r\n  );\r\n};\r\n\r\nconst arePropsEqual = (prevProps, nextProps) => {\r\n  return prevProps === nextProps;\r\n};\r\n// Wrap component using `React.memo()` and pass `arePropsEqual`\r\nexport default memo(ApplicationInstanceInformationModal, arePropsEqual);\r\n","import React, {\r\n  Component\r\n} from \"react\";\r\n//  set up proptype\r\nimport PropTypes from \"prop-types\";\r\n//  reacttrap component\r\n// import {\r\n//   Button,\r\n//   Modal,\r\n//   ModalHeader,\r\n//   ModalBody,\r\n//   ModalFooter,\r\n//   Col,\r\n//   Row,\r\n//   Form,\r\n//   FormGroup,\r\n//   Label,\r\n//   Input,\r\n//   FormFeedback,\r\n//   FormText\r\n// } from \"reactstrap\";\r\n\r\n//  redux component\r\n//  set up redux\r\nimport {\r\n  connect\r\n} from \"react-redux\";\r\nimport {\r\n  withRouter\r\n} from \"react-router-dom\";\r\nimport Action from \"../../../redux/Action/index.js\";\r\n//  presentation component\r\nimport ApplicationInstanceInformationModal from \"./ApplicationInstanceInformationModal.jsx\";\r\n// const uuidv1 = require(\"uuid/v1\");\r\n//  compose function:\r\n//  - (...fns): array all function need to compose\r\n//  - x: collection / input value\r\n//  - reduceRight: array loop function, from right to left (last -> last - 1 -> last - 2 -> ...)\r\n//  =>  (y, f) => f(y), x === (previousValue, currentFunction) => currentFunction(previousValue), x\r\n//  =>  take last function in collectionFunction fns, use innitial value x, return value (y)\r\n//  =>  [a, b, c] => reduceRight((y, f) => f(y), x) === a(b(c))\r\nconst compose = (...fns) => x => fns.reduceRight((y, f) => f(y), x);\r\n\r\n//  Validation section\r\n//  ApplicationInstance Name validation\r\nconst validateName = ({\r\n  name = \"\"\r\n}) => {\r\n  return name ? name.length <= 200 && name.length > 4 : false;\r\n};\r\nconst validateAppCode = ({\r\n  appCode, app_code, appInsList\r\n}) => {\r\n  // console.log(\"validateAppCode \" + appCode + \" \" + app_code + \" \" + appInsList );\r\n  // console.log(appCode.length <= 200 && appCode.length > 4 && !appInsList.find(app => app.app_code === appCode && app.app_code !== app_code));\r\n  return appCode? \r\n  appCode === app_code :\r\n  appCode.length <= 200 && appCode.length > 4 && !appInsList.find(app => app.app_code === appCode && app.app_code !== app_code);\r\n};\r\nconst validateVersion = ({\r\n  version = \"\"\r\n}) => {\r\n  return version ? version.length <= 200 && version.length > 4 : false;\r\n};\r\nconst validateDescription = ({\r\n  description = \"\"\r\n}) => {\r\n  return description ? description.length <= 300 && description.length >= 0 : false;\r\n};\r\nconst validateConfigUrl = ({\r\n  configUrl = \"https://www.google.com\"\r\n}) => {\r\n  let regex = new RegExp(\r\n    \"^(http[s]?:\\\\/\\\\/(www\\\\.)?|ftp:\\\\/\\\\/(www\\\\.)?|(www\\\\.)?){1}([0-9A-Za-z-\\\\.@:%_+~#=]+)+((\\\\.[a-zA-Z]{2,3})+)(/(.)*)?(\\\\?(.)*)?\"\r\n  );\r\n  return regex.test(configUrl) || configUrl.length === 0;\r\n};\r\nconst validateReleaseUrl = ({\r\n  releaseUrl = \"https://www.google.com\"\r\n}) => {\r\n  let regex = new RegExp(\r\n    \"^(http[s]?:\\\\/\\\\/(www\\\\.)?|ftp:\\\\/\\\\/(www\\\\.)?|(www\\\\.)?){1}([0-9A-Za-z-\\\\.@:%_+~#=]+)+((\\\\.[a-zA-Z]{2,3})+)(/(.)*)?(\\\\?(.)*)?\"\r\n  );\r\n  return regex.test(releaseUrl) || releaseUrl.length === 0;\r\n};\r\n\r\n//  propType\r\nconst propsProTypes = {\r\n  //  modal toggle\r\n  modal: PropTypes.bool,\r\n  toggleCreateModal: PropTypes.func,\r\n\r\n  //  default value\r\n  application: PropTypes.object,\r\n\r\n  //  create new server func\r\n  createNewApplicationInstance: PropTypes.func,\r\n\r\n  //  validation func\r\n  validation: PropTypes.bool,\r\n  validateName: PropTypes.func,\r\n  validateAppCode: PropTypes.func,\r\n  validateVersion: PropTypes.func,\r\n  validateDescription: PropTypes.func,\r\n  validateConfigUrl: PropTypes.func,\r\n  validateReleaseUrl: PropTypes.func,\r\n\r\n};\r\n\r\nconst propsDefault = {\r\n  modal: false,\r\n  toggleCreateModal: () => {},\r\n  createNewApplicationInstance: () => {},\r\n\r\n  applicationInstance: {\r\n    \"id\": 1,\r\n    \"active\": true,\r\n    \"app_code\": \"number1\",\r\n    \"app_id\": 1,\r\n    \"application_version\": null,\r\n    \"config_url\": null,\r\n    \"create_time\": \"2020-03-12T00:00:00\",\r\n    \"description\": \"string\",\r\n    \"name\": \"Quan 1\",\r\n    \"release_url\": null,\r\n    \"update_time\": \"2020-03-12T00:00:00\",\r\n    \"app\": null,\r\n    \"log\": [],\r\n    \"manage_project\": []\r\n  },\r\n\r\n  validateName: validateName,\r\n  validateVersion: validateVersion,\r\n  validateAppCode: validateAppCode,\r\n  validateDescription: validateDescription,\r\n  validateConfigUrl: validateConfigUrl,\r\n  validateReleaseUrl: validateReleaseUrl,\r\n\r\n};\r\n\r\n\r\nclass ApplicationInstanceInformationModalContainer extends Component {\r\n  static propTypes = propsProTypes;\r\n  static defaultProps = propsDefault;\r\n\r\n  render() {\r\n    return ( <\r\n      ApplicationInstanceInformationModal fromProps = {\r\n        this.props\r\n      }\r\n      />\r\n\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n  return {\r\n    modal: state.Server.toggleInformationModal,\r\n    applicationList: state.Application.currentDataList,\r\n    own: ownProps,\r\n    applicationInstance: state.ApplicationInstance.currentDataList.find(\r\n      applicationInstance => applicationInstance.id === state.ApplicationInstance.currentSelectedApplicationInstance\r\n    ),\r\n    appInsList: state.ApplicationInstance.currentDataList,\r\n\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch, ownProps) => ({\r\n\r\n  toggleInformationModal: () => {\r\n    dispatch(Action.ApplicationInstance.toggleInformationModal);\r\n  },\r\n\r\n  updateApplicationInstanceGeneralInformation: async applicationInstance => {\r\n    if (applicationInstance.id) {\r\n      await dispatch(Action.ApplicationInstance.updateApplicationInstanceGeneralInformation(applicationInstance));\r\n      await dispatch(Action.ApplicationInstance.getData());\r\n    }\r\n  },\r\n\r\n  dispatch\r\n});\r\n\r\n//  compose all redux HOC\r\nconst enhance = compose(\r\n  withRouter,\r\n  connect(mapStateToProps, mapDispatchToProps, null)\r\n);\r\n\r\nexport default enhance(ApplicationInstanceInformationModalContainer);","import React, { memo } from \"react\";\r\nimport {\r\n  Badge,\r\n  DropdownMenu,\r\n  DropdownItem,\r\n  UncontrolledDropdown,\r\n  DropdownToggle,\r\n  Media,\r\n  Progress\r\n} from \"reactstrap\";\r\n\r\nconst Log = props => {\r\n  let {\r\n    data: {\r\n      id: serverId,\r\n      name: serverName,\r\n      ip_address: serverIp,\r\n      create_time: createDate,\r\n      active: status\r\n    },\r\n    disabled,\r\n    toggleInformationModal\r\n  } = props;\r\n  return (\r\n    <tr>\r\n      <th scope=\"row\">\r\n        <Media className=\"align-items-center\">\r\n          {/* <a\r\n            className=\"avatar rounded-circle mr-3\"\r\n            href=\"#pablo\"\r\n            onClick={e => e.preventDefault()}\r\n          >\r\n            <img alt=\"...\" src={require(\"assets/img/theme/bootstrap.jpg\")} />\r\n          </a> */}\r\n          <Media>\r\n            {/* <span className=\"mb-0 text-sm\">{createDate.slice(0,10) + \" \" + createDate.slice(12,23)}</span> */}\r\n            <span className=\"mb-0 text-sm\">{createDate}</span>\r\n          </Media>\r\n        </Media>\r\n      </th>\r\n      <td>{serverName}</td>\r\n      <td>\r\n        <Badge color=\"\" className=\"badge-dot mr-4\">\r\n          <i className=\"bg-warning\" />\r\n          {serverIp ? serverIp : \"192.168.1.1\"}\r\n        </Badge>\r\n      </td>\r\n      {/* <td>\r\n        {system_instance\r\n          ? \"0 Instances\"\r\n          : system_instance.length + \"Instances\"}\r\n      </td> */}\r\n      <td>\r\n        <div className=\"d-flex align-items-center\">\r\n          <span className=\"mr-2\">{status ? \"Active\" : \"Deactive\"}</span>\r\n          <div>\r\n            <Progress\r\n              max=\"100\"\r\n              value={status ? 100 : 0}\r\n              barClassName={status ? \"bg-info\" : \"bg-danger\"}\r\n            />\r\n          </div>\r\n        </div>\r\n      </td>\r\n      <td className=\"text-right\">\r\n        <UncontrolledDropdown>\r\n          <DropdownToggle\r\n            className=\"btn-icon-only text-light\"\r\n            href=\"#pablo\"\r\n            role=\"button\"\r\n            size=\"sm\"\r\n            color=\"\"\r\n            onClick={e => e.preventDefault()}\r\n          >\r\n            <i className=\"fas fa-ellipsis-v\" />\r\n          </DropdownToggle>\r\n          <DropdownMenu className=\"dropdown-menu-arrow\" right>\r\n            <DropdownItem\r\n              href=\"#pablo\"\r\n              onClick={e => toggleInformationModal(e, serverId)}\r\n            >\r\n              Update\r\n            </DropdownItem>\r\n            <DropdownItem href=\"#pablo\" onClick={e => disabled(e, serverId, !status)}>\r\n              {status ? \"Disable\" : \"Active\"}\r\n            </DropdownItem>\r\n            <DropdownItem href=\"#pablo\" onClick={e => e.preventDefault()}>\r\n              Something else here\r\n            </DropdownItem>\r\n          </DropdownMenu>\r\n        </UncontrolledDropdown>\r\n      </td>\r\n    </tr>\r\n  );\r\n};\r\n\r\nconst arePropsEqual = (prevProps, nextProps) => {\r\n  return prevProps === nextProps;\r\n};\r\n// Wrap component using `React.memo()` and pass `arePropsEqual`\r\nexport default memo(Log, arePropsEqual);\r\n","import React, { Component } from \"react\";\r\n//  set up proptype\r\nimport PropTypes from \"prop-types\";\r\n//  redux component\r\n//  set up redux\r\nimport { connect } from \"react-redux\";\r\nimport { withRouter } from \"react-router-dom\";\r\nimport Action from \"./../../../redux/Action/index.js\";\r\n\r\n//  presentation component\r\nimport Log from \"./Log.jsx\";\r\nconst uuidv1 = require(\"uuid/v1\");\r\n//  compose function:\r\n//  - (...fns): array all function need to compose\r\n//  - x: collection / input value\r\n//  - reduceRight: array loop function, from right to left (last -> last - 1 -> last - 2 -> ...)\r\n//  =>  (y, f) => f(y), x === (previousValue, currentFunction) => currentFunction(previousValue), x\r\n//  =>  take last function in collectionFunction fns, use innitial value x, return value (y)\r\n//  =>  [a, b, c] => reduceRight((y, f) => f(y), x) === a(b(c))\r\nconst compose = (...fns) => x => fns.reduceRight((y, f) => f(y), x);\r\n\r\n//  propType\r\nconst propsProTypes = {\r\n  index: PropTypes.number,\r\n  data: PropTypes.array\r\n};\r\n\r\nconst propsDefault = {\r\n  index: 1,\r\n  data: []\r\n};\r\n\r\nclass LogContainer extends Component {\r\n  static propTypes = propsProTypes;\r\n  static defaultProps = propsDefault;\r\n  state = {\r\n    tableData: []\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.props.getData();\r\n  }\r\n\r\n  render() {\r\n    let { data = [], disabled, toggleInformationModal } = this.props;\r\n    return (\r\n      <>\r\n        {data.map((value, key) => {\r\n          return (\r\n            <Log\r\n              index={key}\r\n              key={uuidv1()}\r\n              data={value}\r\n              disabled={disabled}\r\n              toggleInformationModal={toggleInformationModal}\r\n            />\r\n          );\r\n        })}\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n  return {\r\n    data: state.Log.currentDataList,\r\n    own: ownProps\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch, ownProps) => ({\r\n  toggleInformationModal: (event, id) => {\r\n    event.preventDefault();\r\n    if (id) {\r\n      dispatch(Action.Log.storeCurrentSelectedLog(id));\r\n      dispatch(Action.Log.toggleInformationModal);\r\n    } \r\n  },\r\n  disabled: async (\r\n    event,\r\n    id,\r\n    active,\r\n  ) => {\r\n    event.preventDefault();\r\n    if (id) {\r\n      await dispatch(Action.Log.updateLogStatus(\r\n        id,\r\n        active\r\n      ));\r\n       dispatch(Action.Log.getData());\r\n    }\r\n  },\r\n  getData: async () => {\r\n    await dispatch(Action.Log.getData());\r\n  },\r\n\r\n  dispatch\r\n});\r\n\r\n//  compose all redux HOC\r\nconst enhance = compose(\r\n  withRouter,\r\n  connect(mapStateToProps, mapDispatchToProps, null)\r\n);\r\n\r\nexport default enhance(LogContainer);\r\n","//  presentation component\nimport Index from \"./components/contents/Index.jsx\";\nimport ProfileContainer from \"./components/contents/Profile/ProfileContainer.js\";\n// import Maps from \"./components/contents/views/Maps.jsx\";\nimport RegisterContainer from \"./components/contents/Login/RegisterContainer.js\";\nimport Login from \"./components/contents/Login/Login.jsx\";\nimport PasswordResetToken from \"./components/contents/Login/PasswordResetToken.jsx\";\nimport PasswordReset from \"./components/contents/Login/PasswordReset.jsx\";\nimport Logout from \"./components/contents/views/Logout.jsx\";\n// import Tables from \"./components/contents/views/Tables.jsx\";\n// import Icons from \"./components/contents/views/Icons.jsx\";\n\n//  table component\n//  server\nimport ServerContainer from \"./components/contents/Server/ServerContainer.js\";\nimport ServerRegistrationModalContainer from \"./components/contents/Server/ServerRegistrationModalContainer.js\";\nimport ServerInformationModalContainer from \"./components/contents/Server/ServerInformationModalContainer.js\";\n//  employee\nimport EmployeeContainer from \"./components/contents/Employee/EmployeeContainer.js\";\nimport EmployeeRegistrationModalContainer from \"./components/contents/Employee/EmployeeRegistrationModalContainer.js\";\nimport EmployeeInformationModalContainer from \"./components/contents/Employee/EmployeeInformationModalContainer.js\";\n//  application\nimport ApplicationContainer from \"./components/contents/Application/ApplicationContainer.js\";\nimport ApplicationRegistrationModalContainer from \"./components/contents/Application/ApplicationRegistrationModalContainer.js\";\nimport ApplicationInformationModalContainer from \"./components/contents/Application/ApplicationInformationModalContainer.js\";\n//  application instance\nimport ApplicationInstanceContainer from \"./components/contents/ApplicationInstance/ApplicationInstanceContainer.js\";\nimport ApplicationInstanceRegistrationModalContainer from \"./components/contents/ApplicationInstance/ApplicationInstanceRegistrationModalContainer.js\";\nimport ApplicationInstanceInformationModalContainer from \"./components/contents/ApplicationInstance/ApplicationInstanceInformationModalContainer.js\";\n//  log\nimport LogContainer from \"./components/contents/Log/LogContainer.js\";\n//  all auto action in the 1st time component active\nimport Action from \"./redux/Action/index.js\";\n\n\nexport default [{\n    path: \"/index\",\n    name: \"Dashboard\",\n    icon: \"ni ni-tv-2 text-primary\",\n    component: Index,\n    layout: \"/admin\",\n    type: \"\",\n    role: \"/admin\",\n    section: \"dynamic\"\n  },\n  {\n    path: \"/application-instances\",\n    name: \"Application Instances\",\n    icon: \" ni ni-archive-2 text-blue\",\n    component: ApplicationInstanceContainer,\n    layout: \"/admin\",\n    type: \"table\",\n    Action: Action.ApplicationInstance,\n    header: [\n      \"LAST UPDATE\",\n      \"APPLICATION INSTANCE NAME\",\n      \"APPLICATION\",\n      \"APP CODE\",\n      \"STATUS\",\n      \"ACTION\"\n    ],\n    RegistrationModal: ApplicationInstanceRegistrationModalContainer,\n    DetailModal: ApplicationInstanceInformationModalContainer,\n    role: \"/admin\",\n    section: \"dynamic\",\n  },\n  {\n    path: \"/log-reports\",\n    name: \"Log Reports\",\n    icon: \" ni ni-paper-diploma text-blue\",\n    component: LogContainer,\n    layout: \"/admin\",\n    type: \"table\",\n    Action: Action.Log,\n    header: [\n      \"LOG DATE\",\n      \"PROJECT\",\n      \"CLASS\",\n      \"LINE\",\n      \"MESSAGE\",\n      \"STATUS\",\n      \"ACTION\"\n    ],\n    RegistrationModal: ServerRegistrationModalContainer,\n    DetailModal: ServerInformationModalContainer,\n\n    section: \"dynamic\",\n\n    role: \"/admin\"\n  },\n  {\n    path: \"/servers\",\n    name: \"Servers\",\n    icon: \" ni ni-money-coins text-blue\",\n    component: ServerContainer,\n    layout: \"/admin\",\n    type: \"table\",\n    Action: Action.Server,\n    header: [\n      \"CREATE TIME\",\n      \"SERVER NAME\",\n      \"IP\",\n      \"STATUS\",\n      \"ACTION\"\n    ],\n    RegistrationModal: ServerRegistrationModalContainer,\n    DetailModal: ServerInformationModalContainer,\n    role: \"/admin\",\n    section: \"static\",\n  },\n  {\n    path: \"/applications\",\n    name: \"Applications\",\n    icon: \" ni ni-app text-blue\",\n    component: ApplicationContainer,\n    layout: \"/admin\",\n    type: \"table\",\n    Action: Action.Application,\n    header: [\n      \"LAST UPDATE\",\n      \"NAME\",\n      \"CATEGORY\",\n      \"APPLICATION INSTANCE\",\n      \"STATUS\",\n      \"ACTION\"\n    ],\n    RegistrationModal: ApplicationRegistrationModalContainer,\n    DetailModal: ApplicationInformationModalContainer,\n    role: \"/admin\",\n    section: \"static\",\n  },\n  {\n    path: \"/employees\",\n    name: \"Employees\",\n    icon: \"ni ni-circle-08 text-pink\",\n    component: EmployeeContainer,\n    layout: \"/admin\",\n    type: \"table\",\n    Action: Action.Employee,\n    header: [\n      \"NAME\",\n      \"EMAIL\",\n      \"PHONE\",\n      \"ROLE\",\n      \"STATUS\",\n      \"ACTION\"\n    ],\n    RegistrationModal: EmployeeRegistrationModalContainer,\n    DetailModal: EmployeeInformationModalContainer,\n    isEndRoute: true,\n    role: \"/admin\",\n    section: \"static\",\n  },\n  {\n    path: \"/user-profile\",\n    name: \"User Profile\",\n    icon: \"ni ni-single-02 text-yellow\",\n    component: ProfileContainer,\n    layout: \"/admin\",\n    type: \"\",\n    role: \"/admin\",\n    section: \"profile\",\n  },\n  // {\n  //   path: \"/icons\",\n  //   name: \"Icons\",\n  //   icon: \"ni ni-planet text-blue\",\n  //   component: Icons,\n  //   layout: \"/admin\",\n  //   type: \"\",\n  // role: \"/admin\"\n  // },\n  // {\n  //   path: \"/maps\",\n  //   name: \"Maps\",\n  //   icon: \"ni ni-square-pin text-orange\",\n  //   component: Maps,\n  //   layout: \"/admin\",\n  //   type: \"\",\n  // role: \"/admin\"\n  // },\n\n  // {\n  //   path: \"/tables\",\n  //   name: \"Tables\",\n  //   icon: \"ni ni-bullet-list-67 text-red\",\n  //   component: Tables,\n  //   layout: \"/admin\",\n  //   type: \"\",\n  // role: \"/admin\"\n  // },\n  {\n    path: \"/login\",\n    name: \"Login\",\n    icon: \"ni ni-key-25 text-info\",\n    component: Login,\n    layout: \"/auth\",\n    type: \"\",\n    role: \"/guest\",\n    section: \"profile\",\n  },\n  {\n    path: \"/logout\",\n    name: \"Back To Login\",\n    icon: \"ni ni-key-25 text-info\",\n    component: Logout,\n    layout: \"/admin\",\n    type: \"\",\n    role: \"/admin\",\n    section: \"profile\",\n  },\n  {\n    path: \"/register\",\n    name: \"Register\",\n    icon: \"ni ni-circle-08 text-pink\",\n    component: RegisterContainer,\n    layout: \"/auth\",\n    type: \"\",\n    role: \"/guest\",\n    section: \"profile\",\n  },\n  {\n    path: \"/password-token\",\n    name: \"Password Token\",\n    icon: \"ni ni-circle-08 text-pink\",\n    component: PasswordResetToken,\n    layout: \"/auth\",\n    type: \"\",\n    role: \"/guest\",\n    section: \"profile\",\n  },\n  {\n    path: \"/password-reset\",\n    name: \"Password Reset\",\n    icon: \"ni ni-circle-08 text-pink\",\n    component: PasswordReset,\n    layout: \"/auth\",\n    type: \"\",\n    role: \"/guest\",\n    section: \"profile\",\n  },\n];","import React, { Component } from \"react\";\r\n//  set up proptype\r\nimport PropTypes from \"prop-types\";\r\n//  redux component\r\n//  set up redux\r\nimport { connect } from \"react-redux\";\r\nimport { withRouter } from \"react-router-dom\";\r\nimport Action from \"./../../../redux/Action/index.js\";\r\nimport {\r\n    Button,\r\n    Modal,\r\n    ModalHeader,\r\n    ModalBody,\r\n    ModalFooter,\r\n    Col,\r\n    Row,\r\n    Form,\r\n    FormGroup,\r\n    Label,\r\n    Input,\r\n    FormFeedback,\r\n    FormText,\r\n  \r\n    //  React tab\r\n    TabContent,\r\n    TabPane,\r\n    Nav,\r\n    NavItem,\r\n    NavLink,\r\n    Card,\r\n    CardTitle,\r\n    CardText\r\n    //Button\r\n  } from \"reactstrap\";\r\n//  presentation component\r\nconst uuidv1 = require(\"uuid/v1\");\r\n//  compose function:\r\n//  - (...fns): array all function need to compose\r\n//  - x: collection / input value\r\n//  - reduceRight: array loop function, from right to left (last -> last - 1 -> last - 2 -> ...)\r\n//  =>  (y, f) => f(y), x === (previousValue, currentFunction) => currentFunction(previousValue), x\r\n//  =>  take last function in collectionFunction fns, use innitial value x, return value (y)\r\n//  =>  [a, b, c] => reduceRight((y, f) => f(y), x) === a(b(c))\r\nconst compose = (...fns) => x => fns.reduceRight((y, f) => f(y), x);\r\n\r\n//  propType\r\nconst propsProTypes = {\r\n    index: PropTypes.number,\r\n    data: PropTypes.array\r\n};\r\n\r\nconst propsDefault = {\r\n    index: 1,\r\n    data: []\r\n};\r\n\r\nclass LogSelection extends Component {\r\n    static propTypes = propsProTypes;\r\n    static defaultProps = propsDefault;\r\n    state = {\r\n        tableData: []\r\n    };\r\n\r\n    componentDidMount() {\r\n        this.props.getData();\r\n    }\r\n\r\n    render() {\r\n        let { data = [], disabled, toggleInformationModal } = this.props;\r\n        return (\r\n            <>\r\n                <FormGroup>\r\n                    <Input\r\n                        type=\"select\"\r\n                        id=\"appInstancerSelect\"\r\n                        name=\"appInstancerSelect\"\r\n                    >\r\n                        <option value={0}>Choose Application Instance</option>\r\n                        {data\r\n                            ? data.map(appInstance => {\r\n                                return (\r\n                                    <option key={uuidv1()} value={appInstance.id}>\r\n                                        {appInstance.name}\r\n                                    </option>\r\n                                );\r\n                            })\r\n                            : null}\r\n                    </Input>\r\n                </FormGroup>\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n    return {\r\n        data: state.ApplicationInstance.currentDataList,\r\n        own: ownProps\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch, ownProps) => ({\r\n    toggleInformationModal: (event, id) => {\r\n        event.preventDefault();\r\n        if (id) {\r\n            dispatch(Action.Log.storeCurrentSelectedLog(id));\r\n            dispatch(Action.Log.toggleInformationModal);\r\n        }\r\n    },\r\n    disabled: async (\r\n        event,\r\n        id,\r\n        active,\r\n    ) => {\r\n        event.preventDefault();\r\n        if (id) {\r\n            await dispatch(Action.Log.updateLogStatus(\r\n                id,\r\n                active\r\n            ));\r\n            dispatch(Action.Log.getData());\r\n        }\r\n    },\r\n    getData: async () => {\r\n        await dispatch(Action.ApplicationInstance.getData());\r\n    },\r\n\r\n    dispatch\r\n});\r\n\r\n//  compose all redux HOC\r\nconst enhance = compose(\r\n    withRouter,\r\n    connect(mapStateToProps, mapDispatchToProps, null)\r\n);\r\n\r\nexport default enhance(LogSelection);\r\n","import React, { memo } from \"react\";\r\n//reactstrap components\r\nimport {\r\n  Card,\r\n  CardHeader,\r\n  DropdownMenu,\r\n  DropdownItem,\r\n  UncontrolledDropdown,\r\n  DropdownToggle,\r\n  Media,\r\n  Nav,\r\n  NavLink,\r\n  NavItem,\r\n  Progress,\r\n  Table,\r\n  Container,\r\n  Row,\r\n  UncontrolledTooltip\r\n  // Button,\r\n  // Modal,\r\n  // ModalHeader,\r\n  // ModalBody,\r\n  // ModalFooter\r\n} from \"reactstrap\";\r\n// import ServerDetailModal from \"./../contents/Server/ServerDetailModal.js\";\r\n// import NewServerModal from \"./../contents/Server/NewServerModal.js\";\r\n// core components\r\nimport Header from \"./../layouts/Headers/Header.jsx\";\r\nimport LogSelecttion from \"./../contents/Log/LogSelection\";\r\nconst uuidv1 = require(\"uuid/v1\");\r\n\r\nconst TablePresentation = props => {\r\n  // return class extends Component {\r\n  //   render() {\r\n\r\n  let {\r\n    WrappedComponent,\r\n    RegistrationModal,\r\n    DetailModal,\r\n    header,\r\n    toggleCreateModal,\r\n    name\r\n  } = props;\r\n  // console.log(\"TablePresentation \", JSON.stringify(props));\r\n  // const closeBtn = (\r\n  //   <button className=\"close\" onClick={() => toggleCreateModal()}>\r\n  //     &times;\r\n  //   </button>\r\n  // );\r\n\r\n  return (\r\n    <>\r\n      <Header />\r\n      {/* Page Content */}\r\n      <Container className=\"mt--7\" fluid>\r\n        <Row>\r\n          <div className=\"col\">\r\n            <Card className=\"shadow\">\r\n              <CardHeader className=\"bg-transparent\">\r\n                <Row className=\"align-items-center\">\r\n                  <div className=\"col\">\r\n                    <h4 className=\"text-uppercase text-light ls-1 mb-1\">\r\n                      OVERVIEW\r\n                    </h4>\r\n                    <h2 className=\"text-dark mb-0\">\r\n                      <span className=\"d-none d-md-block\">{name}</span>\r\n                      <span className=\"d-md-none\">S</span>\r\n                    </h2>\r\n                  </div>\r\n                  <div className=\"col\">\r\n                  {name === \"Log Reports\" ? <LogSelecttion /> : \r\n                    <Nav className=\"justify-content-end\" pills>\r\n                      {/* <NavItem>\r\n                        <NavLink\r\n                          className={`classnames(\"py-2 px-3\", {\r\n                                active: this.state.activeNav === 1\r\n                              })`}\r\n                          href=\"#pablo\"\r\n                          //  onClick={e => this.toggleNavs(e, 1)}\r\n                        >\r\n                          <span className=\"d-none d-md-block\">By Date</span>\r\n                          <span className=\"d-md-none\">D</span>\r\n                        </NavLink>\r\n                      </NavItem> */}\r\n                     \r\n                      <NavItem>\r\n                        <NavLink\r\n                          className={`classnames(\"py-2 px-3\", {\r\n                            active: this.state.activeNav === 2\r\n                          })`}\r\n                          data-toggle=\"tab\"\r\n                          href=\"#pablo\"\r\n                          onClick={toggleCreateModal}\r\n                        >\r\n                          <span className=\"d-none d-md-block\">Create New</span>\r\n                          <span className=\"d-md-none\">C</span>\r\n                        </NavLink>\r\n                        <div>\r\n                          {/* <NewServerModal /> */}\r\n                          <RegistrationModal />\r\n                          <DetailModal />\r\n                        </div>\r\n                      </NavItem>\r\n                    </Nav>}\r\n                  </div>\r\n                </Row>\r\n              </CardHeader>\r\n              <Table className=\"align-items-center table-flush\" responsive>\r\n                <thead className=\"thead-light\">\r\n                  <tr>\r\n                    {header.map((header, key) => (\r\n                      <th scope=\"col\" key={uuidv1()}>\r\n                        {header}\r\n                      </th>\r\n                    ))}\r\n                  </tr>\r\n                </thead>\r\n                <tbody>\r\n                  {/* <tr>\r\n                    <th scope=\"row\">\r\n                      <Media className=\"align-items-center\">\r\n                        <a\r\n                          className=\"avatar rounded-circle mr-3\"\r\n                          href=\"#pablo\"\r\n                          onClick={e => e.preventDefault()}\r\n                        >\r\n                          <img\r\n                            alt=\"...\"\r\n                            src={require(\"assets/img/theme/bootstrap.jpg\")}\r\n                          />\r\n                        </a>\r\n                        <Media>\r\n                          <span className=\"mb-0 text-sm\">\r\n                            Argon Design System\r\n                          </span>\r\n                        </Media>\r\n                      </Media>\r\n                    </th>\r\n                    <td>$2,500 USD</td>\r\n                    {/* <td>\r\n                      <Badge color=\"\" className=\"badge-dot mr-4\">\r\n                        <i className=\"bg-warning\" />\r\n                        pending\r\n                      </Badge>\r\n                    </td> */}\r\n                    {/*<td>\r\n                      <div className=\"avatar-group\">\r\n                        <a\r\n                          className=\"avatar avatar-sm\"\r\n                          href=\"#pablo\"\r\n                          id=\"tooltip742438047\"\r\n                          onClick={e => e.preventDefault()}\r\n                        >\r\n                          <img\r\n                            alt=\"...\"\r\n                            className=\"rounded-circle\"\r\n                            src={require(\"assets/img/theme/team-1-800x800.jpg\")}\r\n                          />\r\n                        </a>\r\n                        <UncontrolledTooltip\r\n                          delay={0}\r\n                          target=\"tooltip742438047\"\r\n                        >\r\n                          Ryan Tompson\r\n                        </UncontrolledTooltip>\r\n                        <a\r\n                          className=\"avatar avatar-sm\"\r\n                          href=\"#pablo\"\r\n                          id=\"tooltip941738690\"\r\n                          onClick={e => e.preventDefault()}\r\n                        >\r\n                          <img\r\n                            alt=\"...\"\r\n                            className=\"rounded-circle\"\r\n                            src={require(\"assets/img/theme/team-2-800x800.jpg\")}\r\n                          />\r\n                        </a>\r\n                        <UncontrolledTooltip\r\n                          delay={0}\r\n                          target=\"tooltip941738690\"\r\n                        >\r\n                          Romina Hadid\r\n                        </UncontrolledTooltip>\r\n                        <a\r\n                          className=\"avatar avatar-sm\"\r\n                          href=\"#pablo\"\r\n                          id=\"tooltip804044742\"\r\n                          onClick={e => e.preventDefault()}\r\n                        >\r\n                          <img\r\n                            alt=\"...\"\r\n                            className=\"rounded-circle\"\r\n                            src={require(\"assets/img/theme/team-3-800x800.jpg\")}\r\n                          />\r\n                        </a>\r\n                        <UncontrolledTooltip\r\n                          delay={0}\r\n                          target=\"tooltip804044742\"\r\n                        >\r\n                          Alexander Smith\r\n                        </UncontrolledTooltip>\r\n                        <a\r\n                          className=\"avatar avatar-sm\"\r\n                          href=\"#pablo\"\r\n                          id=\"tooltip996637554\"\r\n                          onClick={e => e.preventDefault()}\r\n                        >\r\n                          <img\r\n                            alt=\"...\"\r\n                            className=\"rounded-circle\"\r\n                            src={require(\"assets/img/theme/team-4-800x800.jpg\")}\r\n                          />\r\n                        </a>\r\n                        <UncontrolledTooltip\r\n                          delay={0}\r\n                          target=\"tooltip996637554\"\r\n                        >\r\n                          Jessica Doe\r\n                        </UncontrolledTooltip>\r\n                      </div>\r\n                    </td>\r\n                    <td>\r\n                      <div className=\"d-flex align-items-center\">\r\n                        <span className=\"mr-2\">60%</span>\r\n                        <div>\r\n                          <Progress\r\n                            max=\"100\"\r\n                            value=\"60\"\r\n                            barClassName=\"bg-danger\"\r\n                          />\r\n                        </div>\r\n                      </div>\r\n                    </td>\r\n                    <td className=\"text-right\">\r\n                      <UncontrolledDropdown>\r\n                        <DropdownToggle\r\n                          className=\"btn-icon-only text-light\"\r\n                          href=\"#pablo\"\r\n                          role=\"button\"\r\n                          size=\"sm\"\r\n                          color=\"\"\r\n                          onClick={e => e.preventDefault()}\r\n                        >\r\n                          <i className=\"fas fa-ellipsis-v\" />\r\n                        </DropdownToggle>\r\n                        <DropdownMenu className=\"dropdown-menu-arrow\" right>\r\n                          <DropdownItem\r\n                            href=\"#pablo\"\r\n                            onClick={e => e.preventDefault()}\r\n                          >\r\n                            Action\r\n                          </DropdownItem>\r\n                          <DropdownItem\r\n                            href=\"#pablo\"\r\n                            onClick={e => e.preventDefault()}\r\n                          >\r\n                            Another action\r\n                          </DropdownItem>\r\n                          <DropdownItem\r\n                            href=\"#pablo\"\r\n                            onClick={e => e.preventDefault()}\r\n                          >\r\n                            Something else here\r\n                          </DropdownItem>\r\n                        </DropdownMenu>\r\n                      </UncontrolledDropdown>\r\n                    </td>\r\n                  </tr> */}\r\n                  {/* data is an array */}\r\n                  {/* forEach will be slower then for ... of (item) or for .... in (index) */}\r\n                  {/* {data.forEach((value, key) => {\r\n                    alert(JSON.stringify(data));\r\n                    return <WrappedComponent key={uuidv1()} data={value} index={key} />;\r\n                  })} */}\r\n                  {/* {data.map((value, key) => {\r\n                    return (\r\n                      <WrappedComponent\r\n                        index={key}\r\n                        key={uuidv1()}\r\n                        data={value}\r\n                        Action={Action}\r\n                      />\r\n                    );\r\n                  })} */}\r\n                  <WrappedComponent />\r\n                </tbody>\r\n              </Table>\r\n            </Card>\r\n          </div>\r\n        </Row>\r\n      </Container>\r\n    </>\r\n  );\r\n};\r\n\r\nconst arePropsEqual = (prevProps, nextProps) => {\r\n  return prevProps === nextProps;\r\n};\r\n// Wrap component using `React.memo()` and pass `arePropsEqual`\r\nexport default memo(TablePresentation, arePropsEqual);\r\n","import React, { Component } from \"react\";\r\n//  set up proptype\r\nimport PropTypes from \"prop-types\";\r\n//  set up redux\r\nimport { connect } from \"react-redux\";\r\nimport { withRouter } from \"react-router-dom\";\r\n//  table presentation HOC\r\nimport TablePresentation from \"./TablePresentation.js\";\r\n//  compose function:\r\n//  - (...fns): array all function need to compose\r\n//  - x: collection / input value\r\n//  - reduceRight: array loop function, from right to left (last -> last - 1 -> last - 2 -> ...)\r\n//  =>  (y, f) => f(y), x === (previousValue, currentFunction) => currentFunction(previousValue), x\r\n//  =>  take last function in collectionFunction fns, use innitial value x, return value (y)\r\n//  =>  [a, b, c] => reduceRight((y, f) => f(y), x) === a(b(c))\r\nconst compose = (...fns) => x => fns.reduceRight((y, f) => f(y), x);\r\n\r\nconst propsProTypes = {\r\n  //data: PropTypes.array,\r\n  toggleCreateModal: PropTypes.func,\r\n  getData: PropTypes.func\r\n  // header: PropTypes.arrayOf(\r\n  //   (propValue, key, componentName, location, propFullName) => {\r\n  //     if (typeof propValue !== \"string\" || typeof propValue !== \"number\") {\r\n  //       return new TypeError(\r\n  //         `Invalid prop ${propFullName} supplied to ${componentName}.\r\n  //     Validation failed at location: ${location}.\r\n  //     Props at index ${key} in Array.`\r\n  //       );\r\n  //     }\r\n  //     if (!propValue) {\r\n  //       return new Error(\r\n  //         `Invalid prop ${propFullName} supplied to ${componentName}.\r\n  //     Validation failed at location: ${location}.\r\n  //     Props at index ${key} in Array.`\r\n  //       );\r\n  //     }\r\n  //   }\r\n  // ).isRequired,\r\n  // getData: PropTypes.any\r\n};\r\n\r\nconst propsDefault = {\r\n  //data: [],\r\n  toggleCreateModal: () => {},\r\n  getData: () => {}\r\n  //header: []\r\n};\r\n\r\nconst TableContainer = (WrappedComponent, RegistrationModal, DetailModal, Action, header, name) => {\r\n  //console.log(\"TableContainer \", props);\r\n  // console.log(\"TableContainer \", WrappedComponent);\r\n  // console.log(\"TableContainer \", Action);\r\n  // console.log(\"TableContainer \", header);\r\n\r\n  const Wrapper = props => {\r\n    //  props: current props in Wrapper (get from m)\r\n    // console.log(\"Wrapper \", props);\r\n    return class extends Component {\r\n      static propTypes = propsProTypes;\r\n      static defaultProps = propsDefault;\r\n      // state = {\r\n      //   tableData: []\r\n      // };\r\n\r\n      componentDidMount() {\r\n        //console.log(\"TableContainer componentDidMount: \");\r\n        this.props.getData();\r\n        //this.props.toggleCreateModal();\r\n      }\r\n\r\n      shouldComponentUpdate(nextProps) {\r\n        // console.log(`shouldComponentUpdate: \r\n        // this.props: ${this.props}\r\n        // nextProps: ${nextProps}`);\r\n        if (this.props.getData || this.props.toggleCreateModal) {\r\n          alert(\"true 1\");\r\n          return true;\r\n        }\r\n        if (\r\n          this.props.getData === nextProps.getData &&\r\n          this.props.toggleCreateModal === nextProps.toggleCreateModal\r\n        ) {\r\n          alert(\"false\");\r\n          return false;\r\n        }\r\n        alert(\"true 2\");\r\n        return true;\r\n      }\r\n\r\n      render() {\r\n        // console.log(\"TableContainer render\", WrappedComponent);\r\n        // console.log(\"TableContainer render\", Action);\r\n        // console.log(\"TableContainer render\", header);\r\n        let { toggleCreateModal } = this.props;\r\n        //console.log(\"Wrapper \", this.props);\r\n        // console.log(\"TableContainer render\", update2);\r\n        return (\r\n          <TablePresentation\r\n            WrappedComponent={WrappedComponent}\r\n            RegistrationModal={RegistrationModal}\r\n            DetailModal={DetailModal}\r\n            header={header}\r\n            toggleCreateModal={toggleCreateModal}\r\n            name={name}\r\n          />\r\n        );\r\n      }\r\n    };\r\n  };\r\n\r\n  const mapDispatchToProps = (dispatch, ownProps) => {\r\n    return {\r\n      getData: () => dispatch(Action.getData()),\r\n      toggleCreateModal: () => dispatch(Action.toggleCreateModal),\r\n\r\n      dispatch\r\n    };\r\n  };\r\n\r\n  // const mapStateToProps = (state, ownProps) => {\r\n  //   return {\r\n  //     toggle: state.Server.toggleCreateModal\r\n  //   };\r\n  // };\r\n\r\n  //  compose all redux HOC\r\n  const enhance = compose(withRouter, connect(null, mapDispatchToProps, null));\r\n\r\n  //  return current HOC\r\n  return enhance(Wrapper());\r\n};\r\n\r\nexport default TableContainer;\r\n","import React from \"react\";\nimport { Route, Switch } from \"react-router-dom\";\n// reactstrap components\nimport { Container } from \"reactstrap\";\n// core components\nimport NavBar from \"./Navbars/NavBar.jsx\";\nimport AdminFooter from \"./Footers/AdminFooter.jsx\";\nimport SidebarResponsive from \"./Sidebar/SidebarResponsive.jsx\";\nimport routes from \"./../../routes.js\";\n//  redux connect\nimport { withRouter } from \"react-router-dom\";\n//  HOC\nimport TableContainer from \"./../HOC/TableContainer.js\";\n//const Server =    withTableContainer(SidebarResponsive);\nclass Admin extends React.Component {\n  componentDidUpdate(e) {\n    document.documentElement.scrollTop = 0;\n    document.scrollingElement.scrollTop = 0;\n    this.refs.mainContent.scrollTop = 0;\n  }\n  getRoutes = routes => {\n    return routes.map((prop, key) => {\n      //console.log(\"Admin.jsx: \" + typeof prop.component);\n      if (prop.layout === \"/admin\" ) {\n        if (prop.type === \"table\") {\n          //alert(JSON.stringify(prop));\n          let WrappedComponent = withRouter(TableContainer(prop.component, prop.RegistrationModal, prop.DetailModal, prop.Action, prop.header, prop.name));\n          return (\n            <Route\n              path={prop.layout + prop.path}\n              // component={withRouter(TableContainer(prop.component, prop.Action, prop.header))}\n              render={props => <WrappedComponent {...props} />}              \n              key={key}\n            />\n          );\n        }\n        return (\n          <Route\n            path={prop.layout + prop.path}\n            component={withRouter(prop.component)}\n            key={key}\n          />\n        );\n      }\n      return null;\n    });\n  };\n  getBrandText = path => {\n    for (let i = 0; i < routes.length; i++) {\n      if (\n        this.props.location.pathname.indexOf(\n          routes[i].layout + routes[i].path\n        ) !== -1\n      ) {\n        return routes[i].name;\n      }\n    }\n    return \"Brand\";\n  };\n\n  render() {\n    return (\n      <>\n        {/* <Server /> */}\n        <SidebarResponsive\n          {...this.props}\n          routes={routes}\n          logo={{\n            innerLink: \"/admin/index\",\n            imgSrc: require(\"assets/img/brand/argon-react.png\"),\n            imgAlt: \"...\"\n          }}\n        />        \n\n        <div className=\"main-content \" ref=\"mainContent\">\n          <Container>\n            <NavBar\n              {...this.props}\n              brandText={this.getBrandText(this.props.location.pathname)}\n            />\n            <Switch>{this.getRoutes(routes)}</Switch>\n            {/* <Container fluid>**/}\n            {/* <Header /> */}\n            <AdminFooter />\n          </Container>\n        </div>\n      </>\n    );\n  }\n}\n\nexport default Admin;\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n// reactstrap components\nimport {\n  UncontrolledCollapse,\n  NavbarBrand,\n  Navbar,\n  NavItem,\n  NavLink,\n  Nav,\n  Container,\n} from \"reactstrap\";\n\nclass AdminNavbar extends React.Component {\n  render() {\n    return (\n      <>\n        <Navbar\n          className=\"navbar-top navbar-horizontal navbar-dark\"\n          expand=\"md\"\n        >\n          <Container className=\"px-4\">\n            <NavbarBrand to=\"/\" tag={Link}>\n              <img alt=\"...\" src={require(\"assets/img/brand/argon-react-white.png\")} />\n            </NavbarBrand>\n            <button visible=\"false\" className=\"navbar-toggler\" id=\"navbar-collapse-main\">\n              Toggle\n            </button>\n            <UncontrolledCollapse navbar toggler=\"#navbar-collapse-main\">\n              {/* <div className=\"navbar-collapse-header d-md-none\">\n                <Row>\n                  <Col className=\"collapse-brand\" xs=\"6\">\n                    <Link to=\"/\">\n                      <img\n                        alt=\"...\"\n                        src={require(\"assets/img/brand/argon-react.png\")}\n                      />\n                    </Link>\n                  </Col>\n                  <Col className=\"collapse-close\" xs=\"6\">\n                    <button\n                      className=\"navbar-toggler\"\n                      id=\"navbar-collapse-main\"\n                    >\n                      <span />\n                      <span />\n                    </button>\n                  </Col>\n                </Row>\n              </div> */}\n              <Nav className=\"ml-auto\" navbar>\n                {/* <NavItem>\n                  <NavLink className=\"nav-link-icon\" to=\"/\" tag={Link}>\n                    <i className=\"ni ni-planet\" />\n                    <span className=\"nav-link-inner--text\">Dashboard</span>\n                  </NavLink>\n                </NavItem> */}\n                <NavItem>\n                  <NavLink\n                    className=\"nav-link-icon\"\n                    to=\"/auth/register\"\n                    tag={Link}\n                  >\n                    <i className=\"ni ni-circle-08\" />\n                    <span className=\"nav-link-inner--text\">Register</span>\n                  </NavLink>\n                </NavItem>\n                <NavItem>\n                  <NavLink\n                    className=\"nav-link-icon\"\n                    to=\"/auth/login\"\n                    tag={Link}\n                  >\n                    <i className=\"ni ni-key-25\" />\n                    <span className=\"nav-link-inner--text\">Login</span>\n                  </NavLink>\n                </NavItem>\n                {/* <NavItem>\n                  <NavLink\n                    className=\"nav-link-icon\"\n                    to=\"/admin/user-profile\"\n                    tag={Link}\n                  >\n                    <i className=\"ni ni-single-02\" />\n                    <span className=\"nav-link-inner--text\">Profile</span>\n                  </NavLink>\n                </NavItem> */}\n              </Nav>\n            </UncontrolledCollapse>\n          </Container>\n        </Navbar>\n      </>\n    );\n  }\n}\n\nexport default AdminNavbar;\n","/*!\n\n=========================================================\n* Argon Dashboard React - v1.0.0\n=========================================================\n\n* Product Page: https://www.creative-tim.com/product/argon-dashboard-react\n* Copyright 2019 Creative Tim (https://www.creative-tim.com)\n* Licensed under MIT (https://github.com/creativetimofficial/argon-dashboard-react/blob/master/LICENSE.md)\n\n* Coded by Creative Tim\n\n=========================================================\n\n* The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\n*/\n/*eslint-disable*/\nimport React from \"react\";\n\n// reactstrap components\nimport { NavItem, NavLink, Nav, Container, Row, Col } from \"reactstrap\";\n\nclass Login extends React.Component {\n  render() {\n    return (\n      <>\n        <footer className=\"py-5\">\n          <Container>\n            <Row className=\"align-items-center justify-content-xl-between\">\n              <Col xl=\"6\">\n                <div className=\"copyright text-center text-xl-left text-muted\">\n                  © 2018{\" \"}\n                  <a\n                    className=\"font-weight-bold ml-1\"\n                    href=\"https://www.creative-tim.com?ref=adr-auth-footer\"\n                    target=\"_blank\"\n                  >\n                    Creative Tim\n                  </a>\n                </div>\n              </Col>\n              <Col xl=\"6\">\n                <Nav className=\"nav-footer justify-content-center justify-content-xl-end\">\n                  <NavItem>\n                    <NavLink\n                      href=\"https://www.creative-tim.com?ref=adr-auth-footer\"\n                      target=\"_blank\"\n                    >\n                      Creative Tim\n                    </NavLink>\n                  </NavItem>\n                  <NavItem>\n                    <NavLink\n                      href=\"https://www.creative-tim.com/presentation?ref=adr-auth-footer\"\n                      target=\"_blank\"\n                    >\n                      About Us\n                    </NavLink>\n                  </NavItem>\n                  <NavItem>\n                    <NavLink\n                      href=\"http://blog.creative-tim.com?ref=adr-auth-footer\"\n                      target=\"_blank\"\n                    >\n                      Blog\n                    </NavLink>\n                  </NavItem>\n                  <NavItem>\n                    <NavLink\n                      href=\"https://github.com/creativetimofficial/argon-dashboard/blob/master/LICENSE.md?ref=adr-auth-footer\"\n                      target=\"_blank\"\n                    >\n                      MIT License\n                    </NavLink>\n                  </NavItem>\n                </Nav>\n              </Col>\n            </Row>\n          </Container>\n        </footer>\n      </>\n    );\n  }\n}\n\nexport default Login;\n","import React from \"react\";\nimport { Route, Switch } from \"react-router-dom\";\n// reactstrap components\n// import { Container, Row, Col } from \"reactstrap\";\nimport { Container, Row } from \"reactstrap\";\n\n//  redux connect\nimport { withRouter } from \"react-router-dom\";\n// core components\nimport AuthNavbar from \"./Navbars/AuthNavbar.jsx\";\nimport AuthFooter from \"./Footers/AuthFooter.jsx\";\n\nimport routes from \"routes.js\";\n\nclass Auth extends React.Component {\n  componentDidMount() {\n    document.body.classList.add(\"bg-default\");\n  }\n  componentWillUnmount() {\n    document.body.classList.remove(\"bg-default\");\n  }\n  getRoutes = routes => {\n    return routes.map((prop, key) => {\n      if (prop.layout === \"/auth\") {\n        return (\n          <Route\n            path={prop.layout + prop.path}\n            component={withRouter(prop.component)}\n            key={key}\n          />\n        );\n      } else {\n        return null;\n      }\n    });\n  };\n  render() {\n    return (\n      <>\n        <div className=\"main-content\">\n          <AuthNavbar />\n          <div className=\"header bg-gradient-info py-7 py-lg-8\">\n            {/* <Container>\n              <div className=\"header-body text-center mb-7\">\n                <Row className=\"justify-content-center\">\n                  <Col lg=\"5\" md=\"6\">\n                    <h1 className=\"text-white\">Welcome!</h1>\n                    <p className=\"text-lead text-light\">\n                      Use these awesome forms to login or create new account in\n                      your project for free.\n                    </p>\n                  </Col>\n                </Row>\n              </div>\n            </Container> */}\n            <div className=\"separator separator-bottom separator-skew zindex-100\">\n              <svg\n                xmlns=\"http://www.w3.org/2000/svg\"\n                preserveAspectRatio=\"none\"\n                version=\"1.1\"\n                viewBox=\"0 0 2560 100\"\n                x=\"0\"\n                y=\"0\"\n              >\n                <polygon\n                  className=\"fill-default\"\n                  points=\"2560 0 2560 100 0 100\"\n                />\n              </svg>\n            </div>\n          </div>\n          {/* Page content */}\n          <Container className=\"mt--8 pb-5\">\n            <Row className=\"justify-content-center\">\n              <Switch>{this.getRoutes(routes)}</Switch>\n            </Row>\n          </Container>\n        </div>\n        <AuthFooter />\n      </>\n    );\n  }\n}\n\nexport default Auth;\n","import React, {\n  Component\n} from \"react\";\nimport \"./App.css\";\nimport {\n  BrowserRouter,\n  Switch,\n  Route,\n  Redirect\n} from \"react-router-dom\";\n\nimport \"assets/vendor/nucleo/css/nucleo.css\";\nimport \"assets/vendor/@fortawesome/fontawesome-free/css/all.min.css\";\nimport \"assets/scss/argon-dashboard-react.scss\";\n\nimport NotFound from \"./components/contents/404NotFound/NotFound\";\nimport AdminLayout from \"./components/layouts/Admin\";\nimport AuthLayout from \"./components/layouts/Auth\";\n\n//  set up proptype\nimport PropTypes from \"prop-types\";\n//  redux component\n//  set up redux\nimport {\n  connect\n} from \"react-redux\";\nimport {\n  withRouter\n} from \"react-router-dom\";\nimport Action from \"./redux/Action/index.js\";\nimport Logout from \"./components/contents/views/Logout.jsx\";\n\nconst uuidv1 = require(\"uuid/v1\");\n//  compose function:\n//  - (...fns): array all function need to compose\n//  - x: collection / input value\n//  - reduceRight: array loop function, from right to left (last -> last - 1 -> last - 2 -> ...)\n//  =>  (y, f) => f(y), x === (previousValue, currentFunction) => currentFunction(previousValue), x\n//  =>  take last function in collectionFunction fns, use innitial value x, return value (y)\n//  =>  [a, b, c] => reduceRight((y, f) => f(y), x) === a(b(c))\nconst compose = (...fns) => x => fns.reduceRight((y, f) => f(y), x);\n\n//  propType\nconst propsProTypes = {};\n\nconst propsDefault = {};\n\nclass App extends Component {\n  static propTypes = propsProTypes;\n  static defaultProps = propsDefault;\n  state = {\n    tableData: []\n  };\n  render() {\n    // alert( this.props.isLoggedIn);\n    return (\n      <div>        \n        <BrowserRouter>\n        \n        <Switch>\n          \n           {/* <Redirect exact=\"/\" from=\"/auth\" to=\"/auth/login\" />  */}\n           {/* <Redirect exact=\"/\" from=\"/\" to=\"/auth/login\" /> \n           <Redirect exact=\"/\" from=\"/admin\" to=\"/auth/login\" />  */}\n          {\n            this.props.isLoggedIn === 1 ?\n            <div>\n              <Redirect exact=\"/\" from=\"/admin\" to=\"/admin/index\" />  \n              <Redirect exact=\"/\" from=\"/\" to=\"/admin/index\" /> \n              <Redirect exact=\"/\" from=\"/auth\" to=\"/admin/index\" /> \n              <Route path=\"/admin\" render={props => <AdminLayout {...props} />} />\n            </div>\n            :\n            this.props.isLoggedIn === 2 ?\n            <div>\n              {/* <Redirect exact=\"/\" from=\"/auth\" to=\"/auth/login\" />   */}\n              <Redirect exact=\"/\" from=\"/\" to=\"/auth/login\" /> \n              <Redirect exact=\"/\" from=\"/admin\" to=\"/auth/login\" />  \n              <Redirect exact=\"/\" from=\"/auth\" to=\"/auth/login\" /> \n              <Route path=\"/auth\" render={props => <AuthLayout {...props} />} />\n            </div>\n            :\n            <Route component={NotFound} />\n          }\n          \n        </Switch>\n      </BrowserRouter>\n      \n    </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state, ownProps) => {\n  return {\n    isLoggedIn: state.Login.isLoggedIn,\n    own: ownProps\n  };\n};\n\nconst mapDispatchToProps = (dispatch, ownProps) => ({\n\n  dispatch\n});\n\n//  compose all redux HOC\nconst enhance = compose(\n  connect(mapStateToProps, mapDispatchToProps, null)\n);\n\nexport default enhance(App);","export const baseReducer = (initialState, reducerDictionary) => {\r\n    //  return a redux reducing action\r\n    return (state = initialState, action) => {\r\n        //  reference to correct reducer\r\n        const reducer = reducerDictionary[action.type];\r\n\r\n        //  action type validation\r\n        return (!reducer || action.error ) ? state : reducer(state, action)        \r\n    };\r\n}","import {\r\n  LoginActionTypes\r\n} from \"../constants.js\";\r\nimport {\r\n  baseReducer\r\n} from \"./baseReducer.js\";\r\n//  Action type destructor\r\nconst {\r\n  CONFIRM_LOGIN_STATUS,\r\n  STORE_LOGIN_INFORMATION,\r\n  REQUEST_FETCH_API\r\n} = LoginActionTypes;\r\n\r\nconst initialState = {\r\n  fetchStatus: false,\r\n  isLoggedIn: 2,\r\n  loginInfor: {\r\n    \"id\": 4,\r\n    \"token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1bmlxdWVfbmFtZSI6IjEwIiwibmJmIjoxNTg0MDg0MDUyLCJleHAiOjE1ODQ2ODg4NTIsImlhdCI6MTU4NDA4NDA1Mn0.BvtM4Y2c_baIqoHk7ZFMpfPRcSsWAvap1Af_DzCqvlk\",\r\n    \"role\": 1,\r\n    \"email\": \"kachyctt@gmail.com\"\r\n  },\r\n  profile: {}\r\n};\r\n\r\n//    Use dictionary instead of switch statement in reducer\r\nconst dictionary = {\r\n  [CONFIRM_LOGIN_STATUS]: (state, {\r\n    payload\r\n  }) => {\r\n    // alert(payload);\r\n    return {\r\n      ...state,\r\n      isLoggedIn: payload\r\n    };\r\n  },\r\n\r\n  [STORE_LOGIN_INFORMATION]: (state, {\r\n    payload\r\n  }) => {\r\n    console.log(\"STORE_LOGIN_INFORMATION \" + JSON.stringify(payload));\r\n    return {\r\n      ...state,\r\n      loginInfor: payload\r\n    };\r\n  },\r\n\r\n  [REQUEST_FETCH_API]: (state, {\r\n    payload\r\n  }) => {\r\n    //console.log(\"RequestFetchingAPI \" + status);\r\n\r\n    return payload ? {\r\n        ...state,\r\n        fetchStatus: payload\r\n      } :\r\n      state;\r\n  },\r\n};\r\n\r\nexport const loginReducer = baseReducer(initialState, dictionary);","import {\r\n  ServerActionTypes\r\n} from \"../constants\";\r\nimport {\r\n  baseReducer\r\n} from \"./baseReducer\";\r\n//  Action type destructor\r\nconst {\r\n  REQUEST_FETCH_API,\r\n  STORE_SERVER_LIST,\r\n  STORE_SERVER_MASTER_LIST,\r\n  TOGGLE_CREATE_SERVER_MODAL,\r\n  TOGGLE_INFORMATION_MODAL,\r\n  STORE_CURRENT_SELECTED_SERVER,\r\n  CREATE_NEW_SERVER,\r\n  COUNT,\r\n\r\n  APPLICATION_TEST,\r\n\r\n} = ServerActionTypes;\r\n\r\n//  Get today\r\nconst today = new Date(Date.now());\r\n\r\n//  Initial state\r\nconst initialState = {\r\n  count: 0,\r\n  fetchStatus: true,\r\n  currentDataList: [\r\n    // {\r\n    //   id: 1,\r\n    //   active: true,\r\n    //   server_master_registration: true,\r\n\r\n    //   create_date: today.toISOString().slice(0, 23),\r\n    //   description: \"first server\",\r\n    //   expred_date: today.toISOString().slice(0, 23),\r\n    //   ip_address: \"192.168.1.1\",\r\n    //   server_name: \"1st server\",\r\n    //   os: 2,\r\n    //   server_code: \"code\",\r\n    //   server_master: 1,\r\n    //   link: \"www.google.com\",\r\n    //   type: 2,\r\n    //   update_date: today.toISOString().slice(0, 23)\r\n    // },\r\n    {\r\n      \"id\": 1,\r\n      \"active\": true,\r\n      \"create_time\": \"2020-03-06T13:25:23.36\",\r\n      \"description\": \"string\",\r\n      \"expired_date\": null,\r\n      \"ip_address\": \"192.168.1.1\",\r\n      \"name\": \"kachyctt\",\r\n      \"os\": 1,\r\n      \"server_code\": \"kachyctt\",\r\n      \"server_master\": null,\r\n      \"server_url\": \"google.com.vn\",\r\n      \"type\": 1,\r\n      \"update_time\": \"2020-03-06T00:00:00\",\r\n      \"server_detail\": {\r\n        \"id\": 1,\r\n        \"active\": true,\r\n        \"disk1\": \"A\",\r\n        \"disk2\": \"B\",\r\n        \"disk3\": \"C\",\r\n        \"server_id\": 1,\r\n        \"update_time\": \"2020-03-06T15:31:05.923\",\r\n        \"volume_disk1\": \"100\",\r\n        \"volume_disk2\": \"100\",\r\n        \"volume_disk3\": \"100\"\r\n      },\r\n      \"server_master_navigation\": null,\r\n      \"inverse_server_master_navigation\": [],\r\n      \"repo\": [],\r\n      \"server_account\": [\r\n        {\r\n          \"id\": 1,\r\n          \"active\": true,\r\n          \"password\": \"kachyctt\",\r\n          \"server_id\": 1,\r\n          \"username\": \"kachyctt\"\r\n        }\r\n      ]\r\n    },\r\n    {\r\n      \"id\": 2,\r\n      \"active\": true,\r\n      \"create_time\": \"2020-03-06T14:00:42.38\",\r\n      \"description\": \"string\",\r\n      \"expired_date\": null,\r\n      \"ip_address\": \"192.168.1.1\",\r\n      \"name\": \"kachyctt1\",\r\n      \"os\": 1,\r\n      \"server_code\": \"kachyctt1\",\r\n      \"server_master\": null,\r\n      \"server_url\": \"google.com.vn\",\r\n      \"type\": 1,\r\n      \"update_time\": \"2020-03-06T00:00:00\",\r\n      \"server_detail\": {\r\n        \"id\": 2,\r\n        \"active\": true,\r\n        \"disk1\": \"D\",\r\n        \"disk2\": \"E\",\r\n        \"disk3\": \"F\",\r\n        \"server_id\": 2,\r\n        \"update_time\": \"2020-03-06T15:31:59.837\",\r\n        \"volume_disk1\": \"100\",\r\n        \"volume_disk2\": \"100\",\r\n        \"volume_disk3\": \"100\"\r\n      },\r\n      \"server_master_navigation\": null,\r\n      \"inverse_server_master_navigation\": [],\r\n      \"repo\": [],\r\n      \"server_account\": [\r\n        {\r\n          \"id\": 2,\r\n          \"active\": true,\r\n          \"password\": \"kachyctt1\",\r\n          \"server_id\": 2,\r\n          \"username\": \"kachyctt1\"\r\n        }\r\n      ]\r\n    }\r\n  ],\r\n\r\n\r\n  toggleCreateModal: false,\r\n  toggleInformationModal: false,\r\n  selectedID: 1,\r\n\r\n  currentServerMasterList: [],\r\n};\r\n\r\n//    Use dictionary instead of switch statement in reducer\r\nconst dictionary = {\r\n  [COUNT]: state => {\r\n    return {\r\n      ...state,\r\n      count: state.count + 1\r\n    };\r\n  },\r\n\r\n  [REQUEST_FETCH_API]: (state, payload) => {\r\n    //console.log(\"RequestFetchingAPI \" + status);\r\n\r\n    return payload ? {\r\n        ...state,\r\n        fetchStatus: payload\r\n      } :\r\n      state;\r\n  },\r\n\r\n  [STORE_SERVER_LIST]: (state, {\r\n    payload = []\r\n  }) => {\r\n    return payload.length > 0 ? {\r\n        ...state,\r\n        currentDataList: payload\r\n      } :\r\n      state;\r\n  },\r\n\r\n  [STORE_SERVER_MASTER_LIST]: (state, {\r\n    payload = []\r\n  }) => {\r\n    //console.log(\"StoreServerMasterList \" + JSON.stringify(list));\r\n    return payload.length > 0 ? {\r\n        ...state,\r\n        currentServerMasterList: payload\r\n      } :\r\n      state;\r\n  },\r\n\r\n  [TOGGLE_CREATE_SERVER_MODAL]: state => {\r\n    //console.log(\"ToggleCreateServer \" + state);\r\n\r\n    return {\r\n      ...state,\r\n      toggleCreateModal: !state.toggleCreateModal\r\n    };\r\n  },\r\n\r\n  [TOGGLE_INFORMATION_MODAL]: state => {\r\n    //console.log(\"ToggleInformation \" + state);\r\n\r\n    return {\r\n      ...state,\r\n      toggleInformationModal: !state.toggleInformationModal\r\n    };\r\n  },\r\n\r\n  [STORE_CURRENT_SELECTED_SERVER]: (state, {\r\n    payload = 0\r\n  }) => {\r\n    console.log(\"StoreCurrentSelectedServer \", payload);\r\n    return {\r\n      ...state,\r\n      currentSelectedServer: payload\r\n    };\r\n  },\r\n\r\n  [CREATE_NEW_SERVER]: (state, {\r\n    payload\r\n  }) => {\r\n    console.log(\"CreateNewServer \", payload);\r\n    return {\r\n      ...state,\r\n      currentDataList: [\r\n        ...state.currentDataList,\r\n        {\r\n          ...payload,\r\n          id: state.currentDataList.length + 1\r\n        }\r\n      ]\r\n    };\r\n  },\r\n\r\n  [APPLICATION_TEST]: (state) => {\r\n    return state;\r\n  }\r\n};\r\n\r\nexport const serverReducer = baseReducer(initialState, dictionary);","import {\r\n  ApplicationActionTypes\r\n} from \"../constants\";\r\nimport {\r\n  baseReducer\r\n} from \"./baseReducer\";\r\n//  Action type destructor\r\nconst {\r\n  REQUEST_FETCH_API,\r\n  // GET_APPLICATION_LIST,\r\n  STORE_APPLICATION_LIST,\r\n\r\n  TOGGLE_CREATE_APPLICATION_MODAL,\r\n  TOGGLE_INFORMATION_MODAL,\r\n\r\n  STORE_CURRENT_SELECTED_APPLICATION,\r\n\r\n  CREATE_NEW_APPLICATION,\r\n\r\n  // //  Update\r\n  // UPDATE_APPLICATION_INFORMATION,\r\n  // UPDATE_SYSTEM,\r\n  // UPDATE_REPO,\r\n  // UPDATE_APPLICATION_STATUS,\r\n\r\n} = ApplicationActionTypes;\r\n\r\n//  Get today\r\nconst today = new Date(Date.now());\r\n\r\n//  Initial state\r\nconst initialState = {\r\n  fetchStatus: true,\r\n  currentDataList: [\r\n\r\n    {\r\n      \"id\": 1,\r\n      \"active\": true,\r\n      \"category\": 1,\r\n      \"create_time\": \"2020-03-11T00:00:00\",\r\n      \"description\": null,\r\n      \"efford\": null,\r\n      \"end_date\": null,\r\n      \"is_done\": true,\r\n      \"name\": \"Log API\",\r\n      \"note\": null,\r\n      \"origin\": \"I\",\r\n      \"priority\": 1,\r\n      \"source_code_url\": null,\r\n      \"stage\": null,\r\n      \"start_date\": \"2020-03-11T00:00:00\",\r\n      \"status\": 1,\r\n      \"systems_id\": 1,\r\n      \"team\": null,\r\n      \"technologies\": null,\r\n      \"type\": \"N\",\r\n      \"update_time\": \"2020-03-12T00:00:00\",\r\n      \"systems\": {\r\n        \"id\": 1,\r\n        \"active\": true,\r\n        \"create_time\": \"2020-03-12T00:00:00\",\r\n        \"description\": \"Log Record\",\r\n        \"name\": \"Log Record\",\r\n        \"update_time\": \"2020-03-12T00:00:00\",\r\n        \"application\": []\r\n      },\r\n      \"application_instance\": [{\r\n          \"id\": 1,\r\n          \"active\": true,\r\n          \"app_code\": \"number1\",\r\n          \"app_id\": 1,\r\n          \"application_version\": null,\r\n          \"config_url\": null,\r\n          \"create_time\": \"2020-03-12T00:00:00\",\r\n          \"description\": \"string\",\r\n          \"name\": \"Quan 1\",\r\n          \"release_url\": null,\r\n          \"update_time\": \"2020-03-12T00:00:00\",\r\n          \"log\": [],\r\n          \"manage_project\": []\r\n        },\r\n        {\r\n          \"id\": 2,\r\n          \"active\": true,\r\n          \"app_code\": \"number2\",\r\n          \"app_id\": 1,\r\n          \"application_version\": null,\r\n          \"config_url\": null,\r\n          \"create_time\": \"2020-03-12T00:00:00\",\r\n          \"description\": \"string\",\r\n          \"name\": \"Quan 2\",\r\n          \"release_url\": null,\r\n          \"update_time\": \"2020-03-12T00:00:00\",\r\n          \"log\": [],\r\n          \"manage_project\": []\r\n        },\r\n        {\r\n          \"id\": 3,\r\n          \"active\": true,\r\n          \"app_code\": \"number3\",\r\n          \"app_id\": 1,\r\n          \"application_version\": null,\r\n          \"config_url\": null,\r\n          \"create_time\": \"2020-03-12T00:00:00\",\r\n          \"description\": \"string\",\r\n          \"name\": \"Quan 3\",\r\n          \"release_url\": null,\r\n          \"update_time\": \"2020-03-12T00:00:00\",\r\n          \"log\": [],\r\n          \"manage_project\": []\r\n        },\r\n        {\r\n          \"id\": 4,\r\n          \"active\": true,\r\n          \"app_code\": \"number4\",\r\n          \"app_id\": 1,\r\n          \"application_version\": null,\r\n          \"config_url\": null,\r\n          \"create_time\": \"2020-03-12T00:00:00\",\r\n          \"description\": \"string\",\r\n          \"name\": \"Quan 4\",\r\n          \"release_url\": null,\r\n          \"update_time\": \"2020-03-12T00:00:00\",\r\n          \"log\": [],\r\n          \"manage_project\": []\r\n        },\r\n        {\r\n          \"id\": 5,\r\n          \"active\": true,\r\n          \"app_code\": \"number5\",\r\n          \"app_id\": 1,\r\n          \"application_version\": null,\r\n          \"config_url\": null,\r\n          \"create_time\": \"2020-03-12T00:00:00\",\r\n          \"description\": \"string\",\r\n          \"name\": \"Quan 5\",\r\n          \"release_url\": null,\r\n          \"update_time\": \"2020-03-12T00:00:00\",\r\n          \"log\": [],\r\n          \"manage_project\": []\r\n        }\r\n      ],\r\n      \"application_relation_client\": [{\r\n          \"id\": 1,\r\n          \"client_id\": 1,\r\n          \"service_id\": 2,\r\n          \"service\": null\r\n        },\r\n        {\r\n          \"id\": 2,\r\n          \"client_id\": 1,\r\n          \"service_id\": 3,\r\n          \"service\": null\r\n        },\r\n        {\r\n          \"id\": 3,\r\n          \"client_id\": 1,\r\n          \"service_id\": 4,\r\n          \"service\": null\r\n        }\r\n      ],\r\n      \"application_relation_service\": [{\r\n          \"id\": 4,\r\n          \"client_id\": 2,\r\n          \"service_id\": 1,\r\n          \"client\": null\r\n        },\r\n        {\r\n          \"id\": 9,\r\n          \"client_id\": 3,\r\n          \"service_id\": 1,\r\n          \"client\": null\r\n        },\r\n        {\r\n          \"id\": 10,\r\n          \"client_id\": 4,\r\n          \"service_id\": 1,\r\n          \"client\": null\r\n        }\r\n      ],\r\n      \"manage_project\": [],\r\n      \"repo\": [{\r\n        \"id\": 1,\r\n        \"active\": true,\r\n        \"application_id\": 1,\r\n        \"create_time\": \"2020-03-12T00:00:00\",\r\n        \"name\": \"string\",\r\n        \"note\": \"string\",\r\n        \"repo_url\": \"string\",\r\n        \"server_id\": 1,\r\n        \"update_time\": \"2020-03-12T00:00:00\",\r\n        \"server\": null\r\n      }]\r\n    },\r\n  ],\r\n\r\n\r\n  toggleCreateModal: false,\r\n  toggleInformationModal: false,\r\n  currentSelectedApplication: 1,\r\n};\r\n\r\n//    Use dictionary instead of switch statement in reducer\r\nconst dictionary = {\r\n\r\n  [REQUEST_FETCH_API]: (state, payload) => {\r\n    // alert(\"RequestFetchingAPI \");\r\n\r\n    return payload ? {\r\n        ...state,\r\n        fetchStatus: payload\r\n      } :\r\n      state;\r\n  },\r\n\r\n  [STORE_APPLICATION_LIST]: (state, {\r\n    payload = []\r\n  }) => {\r\n    return payload.length > 0 ? {\r\n        ...state,\r\n        currentDataList: payload\r\n      } :\r\n      state;\r\n  },\r\n\r\n  [TOGGLE_CREATE_APPLICATION_MODAL]: state => {\r\n    ////console.log(\"ToggleCreateAPPLICATION \" + state);\r\n\r\n    return {\r\n      ...state,\r\n      toggleCreateModal: !state.toggleCreateModal\r\n    };\r\n  },\r\n\r\n  [TOGGLE_INFORMATION_MODAL]: state => {\r\n    ////console.log(\"ToggleInformation \" + state);\r\n\r\n    return {\r\n      ...state,\r\n      toggleInformationModal: !state.toggleInformationModal\r\n    };\r\n  },\r\n\r\n  [STORE_CURRENT_SELECTED_APPLICATION]: (state, {\r\n    payload = 0\r\n  }) => {\r\n    //    //console.log(\"StoreCurrentSelectedServer \", payload);\r\n    return {\r\n      ...state,\r\n      currentSelectedApplication: payload\r\n    };\r\n  },\r\n\r\n  [CREATE_NEW_APPLICATION]: (state, {\r\n    payload\r\n  }) => {\r\n    //console.log(\"CreateNewAPPLICATION \", payload);\r\n    return {\r\n      ...state,\r\n      currentDataList: [\r\n        ...state.currentDataList,\r\n        {\r\n          ...payload,\r\n          id: state.currentDataList.length + 1\r\n        }\r\n      ]\r\n    };\r\n  },\r\n}\r\n\r\nexport const applicationReducer = baseReducer(initialState, dictionary);","import {\r\n    RepoActionTypes\r\n} from \"../constants\";\r\nimport {\r\n    baseReducer\r\n} from \"./baseReducer\";\r\n\r\n//    Action type destructor\r\nlet {\r\n    REQUEST_FETCH_API,\r\n    STORE_REPO_LIST,\r\n} = RepoActionTypes;\r\n\r\n//  initial state\r\nconst initialState = {\r\n    fetchStatus: true,\r\n    currentDataList: [],\r\n};\r\n\r\nconst dictionary = {\r\n    [REQUEST_FETCH_API]: (state, payload) => {\r\n        return payload ? {\r\n            ...state,\r\n            fetchStatus: payload\r\n        } : state;\r\n    },\r\n\r\n    [STORE_REPO_LIST]: (state, {\r\n        payload = []\r\n    }) => {\r\n        return payload.length ? {\r\n            ...state,\r\n            currentDataList: payload\r\n        } : state;\r\n    }\r\n\r\n}\r\n\r\nexport const repoReducer = baseReducer(initialState, dictionary);","import {\r\n    SystemActionTypes\r\n} from \"../constants\";\r\nimport {\r\n    baseReducer\r\n} from \"./baseReducer\";\r\n\r\n//    Action type destructor\r\nlet {\r\n    REQUEST_FETCH_API,\r\n    STORE_SYSTEM_LIST,\r\n} = SystemActionTypes;\r\n\r\n//  initial state\r\nconst initialState = {\r\n    fetchStatus: true,\r\n    currentDataList: [],\r\n};\r\n\r\nconst dictionary = {\r\n    [REQUEST_FETCH_API]: (state, payload) => {\r\n        return payload ? {\r\n            ...state,\r\n            fetchStatus: payload\r\n        } : state;\r\n    },\r\n\r\n    [STORE_SYSTEM_LIST]: (state, {\r\n        payload = []\r\n    }) => {\r\n        return payload.length ? {\r\n            ...state,\r\n            currentDataList: payload\r\n        } : state;\r\n    }\r\n\r\n}\r\n\r\nexport const systemReducer = baseReducer(initialState, dictionary);","import {\r\n    LogActionTypes\r\n} from \"../constants\";\r\nimport {\r\n    baseReducer\r\n} from \"./baseReducer\";\r\n\r\n//    Action type destructor\r\nlet {\r\n    REQUEST_FETCH_API,\r\n    STORE_LOG_LIST,\r\n} = LogActionTypes;\r\n\r\n//  initial state\r\nconst initialState = {\r\n    fetchStatus: false,\r\n    currentDataList: [],\r\n};\r\n\r\nconst dictionary = {\r\n    [REQUEST_FETCH_API]: (state, payload) => {\r\n        return payload ? {\r\n            ...state,\r\n            fetchStatus: payload\r\n        } : state;\r\n    },\r\n\r\n    [STORE_LOG_LIST]: (state, {\r\n        payload = []\r\n    }) => {\r\n        return payload.length ? {\r\n            ...state,\r\n            currentDataList: payload\r\n        } : state;\r\n    }\r\n\r\n}\r\n\r\nexport const logReducer = baseReducer(initialState, dictionary);","import {\r\n    ApplicationInstanceActionTypes\r\n  } from \"../constants\";\r\n  import {\r\n    baseReducer\r\n  } from \"./baseReducer\";\r\n  //  Action type destructor\r\n  const {\r\n    REQUEST_FETCH_API,\r\n    // GET_APPLICATION_INSTANCE_LIST,\r\n    STORE_APPLICATION_INSTANCE_LIST,\r\n  \r\n    TOGGLE_CREATE_APPLICATION_INSTANCE_MODAL,\r\n    TOGGLE_INFORMATION_MODAL,\r\n  \r\n    STORE_CURRENT_SELECTED_APPLICATION_INSTANCE,\r\n  \r\n  } = ApplicationInstanceActionTypes;\r\n  \r\n  //  Get today\r\n  const today = new Date(Date.now());\r\n  \r\n  //  Initial state\r\n  const initialState = {\r\n    fetchStatus: true,\r\n    currentDataList: [\r\n        {\r\n            \"id\": 1,\r\n            \"active\": true,\r\n            \"app_code\": \"number1\",\r\n            \"app_id\": 1,\r\n            \"application_version\": null,\r\n            \"config_url\": null,\r\n            \"create_time\": \"2020-03-12T00:00:00\",\r\n            \"description\": \"string\",\r\n            \"name\": \"Quan 1\",\r\n            \"release_url\": null,\r\n            \"update_time\": \"2020-03-12T00:00:00\",\r\n            \"app\": {\r\n              \"id\": 1,\r\n              \"active\": true,\r\n              \"category\": 1,\r\n              \"create_time\": \"2020-03-11T00:00:00\",\r\n              \"description\": null,\r\n              \"efford\": null,\r\n              \"end_date\": null,\r\n              \"is_done\": true,\r\n              \"name\": \"Log API\",\r\n              \"note\": null,\r\n              \"origin\": \"I\",\r\n              \"priority\": 1,\r\n              \"source_code_url\": null,\r\n              \"stage\": null,\r\n              \"start_date\": \"2020-03-11T00:00:00\",\r\n              \"status\": 1,\r\n              \"systems_id\": 1,\r\n              \"team\": null,\r\n              \"technologies\": null,\r\n              \"type\": \"N\",\r\n              \"update_time\": \"2020-03-12T00:00:00\",\r\n              \"systems\": null,\r\n              \"application_instance\": [],\r\n              \"manage_project\": [],\r\n              \"repo\": []\r\n            },\r\n            \"log\": [],\r\n            \"manage_project\": []\r\n          },\r\n          {\r\n            \"id\": 2,\r\n            \"active\": true,\r\n            \"app_code\": \"number2\",\r\n            \"app_id\": 1,\r\n            \"application_version\": null,\r\n            \"config_url\": null,\r\n            \"create_time\": \"2020-03-12T00:00:00\",\r\n            \"description\": \"string\",\r\n            \"name\": \"Quan 2\",\r\n            \"release_url\": null,\r\n            \"update_time\": \"2020-03-12T00:00:00\",\r\n            \"app\": {\r\n              \"id\": 1,\r\n              \"active\": true,\r\n              \"category\": 1,\r\n              \"create_time\": \"2020-03-11T00:00:00\",\r\n              \"description\": null,\r\n              \"efford\": null,\r\n              \"end_date\": null,\r\n              \"is_done\": true,\r\n              \"name\": \"Log API\",\r\n              \"note\": null,\r\n              \"origin\": \"I\",\r\n              \"priority\": 1,\r\n              \"source_code_url\": null,\r\n              \"stage\": null,\r\n              \"start_date\": \"2020-03-11T00:00:00\",\r\n              \"status\": 1,\r\n              \"systems_id\": 1,\r\n              \"team\": null,\r\n              \"technologies\": null,\r\n              \"type\": \"N\",\r\n              \"update_time\": \"2020-03-12T00:00:00\",\r\n              \"systems\": null,\r\n              \"application_instance\": [\r\n                {\r\n                  \"id\": 1,\r\n                  \"active\": true,\r\n                  \"app_code\": \"number1\",\r\n                  \"app_id\": 1,\r\n                  \"application_version\": null,\r\n                  \"config_url\": null,\r\n                  \"create_time\": \"2020-03-12T00:00:00\",\r\n                  \"description\": \"string\",\r\n                  \"name\": \"Quan 1\",\r\n                  \"release_url\": null,\r\n                  \"update_time\": \"2020-03-12T00:00:00\",\r\n                  \"log\": [],\r\n                  \"manage_project\": []\r\n                }\r\n              ],\r\n              \"manage_project\": [],\r\n              \"repo\": []\r\n            },\r\n            \"log\": [],\r\n            \"manage_project\": []\r\n          }\r\n    ],\r\n  \r\n  \r\n    toggleCreateModal: false,\r\n    toggleInformationModal: false,\r\n    currentSelectedApplicationInstance: 1,\r\n  };\r\n  \r\n  //    Use dictionary instead of switch statement in reducer\r\n  const dictionary = {\r\n  \r\n    [REQUEST_FETCH_API]: (state, payload) => {\r\n      ////console.log(\"RequestFetchingAPI \" + status);\r\n  \r\n      return payload ? {\r\n          ...state,\r\n          fetchStatus: payload\r\n        } :\r\n        state;\r\n    },\r\n  \r\n    [STORE_APPLICATION_INSTANCE_LIST]: (state, {\r\n      payload = []\r\n    }) => {\r\n      return payload.length > 0 ? {\r\n          ...state,\r\n          currentDataList: payload\r\n        } :\r\n        state;\r\n    },\r\n  \r\n    [TOGGLE_CREATE_APPLICATION_INSTANCE_MODAL]: state => {\r\n      ////console.log(\"ToggleCreateAPPLICATION_INSTANCE \" + state);\r\n  \r\n      return {\r\n        ...state,\r\n        toggleCreateModal: !state.toggleCreateModal\r\n      };\r\n    },\r\n  \r\n    [TOGGLE_INFORMATION_MODAL]: state => {\r\n      ////console.log(\"ToggleInformation \" + state);\r\n  \r\n      return {\r\n        ...state,\r\n        toggleInformationModal: !state.toggleInformationModal\r\n      };\r\n    },\r\n  \r\n    [STORE_CURRENT_SELECTED_APPLICATION_INSTANCE]: (state, {\r\n      payload = 0\r\n    }) => {\r\n      return {\r\n        ...state,\r\n        currentSelectedApplicationInstance: payload\r\n      };\r\n    },\r\n\r\n  }\r\n  \r\n  export const applicationInstanceReducer = baseReducer(initialState, dictionary);","import {\r\n    EmployeeActionTypes\r\n} from \"../constants\";\r\nimport {\r\n    baseReducer\r\n} from \"./baseReducer\";\r\n//  Action type destructor\r\nconst {\r\n    REQUEST_FETCH_API,\r\n    // GET_EMPLOYEE_LIST,\r\n    STORE_EMPLOYEE_LIST,\r\n\r\n    TOGGLE_CREATE_EMPLOYEE_MODAL,\r\n    TOGGLE_INFORMATION_MODAL,\r\n\r\n    STORE_CURRENT_SELECTED_EMPLOYEE,\r\n\r\n    CREATE_NEW_EMPLOYEE,\r\n\r\n    // //  Update\r\n    // UPDATE_EMPLOYEE_INFORMATION,\r\n    // UPDATE_SYSTEM,\r\n    // UPDATE_REPO,\r\n    // UPDATE_EMPLOYEE_STATUS,\r\n\r\n} = EmployeeActionTypes;\r\n\r\n//  Get today\r\nconst today = new Date(Date.now());\r\n\r\n//  Initial state\r\nconst initialState = {\r\n    fetchStatus: true,\r\n    currentDataList: [{\r\n        \"id\": 1,\r\n        \"active\": true,\r\n        \"address\": null,\r\n        \"asp_net_user_id\": 6,\r\n        \"email\": \"string@gmail.com\",\r\n        \"name\": null,\r\n        \"phone\": null,\r\n        \"role\": 1,\r\n        \"asp_net_user\": null,\r\n        \"manage_project\": [{\r\n                \"id\": 5,\r\n                \"account_id\": 1,\r\n                \"application_id\": 5,\r\n                \"application_instance_id\": 1,\r\n                \"application\": null,\r\n                \"application_instance\": null\r\n            },\r\n            {\r\n                \"id\": 6,\r\n                \"account_id\": 1,\r\n                \"application_id\": 5,\r\n                \"application_instance_id\": 2,\r\n                \"application\": null,\r\n                \"application_instance\": null\r\n            },\r\n            {\r\n                \"id\": 7,\r\n                \"account_id\": 1,\r\n                \"application_id\": 5,\r\n                \"application_instance_id\": 3,\r\n                \"application\": null,\r\n                \"application_instance\": null\r\n            },\r\n            {\r\n                \"id\": 8,\r\n                \"account_id\": 1,\r\n                \"application_id\": 1,\r\n                \"application_instance_id\": 6,\r\n                \"application\": null,\r\n                \"application_instance\": null\r\n            },\r\n            {\r\n                \"id\": 9,\r\n                \"account_id\": 1,\r\n                \"application_id\": 2,\r\n                \"application_instance_id\": 6,\r\n                \"application\": null,\r\n                \"application_instance\": null\r\n            }\r\n        ]\r\n    }, ],\r\n\r\n\r\n    toggleCreateModal: false,\r\n    toggleInformationModal: false,\r\n    currentSelectedEmployee: 1,\r\n};\r\n\r\n//    Use dictionary instead of switch statement in reducer\r\nconst dictionary = {\r\n\r\n    [REQUEST_FETCH_API]: (state, payload) => {\r\n        ////console.log(\"RequestFetchingAPI \" + status);\r\n\r\n        return payload ? {\r\n                ...state,\r\n                fetchStatus: payload\r\n            } :\r\n            state;\r\n    },\r\n\r\n    [STORE_EMPLOYEE_LIST]: (state, {\r\n        payload = []\r\n    }) => {\r\n        return payload.length > 0 ? {\r\n                ...state,\r\n                currentDataList: payload\r\n            } :\r\n            state;\r\n    },\r\n\r\n    [TOGGLE_CREATE_EMPLOYEE_MODAL]: state => {\r\n        ////console.log(\"ToggleCreateEMPLOYEE \" + state);\r\n\r\n        return {\r\n            ...state,\r\n            toggleCreateModal: !state.toggleCreateModal\r\n        };\r\n    },\r\n\r\n    [TOGGLE_INFORMATION_MODAL]: state => {\r\n        ////console.log(\"ToggleInformation \" + state);\r\n\r\n        return {\r\n            ...state,\r\n            toggleInformationModal: !state.toggleInformationModal\r\n        };\r\n    },\r\n\r\n    [STORE_CURRENT_SELECTED_EMPLOYEE]: (state, {\r\n        payload = 0\r\n    }) => {\r\n        return {\r\n            ...state,\r\n            currentSelectedEmployee: payload\r\n        };\r\n    },\r\n\r\n    [CREATE_NEW_EMPLOYEE]: (state, {\r\n        payload\r\n    }) => {\r\n        //console.log(\"CreateNewEMPLOYEE \", payload);\r\n        return {\r\n            ...state,\r\n            currentDataList: [\r\n                ...state.currentDataList,\r\n                {\r\n                    ...payload,\r\n                    id: state.currentDataList.length + 1\r\n                }\r\n            ]\r\n        };\r\n    },\r\n}\r\n\r\nexport const employeeReducer = baseReducer(initialState, dictionary);","import {\r\n    ProfileActionTypes\r\n} from \"../constants\";\r\nimport {\r\n    baseReducer\r\n} from \"./baseReducer\";\r\n//  Action type destructor\r\nconst {\r\n    REQUEST_FETCH_API,\r\n    // GET_PROFILE_LIST,\r\n    STORE_PROFILE,\r\n\r\n    TOGGLE_CREATE_PROFILE_MODAL,\r\n    TOGGLE_INFORMATION_MODAL,\r\n\r\n    STORE_CURRENT_SELECTED_PROFILE,\r\n\r\n    CREATE_NEW_PROFILE,\r\n\r\n    // //  Update\r\n    // UPDATE_PROFILE_INFORMATION,\r\n    // UPDATE_SYSTEM,\r\n    // UPDATE_REPO,\r\n    // UPDATE_PROFILE_STATUS,\r\n    //  LOGIN \r\n    LOGIN,\r\n    REQUEST_RESET_PASSWORD,\r\n    CHANGE_PASSWORD,\r\n\r\n    //  TOGGLE PROFILE PAGE\r\n    TOGGLE_PROFILE_COMPONENT,\r\n} = ProfileActionTypes;\r\n\r\n//  Get today\r\nconst today = new Date(Date.now());\r\n\r\n//  Initial state\r\nconst initialState = {\r\n    fetchStatus: true,\r\n    currentDataList: {\r\n        \"id\": 1,\r\n        \"active\": true,\r\n        \"address\": null,\r\n        \"asp_net_user_id\": 6,\r\n        \"email\": \"string@gmail.com\",\r\n        \"name\": null,\r\n        \"phone\": null,\r\n        \"role\": 1,\r\n        \"asp_net_user\": null,\r\n        \"manage_project\": [{\r\n                \"id\": 5,\r\n                \"account_id\": 1,\r\n                \"application_id\": 5,\r\n                \"application_instance_id\": 1,\r\n                \"application\": null,\r\n                \"application_instance\": null\r\n            },\r\n            {\r\n                \"id\": 6,\r\n                \"account_id\": 1,\r\n                \"application_id\": 5,\r\n                \"application_instance_id\": 2,\r\n                \"application\": null,\r\n                \"application_instance\": null\r\n            },\r\n            {\r\n                \"id\": 7,\r\n                \"account_id\": 1,\r\n                \"application_id\": 5,\r\n                \"application_instance_id\": 3,\r\n                \"application\": null,\r\n                \"application_instance\": null\r\n            },\r\n            {\r\n                \"id\": 8,\r\n                \"account_id\": 1,\r\n                \"application_id\": 1,\r\n                \"application_instance_id\": 6,\r\n                \"application\": null,\r\n                \"application_instance\": null\r\n            },\r\n            {\r\n                \"id\": 9,\r\n                \"account_id\": 1,\r\n                \"application_id\": 2,\r\n                \"application_instance_id\": 6,\r\n                \"application\": null,\r\n                \"application_instance\": null\r\n            }\r\n        ]\r\n    },\r\n\r\n    toggleProfileComponent: true,\r\n    toggleCreateModal: false,\r\n    toggleInformationModal: false,\r\n    currentSelectedProfile: 1,\r\n};\r\n\r\n//    Use dictionary instead of switch statement in reducer\r\nconst dictionary = {\r\n\r\n    [LOGIN]: (state, payload) => {\r\n        ////console.log(\"RequestFetchingAPI \" + status);\r\n        alert(\"LOGIN\");\r\n        // return payload ? {\r\n        //         ...state,\r\n        //         fetchStatus: payload\r\n        //     } :\r\n        //     state;\r\n    },\r\n\r\n    [REQUEST_RESET_PASSWORD]: (state, payload) => {\r\n        ////console.log(\"RequestFetchingAPI \" + status);\r\n        alert(\"REQUEST_RESET_PASSWORD\");\r\n        // return payload ? {\r\n        //         ...state,\r\n        //         fetchStatus: payload\r\n        //     } :\r\n        //     state;\r\n    },\r\n\r\n    [CHANGE_PASSWORD]: (state, payload) => {\r\n        ////console.log(\"RequestFetchingAPI \" + status);\r\n        alert(\"CHANGE_PASSWORD\");\r\n        // return payload ? {\r\n        //         ...state,\r\n        //         fetchStatus: payload\r\n        //     } :\r\n        //     state;\r\n    },\r\n\r\n    [TOGGLE_PROFILE_COMPONENT]: (state, payload) => {\r\n        return payload ? {\r\n                ...state,\r\n                toggleProfileComponent: !state.toggleProfileComponent\r\n            } :\r\n            state;\r\n    },\r\n\r\n\r\n    [REQUEST_FETCH_API]: (state, payload) => {\r\n        //    alert(\"RequestFetchingAPI 2\");\r\n\r\n        return payload ? {\r\n                ...state,\r\n                fetchStatus: payload\r\n            } :\r\n            state;\r\n    },\r\n\r\n    [STORE_PROFILE]: (state, {\r\n        payload\r\n    }) => {\r\n        // console.log(\"STORE_PROFILE \" + JSON.stringify(payload));\r\n        return payload ? {\r\n                ...state,\r\n                currentDataList: payload\r\n            } :\r\n            state;\r\n    },\r\n\r\n    [TOGGLE_CREATE_PROFILE_MODAL]: state => {\r\n        ////console.log(\"ToggleCreateProfile \" + state);\r\n\r\n        return {\r\n            ...state,\r\n            toggleCreateModal: !state.toggleCreateModal\r\n        };\r\n    },\r\n\r\n    [TOGGLE_INFORMATION_MODAL]: state => {\r\n        ////console.log(\"ToggleInformation \" + state);\r\n\r\n        return {\r\n            ...state,\r\n            toggleInformationModal: !state.toggleInformationModal\r\n        };\r\n    },\r\n\r\n    [STORE_CURRENT_SELECTED_PROFILE]: (state, {\r\n        payload = 0\r\n    }) => {\r\n        return {\r\n            ...state,\r\n            currentSelectedProfile: payload\r\n        };\r\n    },\r\n\r\n    [CREATE_NEW_PROFILE]: (state, {\r\n        payload\r\n    }) => {\r\n        //console.log(\"CreateNewProfile \", payload);\r\n        return {\r\n            ...state,\r\n            currentDataList: [\r\n                ...state.currentDataList,\r\n                {\r\n                    ...payload,\r\n                    id: state.currentDataList.length + 1\r\n                }\r\n            ]\r\n        };\r\n    },\r\n}\r\n\r\nexport const profileReducer = baseReducer(initialState, dictionary);","import {combineReducers} from './../../../node_modules/redux';\r\nimport {loginReducer as Login} from './loginReducer.js';\r\nimport {serverReducer as Server} from './serverReducer.js';\r\nimport {applicationReducer as Application} from \"./applicationReducer.js\";\r\nimport {repoReducer as Repo} from \"./repoReducer.js\";\r\nimport {systemReducer as System} from \"./systemReducer.js\";\r\nimport {logReducer as Log} from \"./logReducer.js\";\r\nimport {applicationInstanceReducer as ApplicationInstance} from \"./applicationInstanceReducer.js\";\r\nimport {employeeReducer as Employee} from \"./employeeReducer.js\";\r\nimport {profileReducer as Profile} from \"./profileReducer.js\";\r\n\r\nexport default combineReducers({\r\n    Login,\r\n    Server,\r\n    Application,\r\n    Repo,\r\n    System,\r\n    Log,\r\n    ApplicationInstance,\r\n    Employee,\r\n    Profile,\r\n    \r\n    \r\n});","//import {createStore, applyMiddleware} from \"react-redux\";\r\nimport { createStore, applyMiddleware } from './../../../node_modules/redux';\r\nimport {createLogger} from \"./../../../node_modules/redux-logger\";\r\n\r\nimport rootReducer from \"./../Reducer/index\";\r\nimport thunkMiddleware from 'redux-thunk';\r\nconst logger = createLogger();\r\n\r\nexport const storeGlobal = createStore(\r\n    rootReducer,\r\n    applyMiddleware(\r\n        logger, \r\n        thunkMiddleware\r\n    )\r\n);\r\n\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n//import { BrowserRouter, Switch, Route, Redirect } from \"react-router-dom\";\n// import { BrowserRouter, Switch} from \"react-router-dom\";\n\nimport \"assets/vendor/nucleo/css/nucleo.css\";\nimport \"assets/vendor/@fortawesome/fontawesome-free/css/all.min.css\";\nimport \"assets/scss/argon-dashboard-react.scss\";\nimport \"assets/css/style.css\";\nimport App from \"./App\";\n// import AdminLayout from \"layouts/Admin.jsx\";\n// import AuthLayout from \"layouts/Auth.jsx\";\nimport { Provider } from \"react-redux\";\nimport { storeGlobal } from \"./redux/Store/storeGlobal.js\";\n\nstoreGlobal.subscribe(() => {\n  console.log(\"State Change\");\n  console.log(storeGlobal.getState());\n});\n\nReactDOM.render(\n  <Provider store={storeGlobal}>\n    <App />\n  </Provider>,\n\n  document.getElementById(\"root\")\n);\n\n// ReactDOM.render(\n//   <BrowserRouter>\n//     <Switch>\n//       <Route path=\"/admin\" render={props => <AdminLayout {...props} />} />\n//       <Route path=\"/auth\" render={props => <AuthLayout {...props} />} />\n//       <Redirect from=\"/\" to=\"/admin/index\" />\n//     </Switch>\n//   </BrowserRouter>,\n//   document.getElementById(\"root\")\n// );\n","/*!\n\n=========================================================\n* Argon Dashboard React - v1.0.0\n=========================================================\n\n* Product Page: https://www.creative-tim.com/product/argon-dashboard-react\n* Copyright 2019 Creative Tim (https://www.creative-tim.com)\n* Licensed under MIT (https://github.com/creativetimofficial/argon-dashboard-react/blob/master/LICENSE.md)\n\n* Coded by Creative Tim\n\n=========================================================\n\n* The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\n*/\nconst Chart = require(\"chart.js\");\n//\n// Chart extension for making the bars rounded\n// Code from: https://codepen.io/jedtrow/full/ygRYgo\n//\n\nChart.elements.Rectangle.prototype.draw = function() {\n  var ctx = this._chart.ctx;\n  var vm = this._view;\n  var left, right, top, bottom, signX, signY, borderSkipped, radius;\n  var borderWidth = vm.borderWidth;\n  // Set Radius Here\n  // If radius is large enough to cause drawing errors a max radius is imposed\n  var cornerRadius = 6;\n\n  if (!vm.horizontal) {\n    // bar\n    left = vm.x - vm.width / 2;\n    right = vm.x + vm.width / 2;\n    top = vm.y;\n    bottom = vm.base;\n    signX = 1;\n    signY = bottom > top ? 1 : -1;\n    borderSkipped = vm.borderSkipped || \"bottom\";\n  } else {\n    // horizontal bar\n    left = vm.base;\n    right = vm.x;\n    top = vm.y - vm.height / 2;\n    bottom = vm.y + vm.height / 2;\n    signX = right > left ? 1 : -1;\n    signY = 1;\n    borderSkipped = vm.borderSkipped || \"left\";\n  }\n\n  // Canvas doesn't allow us to stroke inside the width so we can\n  // adjust the sizes to fit if we're setting a stroke on the line\n  if (borderWidth) {\n    // borderWidth shold be less than bar width and bar height.\n    var barSize = Math.min(Math.abs(left - right), Math.abs(top - bottom));\n    borderWidth = borderWidth > barSize ? barSize : borderWidth;\n    var halfStroke = borderWidth / 2;\n    // Adjust borderWidth when bar top position is near vm.base(zero).\n    var borderLeft = left + (borderSkipped !== \"left\" ? halfStroke * signX : 0);\n    var borderRight =\n      right + (borderSkipped !== \"right\" ? -halfStroke * signX : 0);\n    var borderTop = top + (borderSkipped !== \"top\" ? halfStroke * signY : 0);\n    var borderBottom =\n      bottom + (borderSkipped !== \"bottom\" ? -halfStroke * signY : 0);\n    // not become a vertical line?\n    if (borderLeft !== borderRight) {\n      top = borderTop;\n      bottom = borderBottom;\n    }\n    // not become a horizontal line?\n    if (borderTop !== borderBottom) {\n      left = borderLeft;\n      right = borderRight;\n    }\n  }\n\n  ctx.beginPath();\n  ctx.fillStyle = vm.backgroundColor;\n  ctx.strokeStyle = vm.borderColor;\n  ctx.lineWidth = borderWidth;\n\n  // Corner points, from bottom-left to bottom-right clockwise\n  // | 1 2 |\n  // | 0 3 |\n  var corners = [[left, bottom], [left, top], [right, top], [right, bottom]];\n\n  // Find first (starting) corner with fallback to 'bottom'\n  var borders = [\"bottom\", \"left\", \"top\", \"right\"];\n  var startCorner = borders.indexOf(borderSkipped, 0);\n  if (startCorner === -1) {\n    startCorner = 0;\n  }\n\n  function cornerAt(index) {\n    return corners[(startCorner + index) % 4];\n  }\n\n  // Draw rectangle from 'startCorner'\n  var corner = cornerAt(0);\n  ctx.moveTo(corner[0], corner[1]);\n\n  for (var i = 1; i < 4; i++) {\n    corner = cornerAt(i);\n    let nextCornerId = i + 1;\n    if (nextCornerId === 4) {\n      nextCornerId = 0;\n    }\n\n    // let nextCorner = cornerAt(nextCornerId);\n\n    let width = corners[2][0] - corners[1][0];\n    let height = corners[0][1] - corners[1][1];\n    let x = corners[1][0];\n    let y = corners[1][1];\n    // eslint-disable-next-line\n    var radius: any = cornerRadius;\n\n    // Fix radius being too large\n    if (radius > height / 2) {\n      radius = height / 2;\n    }\n    if (radius > width / 2) {\n      radius = width / 2;\n    }\n\n    ctx.moveTo(x + radius, y);\n    ctx.lineTo(x + width - radius, y);\n    ctx.quadraticCurveTo(x + width, y, x + width, y + radius);\n    ctx.lineTo(x + width, y + height - radius);\n    ctx.quadraticCurveTo(x + width, y + height, x + width - radius, y + height);\n    ctx.lineTo(x + radius, y + height);\n    ctx.quadraticCurveTo(x, y + height, x, y + height - radius);\n    ctx.lineTo(x, y + radius);\n    ctx.quadraticCurveTo(x, y, x + radius, y);\n  }\n\n  ctx.fill();\n  if (borderWidth) {\n    ctx.stroke();\n  }\n};\n\nvar mode = \"light\"; //(themeMode) ? themeMode : 'light';\nvar fonts = {\n  base: \"Open Sans\"\n};\n\n// Colors\nvar colors = {\n  gray: {\n    100: \"#f6f9fc\",\n    200: \"#e9ecef\",\n    300: \"#dee2e6\",\n    400: \"#ced4da\",\n    500: \"#adb5bd\",\n    600: \"#8898aa\",\n    700: \"#525f7f\",\n    800: \"#32325d\",\n    900: \"#212529\"\n  },\n  theme: {\n    default: \"#172b4d\",\n    primary: \"#5e72e4\",\n    secondary: \"#f4f5f7\",\n    info: \"#11cdef\",\n    success: \"#2dce89\",\n    danger: \"#f5365c\",\n    warning: \"#fb6340\"\n  },\n  black: \"#12263F\",\n  white: \"#FFFFFF\",\n  transparent: \"transparent\"\n};\n\n// Methods\n\n// Chart.js global options\nfunction chartOptions() {\n  // Options\n  var options = {\n    defaults: {\n      global: {\n        responsive: true,\n        maintainAspectRatio: false,\n        defaultColor: mode === \"dark\" ? colors.gray[700] : colors.gray[600],\n        defaultFontColor: mode === \"dark\" ? colors.gray[700] : colors.gray[600],\n        defaultFontFamily: fonts.base,\n        defaultFontSize: 13,\n        layout: {\n          padding: 0\n        },\n        legend: {\n          display: false,\n          position: \"bottom\",\n          labels: {\n            usePointStyle: true,\n            padding: 16\n          }\n        },\n        elements: {\n          point: {\n            radius: 0,\n            backgroundColor: colors.theme[\"primary\"]\n          },\n          line: {\n            tension: 0.4,\n            borderWidth: 4,\n            borderColor: colors.theme[\"primary\"],\n            backgroundColor: colors.transparent,\n            borderCapStyle: \"rounded\"\n          },\n          rectangle: {\n            backgroundColor: colors.theme[\"warning\"]\n          },\n          arc: {\n            backgroundColor: colors.theme[\"primary\"],\n            borderColor: mode === \"dark\" ? colors.gray[800] : colors.white,\n            borderWidth: 4\n          }\n        },\n        tooltips: {\n          enabled: true,\n          mode: \"index\",\n          intersect: false\n        }\n      },\n      doughnut: {\n        cutoutPercentage: 83,\n        legendCallback: function(chart) {\n          var data = chart.data;\n          var content = \"\";\n\n          data.labels.forEach(function(label, index) {\n            var bgColor = data.datasets[0].backgroundColor[index];\n\n            content += '<span class=\"chart-legend-item\">';\n            content +=\n              '<i class=\"chart-legend-indicator\" style=\"background-color: ' +\n              bgColor +\n              '\"></i>';\n            content += label;\n            content += \"</span>\";\n          });\n\n          return content;\n        }\n      }\n    }\n  };\n\n  // yAxes\n  Chart.scaleService.updateScaleDefaults(\"linear\", {\n    gridLines: {\n      borderDash: [2],\n      borderDashOffset: [2],\n      color: mode === \"dark\" ? colors.gray[900] : colors.gray[300],\n      drawBorder: false,\n      drawTicks: false,\n      lineWidth: 0,\n      zeroLineWidth: 0,\n      zeroLineColor: mode === \"dark\" ? colors.gray[900] : colors.gray[300],\n      zeroLineBorderDash: [2],\n      zeroLineBorderDashOffset: [2]\n    },\n    ticks: {\n      beginAtZero: true,\n      padding: 10,\n      callback: function(value) {\n        if (!(value % 10)) {\n          return value;\n        }\n      }\n    }\n  });\n\n  // xAxes\n  Chart.scaleService.updateScaleDefaults(\"category\", {\n    gridLines: {\n      drawBorder: false,\n      drawOnChartArea: false,\n      drawTicks: false\n    },\n    ticks: {\n      padding: 20\n    },\n    maxBarThickness: 10\n  });\n\n  return options;\n}\n\n// Parse global options\nfunction parseOptions(parent, options) {\n  for (var item in options) {\n    if (typeof options[item] !== \"object\") {\n      parent[item] = options[item];\n    } else {\n      parseOptions(parent[item], options[item]);\n    }\n  }\n}\n\n// Example 1 of Chart inside src/views/Index.jsx (Sales value - Card)\nlet chartExample1 = {\n  options: {\n    scales: {\n      yAxes: [\n        {\n          gridLines: {\n            color: colors.gray[900],\n            zeroLineColor: colors.gray[900]\n          },\n          ticks: {\n            callback: function(value) {\n              if (!(value % 10)) {\n                return \"$\" + value + \"k\";\n              }\n            }\n          }\n        }\n      ]\n    },\n    tooltips: {\n      callbacks: {\n        label: function(item, data) {\n          var label = data.datasets[item.datasetIndex].label || \"\";\n          var yLabel = item.yLabel;\n          var content = \"\";\n\n          if (data.datasets.length > 1) {\n            content += label;\n          }\n\n          content += \"$\" + yLabel + \"k\";\n          return content;\n        }\n      }\n    }\n  },\n  data1: canvas => {\n    return {\n      labels: [\"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"],\n      datasets: [\n        {\n          label: \"Performance\",\n          data: [0, 20, 10, 30, 15, 40, 20, 60, 60]\n        }\n      ]\n    };\n  },\n  data2: canvas => {\n    return {\n      labels: [\"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"],\n      datasets: [\n        {\n          label: \"Performance\",\n          data: [0, 20, 5, 25, 10, 30, 15, 40, 40]\n        }\n      ]\n    };\n  }\n};\n\n// Example 2 of Chart inside src/views/Index.jsx (Total orders - Card)\nlet chartExample2 = {\n  options: {\n    scales: {\n      yAxes: [\n        {\n          ticks: {\n            callback: function(value) {\n              if (!(value % 10)) {\n                //return '$' + value + 'k'\n                return value;\n              }\n            }\n          }\n        }\n      ]\n    },\n    tooltips: {\n      callbacks: {\n        label: function(item, data) {\n          var label = data.datasets[item.datasetIndex].label || \"\";\n          var yLabel = item.yLabel;\n          var content = \"\";\n          if (data.datasets.length > 1) {\n            content += label;\n          }\n          content += yLabel;\n          return content;\n        }\n      }\n    }\n  },\n  data: {\n    labels: [\"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"],\n    datasets: [\n      {\n        label: \"Sales\",\n        data: [25, 20, 30, 22, 17, 29]\n      }\n    ]\n  }\n};\n\nmodule.exports = {\n  chartOptions, // used inside src/views/Index.jsx\n  parseOptions, // used inside src/views/Index.jsx\n  chartExample1, // used inside src/views/Index.jsx\n  chartExample2 // used inside src/views/Index.jsx\n};\n","module.exports = __webpack_public_path__ + \"static/media/google.87be59a1.svg\";"],"sourceRoot":""}